// Generated from ../monaco/antlr/Java20Parser.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';
import Java20ParserListener from './Java20ParserListener.js';
import Java20ParserVisitor from './Java20ParserVisitor.js';

const serializedATN = [4,1,126,2946,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,2,159,7,159,
2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,2,165,7,165,
2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,2,171,7,171,
2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,2,177,7,177,
2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,2,183,7,183,
2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,
2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,
2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,
2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,
2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,7,219,
2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,2,225,7,225,
2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,2,231,7,231,
2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,2,237,7,237,
2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,7,242,2,243,7,243,
2,244,7,244,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,5,4,501,8,4,10,4,12,
4,504,9,4,1,4,1,4,3,4,508,8,4,1,5,1,5,3,5,512,8,5,1,6,1,6,1,7,1,7,1,8,1,
8,1,8,3,8,521,8,8,1,9,1,9,5,9,525,8,9,10,9,12,9,528,9,9,1,9,1,9,3,9,532,
8,9,1,9,3,9,535,8,9,1,10,1,10,1,10,3,10,540,8,10,1,10,5,10,543,8,10,10,10,
12,10,546,9,10,1,10,1,10,3,10,550,8,10,1,10,3,10,553,8,10,1,11,5,11,556,
8,11,10,11,12,11,559,9,11,1,11,1,11,3,11,563,8,11,1,11,1,11,1,11,5,11,568,
8,11,10,11,12,11,571,9,11,1,11,1,11,3,11,575,8,11,1,11,1,11,1,11,5,11,580,
8,11,10,11,12,11,583,9,11,1,11,1,11,3,11,587,8,11,3,11,589,8,11,1,12,1,12,
1,13,5,13,594,8,13,10,13,12,13,597,9,13,1,13,1,13,1,14,1,14,1,14,1,14,1,
14,1,14,1,14,1,14,1,14,3,14,610,8,14,1,15,5,15,613,8,15,10,15,12,15,616,
9,15,1,15,1,15,1,15,5,15,621,8,15,10,15,12,15,624,9,15,1,15,1,15,5,15,628,
8,15,10,15,12,15,631,9,15,1,16,5,16,634,8,16,10,16,12,16,637,9,16,1,16,1,
16,3,16,641,8,16,1,17,1,17,1,18,1,18,1,18,1,18,5,18,649,8,18,10,18,12,18,
652,9,18,3,18,654,8,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,
5,21,666,8,21,10,21,12,21,669,9,21,1,22,1,22,3,22,673,8,22,1,23,5,23,676,
8,23,10,23,12,23,679,9,23,1,23,1,23,3,23,683,8,23,1,24,1,24,1,24,1,24,3,
24,689,8,24,1,25,1,25,1,25,3,25,694,8,25,1,26,1,26,1,26,3,26,699,8,26,1,
27,1,27,1,27,3,27,704,8,27,1,28,1,28,1,28,3,28,709,8,28,1,29,1,29,1,29,3,
29,714,8,29,1,29,1,29,1,30,1,30,1,31,1,31,1,31,3,31,723,8,31,1,32,1,32,3,
32,727,8,32,1,33,3,33,730,8,33,1,33,5,33,733,8,33,10,33,12,33,736,9,33,1,
33,5,33,739,8,33,10,33,12,33,742,9,33,1,34,5,34,745,8,34,10,34,12,34,748,
9,34,1,34,1,34,1,35,5,35,753,8,35,10,35,12,35,756,9,35,1,35,1,35,1,35,1,
35,5,35,762,8,35,10,35,12,35,765,9,35,1,35,1,35,1,36,1,36,1,37,1,37,1,37,
1,37,3,37,775,8,37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,40,
1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,
42,1,42,3,42,804,8,42,1,43,5,43,807,8,43,10,43,12,43,810,9,43,1,43,3,43,
813,8,43,1,43,1,43,1,43,1,43,5,43,819,8,43,10,43,12,43,822,9,43,1,43,1,43,
5,43,826,8,43,10,43,12,43,829,9,43,1,43,1,43,1,44,1,44,5,44,835,8,44,10,
44,12,44,838,9,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,5,44,849,
8,44,10,44,12,44,852,9,44,3,44,854,8,44,1,44,1,44,1,44,1,44,1,44,1,44,1,
44,1,44,5,44,864,8,44,10,44,12,44,867,9,44,3,44,869,8,44,1,44,1,44,1,44,
1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,5,44,883,8,44,10,44,12,44,886,
9,44,1,44,1,44,3,44,890,8,44,1,45,1,45,1,46,1,46,1,46,3,46,897,8,46,1,47,
5,47,900,8,47,10,47,12,47,903,9,47,1,47,1,47,1,47,3,47,908,8,47,1,47,3,47,
911,8,47,1,47,3,47,914,8,47,1,47,3,47,917,8,47,1,47,1,47,1,48,1,48,1,48,
1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,931,8,48,1,49,1,49,1,49,1,49,1,50,
1,50,1,50,5,50,940,8,50,10,50,12,50,943,9,50,1,51,1,51,1,51,1,52,1,52,1,
52,1,53,1,53,1,53,5,53,954,8,53,10,53,12,53,957,9,53,1,54,1,54,1,54,1,54,
5,54,963,8,54,10,54,12,54,966,9,54,1,55,1,55,5,55,970,8,55,10,55,12,55,973,
9,55,1,55,1,55,1,56,1,56,1,56,1,56,3,56,981,8,56,1,57,1,57,1,57,1,57,1,57,
3,57,988,8,57,1,58,5,58,991,8,58,10,58,12,58,994,9,58,1,58,1,58,1,58,1,58,
1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,1008,8,59,1,60,1,60,1,60,5,
60,1013,8,60,10,60,12,60,1016,9,60,1,61,1,61,1,61,3,61,1021,8,61,1,62,1,
62,3,62,1025,8,62,1,63,1,63,3,63,1029,8,63,1,64,1,64,3,64,1033,8,64,1,65,
1,65,3,65,1037,8,65,1,66,1,66,1,66,3,66,1042,8,66,1,67,1,67,1,67,5,67,1047,
8,67,10,67,12,67,1050,9,67,3,67,1052,8,67,1,67,1,67,3,67,1056,8,67,1,67,
3,67,1059,8,67,1,68,1,68,5,68,1063,8,68,10,68,12,68,1066,9,68,1,68,1,68,
3,68,1070,8,68,1,68,3,68,1073,8,68,1,69,1,69,3,69,1077,8,69,1,69,1,69,3,
69,1081,8,69,1,69,1,69,5,69,1085,8,69,10,69,12,69,1088,9,69,1,69,1,69,3,
69,1092,8,69,3,69,1094,8,69,1,70,1,70,1,71,1,71,1,72,1,72,1,72,3,72,1103,
8,72,1,72,1,72,1,73,5,73,1108,8,73,10,73,12,73,1111,9,73,1,73,1,73,1,73,
1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,1126,8,74,1,75,1,
75,5,75,1130,8,75,10,75,12,75,1133,9,75,3,75,1135,8,75,1,75,1,75,1,75,3,
75,1140,8,75,1,76,1,76,3,76,1144,8,76,1,77,1,77,1,77,1,77,1,77,3,77,1151,
8,77,1,77,3,77,1154,8,77,1,77,1,77,3,77,1158,8,77,1,78,5,78,1161,8,78,10,
78,12,78,1164,9,78,1,78,1,78,1,78,3,78,1169,8,78,1,78,1,78,1,79,1,79,1,79,
5,79,1176,8,79,10,79,12,79,1179,9,79,1,80,5,80,1182,8,80,10,80,12,80,1185,
9,80,1,80,1,80,1,80,1,80,3,80,1191,8,80,1,81,5,81,1194,8,81,10,81,12,81,
1197,9,81,1,81,1,81,5,81,1201,8,81,10,81,12,81,1204,9,81,1,81,1,81,1,81,
1,82,1,82,3,82,1211,8,82,1,83,1,83,1,83,1,84,1,84,1,84,5,84,1219,8,84,10,
84,12,84,1222,9,84,1,85,1,85,3,85,1226,8,85,1,86,1,86,3,86,1230,8,86,1,87,
1,87,1,88,1,88,1,88,1,89,5,89,1238,8,89,10,89,12,89,1241,9,89,1,89,1,89,
3,89,1245,8,89,1,89,1,89,1,90,1,90,1,90,1,90,3,90,1253,8,90,1,91,3,91,1256,
8,91,1,91,1,91,1,91,1,91,1,91,3,91,1263,8,91,1,91,3,91,1266,8,91,1,91,1,
91,1,92,1,92,1,93,1,93,3,93,1274,8,93,1,93,3,93,1277,8,93,1,93,1,93,1,94,
3,94,1282,8,94,1,94,1,94,1,94,3,94,1287,8,94,1,94,1,94,1,94,1,94,3,94,1293,
8,94,1,94,1,94,3,94,1297,8,94,1,94,1,94,1,94,3,94,1302,8,94,1,94,1,94,1,
94,3,94,1307,8,94,1,95,5,95,1310,8,95,10,95,12,95,1313,9,95,1,95,1,95,1,
95,3,95,1318,8,95,1,95,1,95,1,96,1,96,3,96,1324,8,96,1,96,3,96,1327,8,96,
1,96,3,96,1330,8,96,1,96,1,96,1,97,1,97,1,97,5,97,1337,8,97,10,97,12,97,
1340,9,97,1,98,5,98,1343,8,98,10,98,12,98,1346,9,98,1,98,1,98,1,98,3,98,
1351,8,98,1,98,3,98,1354,8,98,1,98,3,98,1357,8,98,1,99,1,99,1,100,1,100,
5,100,1363,8,100,10,100,12,100,1366,9,100,1,101,5,101,1369,8,101,10,101,
12,101,1372,9,101,1,101,1,101,1,101,3,101,1377,8,101,1,101,1,101,3,101,1381,
8,101,1,101,1,101,1,102,1,102,3,102,1387,8,102,1,102,1,102,1,103,1,103,1,
103,5,103,1394,8,103,10,103,12,103,1397,9,103,1,104,5,104,1400,8,104,10,
104,12,104,1403,9,104,1,104,1,104,1,104,1,104,3,104,1409,8,104,1,105,5,105,
1412,8,105,10,105,12,105,1415,9,105,1,105,1,105,5,105,1419,8,105,10,105,
12,105,1422,9,105,1,105,1,105,1,105,1,106,1,106,1,107,1,107,5,107,1431,8,
107,10,107,12,107,1434,9,107,1,107,1,107,1,108,1,108,3,108,1440,8,108,1,
109,5,109,1443,8,109,10,109,12,109,1446,9,109,1,109,1,109,1,109,1,110,1,
110,3,110,1453,8,110,1,111,5,111,1456,8,111,10,111,12,111,1459,9,111,1,111,
1,111,1,111,3,111,1464,8,111,1,111,3,111,1467,8,111,1,111,3,111,1470,8,111,
1,111,1,111,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,3,112,
1483,8,112,1,113,1,113,1,113,1,114,1,114,1,114,1,114,5,114,1492,8,114,10,
114,12,114,1495,9,114,1,115,1,115,5,115,1499,8,115,10,115,12,115,1502,9,
115,1,115,1,115,1,116,1,116,1,116,1,116,1,116,3,116,1511,8,116,1,117,5,117,
1514,8,117,10,117,12,117,1517,9,117,1,117,1,117,1,117,1,117,1,118,1,118,
1,118,1,118,3,118,1527,8,118,1,119,5,119,1530,8,119,10,119,12,119,1533,9,
119,1,119,1,119,1,119,1,120,1,120,1,120,1,120,1,120,1,120,1,120,3,120,1545,
8,120,1,121,5,121,1548,8,121,10,121,12,121,1551,9,121,1,121,1,121,1,121,
1,121,1,121,1,122,1,122,5,122,1560,8,122,10,122,12,122,1563,9,122,1,122,
1,122,1,123,1,123,1,123,1,123,1,123,3,123,1572,8,123,1,124,5,124,1575,8,
124,10,124,12,124,1578,9,124,1,124,1,124,1,124,1,124,1,124,3,124,1585,8,
124,1,124,3,124,1588,8,124,1,124,1,124,1,125,1,125,1,125,3,125,1595,8,125,
1,126,1,126,1,126,1,127,1,127,1,127,3,127,1603,8,127,1,128,1,128,1,128,1,
128,3,128,1609,8,128,1,128,1,128,1,129,1,129,1,129,5,129,1616,8,129,10,129,
12,129,1619,9,129,1,130,1,130,1,130,1,130,1,131,1,131,1,131,3,131,1628,8,
131,1,132,1,132,3,132,1632,8,132,1,132,3,132,1635,8,132,1,132,1,132,1,133,
1,133,1,133,5,133,1642,8,133,10,133,12,133,1645,9,133,1,134,1,134,1,134,
1,135,1,135,1,135,1,135,1,135,1,135,1,136,1,136,3,136,1658,8,136,1,136,3,
136,1661,8,136,1,136,1,136,1,137,1,137,1,137,5,137,1668,8,137,10,137,12,
137,1671,9,137,1,138,1,138,3,138,1675,8,138,1,138,1,138,1,139,1,139,5,139,
1681,8,139,10,139,12,139,1684,9,139,1,140,1,140,1,140,3,140,1689,8,140,1,
141,1,141,3,141,1693,8,141,1,142,5,142,1696,8,142,10,142,12,142,1699,9,142,
1,142,1,142,3,142,1703,8,142,1,143,1,143,3,143,1707,8,143,1,144,1,144,1,
144,1,145,1,145,1,145,1,145,1,145,1,145,3,145,1718,8,145,1,146,1,146,1,146,
1,146,1,146,3,146,1725,8,146,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,
147,1,147,1,147,1,147,1,147,1,147,3,147,1740,8,147,1,148,1,148,1,149,1,149,
1,149,1,149,1,150,1,150,1,150,1,150,1,151,1,151,1,151,1,152,1,152,1,152,
1,152,1,152,1,152,1,152,3,152,1762,8,152,1,153,1,153,1,153,1,153,1,153,1,
153,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,155,1,155,1,155,1,
155,1,155,1,155,1,155,1,155,1,156,1,156,1,156,1,156,3,156,1790,8,156,1,156,
1,156,1,157,1,157,1,157,1,157,1,157,1,157,1,158,1,158,1,158,5,158,1803,8,
158,10,158,12,158,1806,9,158,1,158,1,158,1,158,1,158,5,158,1812,8,158,10,
158,12,158,1815,9,158,1,158,1,158,1,158,5,158,1820,8,158,10,158,12,158,1823,
9,158,1,158,3,158,1826,8,158,1,159,1,159,1,159,1,159,1,159,1,159,1,159,3,
159,1835,8,159,1,160,1,160,1,160,1,160,1,160,5,160,1842,8,160,10,160,12,
160,1845,9,160,1,160,1,160,1,161,1,161,1,161,1,161,5,161,1853,8,161,10,161,
12,161,1856,9,161,1,161,3,161,1859,8,161,1,162,1,162,1,163,1,163,1,163,1,
163,1,163,1,163,1,164,1,164,1,164,1,164,1,164,1,164,1,165,1,165,1,165,1,
165,1,165,1,165,1,165,1,165,1,166,1,166,3,166,1885,8,166,1,167,1,167,3,167,
1889,8,167,1,168,1,168,1,168,3,168,1894,8,168,1,168,1,168,3,168,1898,8,168,
1,168,1,168,3,168,1902,8,168,1,168,1,168,1,168,1,169,1,169,1,169,3,169,1910,
8,169,1,169,1,169,3,169,1914,8,169,1,169,1,169,3,169,1918,8,169,1,169,1,
169,1,169,1,170,1,170,3,170,1925,8,170,1,171,1,171,1,172,1,172,1,172,5,172,
1932,8,172,10,172,12,172,1935,9,172,1,173,1,173,1,173,1,173,1,173,1,173,
1,173,1,173,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,175,1,175,
3,175,1955,8,175,1,175,1,175,1,176,1,176,3,176,1961,8,176,1,176,1,176,1,
177,1,177,3,177,1967,8,177,1,177,1,177,1,178,1,178,1,178,1,178,1,179,1,179,
1,179,1,179,1,179,1,179,1,180,1,180,1,180,1,180,1,180,1,180,1,180,1,180,
1,180,1,180,1,180,3,180,1992,8,180,1,180,1,180,1,180,3,180,1997,8,180,1,
181,1,181,5,181,2001,8,181,10,181,12,181,2004,9,181,1,182,1,182,1,182,1,
182,1,182,1,182,1,183,5,183,2013,8,183,10,183,12,183,2016,9,183,1,183,1,
183,1,183,1,184,1,184,1,184,5,184,2024,8,184,10,184,12,184,2027,9,184,1,
185,1,185,1,185,1,186,1,186,1,186,1,186,3,186,2036,8,186,1,186,3,186,2039,
8,186,1,187,1,187,1,187,3,187,2044,8,187,1,187,1,187,1,188,1,188,1,188,5,
188,2051,8,188,10,188,12,188,2054,9,188,1,189,1,189,3,189,2058,8,189,1,190,
1,190,3,190,2062,8,190,1,191,1,191,1,191,1,191,1,192,1,192,1,193,1,193,1,
194,1,194,3,194,2074,8,194,1,195,1,195,3,195,2078,8,195,1,196,1,196,3,196,
2082,8,196,1,196,1,196,3,196,2086,8,196,1,196,1,196,3,196,2090,8,196,1,196,
1,196,1,196,1,196,3,196,2096,8,196,1,196,1,196,1,196,1,196,3,196,2102,8,
196,1,196,1,196,3,196,2106,8,196,1,196,1,196,1,196,1,196,3,196,2112,8,196,
1,196,1,196,1,196,1,196,3,196,2118,8,196,1,196,1,196,1,196,1,196,3,196,2124,
8,196,1,196,1,196,1,196,1,196,3,196,2130,8,196,1,196,1,196,1,196,1,196,1,
196,1,196,3,196,2138,8,196,1,196,1,196,1,196,1,196,1,196,3,196,2145,8,196,
1,196,1,196,1,196,1,196,1,196,3,196,2152,8,196,1,196,1,196,1,196,3,196,2157,
8,196,1,196,1,196,3,196,2161,8,196,1,196,1,196,1,196,3,196,2166,8,196,1,
196,1,196,1,196,3,196,2171,8,196,1,196,1,196,3,196,2175,8,196,1,196,1,196,
1,196,3,196,2180,8,196,1,196,1,196,1,196,3,196,2185,8,196,1,196,1,196,3,
196,2189,8,196,1,196,1,196,1,196,3,196,2194,8,196,1,196,1,196,1,196,3,196,
2199,8,196,1,196,1,196,3,196,2203,8,196,1,196,1,196,1,196,3,196,2208,8,196,
1,196,1,196,1,196,3,196,2213,8,196,1,196,1,196,3,196,2217,8,196,1,196,1,
196,1,196,1,196,1,196,3,196,2224,8,196,1,196,1,196,1,196,3,196,2229,8,196,
1,196,1,196,3,196,2233,8,196,1,196,1,196,1,196,3,196,2238,8,196,1,196,1,
196,3,196,2242,8,196,1,196,1,196,1,196,3,196,2247,8,196,1,196,1,196,3,196,
2251,8,196,1,196,1,196,1,196,3,196,2256,8,196,1,196,1,196,3,196,2260,8,196,
1,196,1,196,1,196,3,196,2265,8,196,1,196,1,196,3,196,2269,8,196,1,196,1,
196,1,196,1,196,1,196,3,196,2276,8,196,1,196,1,196,3,196,2280,8,196,1,196,
1,196,1,196,3,196,2285,8,196,1,196,1,196,3,196,2289,8,196,1,196,1,196,1,
196,1,196,3,196,2295,8,196,3,196,2297,8,196,1,197,1,197,1,197,3,197,2302,
8,197,1,197,1,197,1,197,3,197,2307,8,197,1,197,1,197,1,197,1,197,3,197,2313,
8,197,1,197,1,197,3,197,2317,8,197,1,197,1,197,1,197,3,197,2322,8,197,1,
197,1,197,3,197,2326,8,197,1,197,1,197,3,197,2330,8,197,1,197,1,197,3,197,
2334,8,197,3,197,2336,8,197,1,198,1,198,1,198,5,198,2341,8,198,10,198,12,
198,2344,9,198,1,198,1,198,1,198,1,198,1,198,1,198,5,198,2352,8,198,10,198,
12,198,2355,9,198,1,198,1,198,1,198,1,198,1,198,1,198,5,198,2363,8,198,10,
198,12,198,2366,9,198,1,198,1,198,1,198,1,198,1,198,3,198,2373,8,198,1,199,
1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,3,199,2384,8,199,1,200,1,
200,3,200,2388,8,200,1,200,1,200,1,200,3,200,2393,8,200,1,200,1,200,3,200,
2397,8,200,1,201,5,201,2400,8,201,10,201,12,201,2403,9,201,1,201,1,201,1,
201,5,201,2408,8,201,10,201,12,201,2411,9,201,1,201,5,201,2414,8,201,10,
201,12,201,2417,9,201,1,201,3,201,2420,8,201,1,202,1,202,3,202,2424,8,202,
1,203,1,203,3,203,2428,8,203,1,204,1,204,1,204,1,204,3,204,2434,8,204,1,
204,1,204,1,204,1,204,3,204,2440,8,204,3,204,2442,8,204,1,205,1,205,1,205,
1,205,1,205,1,205,1,205,1,205,1,205,1,205,3,205,2454,8,205,1,206,1,206,5,
206,2458,8,206,10,206,12,206,2461,9,206,1,207,5,207,2464,8,207,10,207,12,
207,2467,9,207,1,207,1,207,1,207,1,207,1,208,1,208,1,208,1,208,1,208,1,208,
1,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,3,208,2488,8,208,1,
209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,
209,3,209,2503,8,209,1,210,1,210,1,210,3,210,2508,8,210,1,210,1,210,1,210,
1,210,1,210,3,210,2515,8,210,1,210,1,210,1,210,3,210,2520,8,210,1,210,1,
210,1,210,1,210,1,210,3,210,2527,8,210,1,210,1,210,1,210,3,210,2532,8,210,
1,210,1,210,1,210,1,210,1,210,3,210,2539,8,210,1,210,1,210,1,210,3,210,2544,
8,210,1,210,1,210,1,210,1,210,1,210,3,210,2551,8,210,1,210,1,210,1,210,3,
210,2556,8,210,1,210,1,210,1,210,1,210,1,210,1,210,3,210,2564,8,210,1,210,
1,210,1,210,3,210,2569,8,210,1,210,1,210,3,210,2573,8,210,1,211,1,211,1,
211,5,211,2578,8,211,10,211,12,211,2581,9,211,1,212,1,212,1,212,3,212,2586,
8,212,1,212,1,212,1,212,1,212,1,212,3,212,2593,8,212,1,212,1,212,1,212,1,
212,1,212,3,212,2600,8,212,1,212,1,212,1,212,1,212,1,212,3,212,2607,8,212,
1,212,1,212,1,212,1,212,1,212,1,212,3,212,2615,8,212,1,212,1,212,1,212,1,
212,1,212,3,212,2622,8,212,1,212,1,212,1,212,1,212,1,212,1,212,3,212,2630,
8,212,1,213,1,213,3,213,2634,8,213,1,213,1,213,3,213,2638,8,213,3,213,2640,
8,213,1,214,1,214,3,214,2644,8,214,1,214,1,214,3,214,2648,8,214,3,214,2650,
8,214,1,215,1,215,1,215,1,216,1,216,1,216,1,217,1,217,1,217,1,217,1,217,
1,217,1,217,3,217,2665,8,217,1,218,1,218,1,218,1,219,1,219,1,219,1,220,1,
220,1,220,1,220,1,220,1,220,1,220,3,220,2680,8,220,1,221,1,221,1,221,1,221,
1,221,1,221,1,221,1,221,5,221,2690,8,221,10,221,12,221,2693,9,221,1,221,
1,221,1,221,1,221,1,221,1,221,5,221,2701,8,221,10,221,12,221,2704,9,221,
1,221,1,221,1,221,3,221,2709,8,221,1,222,1,222,1,222,1,222,1,222,1,222,1,
222,1,222,1,222,1,222,1,222,1,222,5,222,2723,8,222,10,222,12,222,2726,9,
222,1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,5,223,2737,8,223,
10,223,12,223,2740,9,223,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,
1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,5,224,2758,8,224,10,224,
12,224,2761,9,224,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,
1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,3,225,2782,8,
225,5,225,2784,8,225,10,225,12,225,2787,9,225,1,226,1,226,1,226,1,226,1,
226,1,226,1,226,1,226,1,226,5,226,2798,8,226,10,226,12,226,2801,9,226,1,
227,1,227,1,227,1,227,1,227,1,227,5,227,2809,8,227,10,227,12,227,2812,9,
227,1,228,1,228,1,228,1,228,1,228,1,228,5,228,2820,8,228,10,228,12,228,2823,
9,228,1,229,1,229,1,229,1,229,1,229,1,229,5,229,2831,8,229,10,229,12,229,
2834,9,229,1,230,1,230,1,230,1,230,1,230,1,230,5,230,2842,8,230,10,230,12,
230,2845,9,230,1,231,1,231,1,231,1,231,1,231,1,231,5,231,2853,8,231,10,231,
12,231,2856,9,231,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,
1,232,1,232,1,232,1,232,3,232,2871,8,232,1,233,1,233,3,233,2875,8,233,1,
234,1,234,1,234,1,234,1,235,1,235,1,235,3,235,2884,8,235,1,236,1,236,1,237,
1,237,1,237,1,237,1,238,1,238,3,238,2894,8,238,1,238,1,238,3,238,2898,8,
238,1,239,1,239,1,239,5,239,2903,8,239,10,239,12,239,2906,9,239,1,239,1,
239,1,239,5,239,2911,8,239,10,239,12,239,2914,9,239,3,239,2916,8,239,1,240,
5,240,2919,8,240,10,240,12,240,2922,9,240,1,240,1,240,1,240,1,240,3,240,
2928,8,240,1,241,1,241,3,241,2932,8,241,1,242,1,242,3,242,2936,8,242,1,243,
1,243,1,243,1,243,1,243,1,243,1,244,1,244,1,244,0,10,444,446,448,450,452,
454,456,458,460,462,245,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,
84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,
160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,
196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,
232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,
268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,
304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,
340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,
376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,
412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,444,446,
448,450,452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,482,
484,486,488,0,6,1,0,69,75,5,0,22,22,25,25,44,44,46,46,54,54,2,0,31,31,37,
37,2,0,13,13,55,55,2,0,57,57,60,60,2,0,88,88,112,122,3206,0,490,1,0,0,0,
2,493,1,0,0,0,4,495,1,0,0,0,6,497,1,0,0,0,8,502,1,0,0,0,10,511,1,0,0,0,12,
513,1,0,0,0,14,515,1,0,0,0,16,520,1,0,0,0,18,522,1,0,0,0,20,539,1,0,0,0,
22,588,1,0,0,0,24,590,1,0,0,0,26,595,1,0,0,0,28,609,1,0,0,0,30,614,1,0,0,
0,32,635,1,0,0,0,34,642,1,0,0,0,36,644,1,0,0,0,38,655,1,0,0,0,40,658,1,0,
0,0,42,662,1,0,0,0,44,672,1,0,0,0,46,677,1,0,0,0,48,688,1,0,0,0,50,690,1,
0,0,0,52,695,1,0,0,0,54,700,1,0,0,0,56,705,1,0,0,0,58,713,1,0,0,0,60,717,
1,0,0,0,62,719,1,0,0,0,64,726,1,0,0,0,66,729,1,0,0,0,68,746,1,0,0,0,70,754,
1,0,0,0,72,768,1,0,0,0,74,774,1,0,0,0,76,776,1,0,0,0,78,780,1,0,0,0,80,786,
1,0,0,0,82,793,1,0,0,0,84,803,1,0,0,0,86,808,1,0,0,0,88,889,1,0,0,0,90,891,
1,0,0,0,92,896,1,0,0,0,94,901,1,0,0,0,96,930,1,0,0,0,98,932,1,0,0,0,100,
936,1,0,0,0,102,944,1,0,0,0,104,947,1,0,0,0,106,950,1,0,0,0,108,958,1,0,
0,0,110,967,1,0,0,0,112,980,1,0,0,0,114,987,1,0,0,0,116,992,1,0,0,0,118,
1007,1,0,0,0,120,1009,1,0,0,0,122,1017,1,0,0,0,124,1022,1,0,0,0,126,1028,
1,0,0,0,128,1032,1,0,0,0,130,1036,1,0,0,0,132,1041,1,0,0,0,134,1051,1,0,
0,0,136,1060,1,0,0,0,138,1093,1,0,0,0,140,1095,1,0,0,0,142,1097,1,0,0,0,
144,1102,1,0,0,0,146,1109,1,0,0,0,148,1125,1,0,0,0,150,1134,1,0,0,0,152,
1143,1,0,0,0,154,1145,1,0,0,0,156,1162,1,0,0,0,158,1172,1,0,0,0,160,1190,
1,0,0,0,162,1195,1,0,0,0,164,1210,1,0,0,0,166,1212,1,0,0,0,168,1215,1,0,
0,0,170,1225,1,0,0,0,172,1229,1,0,0,0,174,1231,1,0,0,0,176,1233,1,0,0,0,
178,1239,1,0,0,0,180,1252,1,0,0,0,182,1255,1,0,0,0,184,1269,1,0,0,0,186,
1271,1,0,0,0,188,1306,1,0,0,0,190,1311,1,0,0,0,192,1321,1,0,0,0,194,1333,
1,0,0,0,196,1344,1,0,0,0,198,1358,1,0,0,0,200,1360,1,0,0,0,202,1370,1,0,
0,0,204,1384,1,0,0,0,206,1390,1,0,0,0,208,1408,1,0,0,0,210,1413,1,0,0,0,
212,1426,1,0,0,0,214,1428,1,0,0,0,216,1439,1,0,0,0,218,1444,1,0,0,0,220,
1452,1,0,0,0,222,1457,1,0,0,0,224,1482,1,0,0,0,226,1484,1,0,0,0,228,1487,
1,0,0,0,230,1496,1,0,0,0,232,1510,1,0,0,0,234,1515,1,0,0,0,236,1526,1,0,
0,0,238,1531,1,0,0,0,240,1544,1,0,0,0,242,1549,1,0,0,0,244,1557,1,0,0,0,
246,1571,1,0,0,0,248,1576,1,0,0,0,250,1594,1,0,0,0,252,1596,1,0,0,0,254,
1602,1,0,0,0,256,1604,1,0,0,0,258,1612,1,0,0,0,260,1620,1,0,0,0,262,1627,
1,0,0,0,264,1629,1,0,0,0,266,1638,1,0,0,0,268,1646,1,0,0,0,270,1649,1,0,
0,0,272,1655,1,0,0,0,274,1664,1,0,0,0,276,1672,1,0,0,0,278,1678,1,0,0,0,
280,1688,1,0,0,0,282,1692,1,0,0,0,284,1697,1,0,0,0,286,1706,1,0,0,0,288,
1708,1,0,0,0,290,1717,1,0,0,0,292,1724,1,0,0,0,294,1739,1,0,0,0,296,1741,
1,0,0,0,298,1743,1,0,0,0,300,1747,1,0,0,0,302,1751,1,0,0,0,304,1761,1,0,
0,0,306,1763,1,0,0,0,308,1769,1,0,0,0,310,1777,1,0,0,0,312,1785,1,0,0,0,
314,1793,1,0,0,0,316,1825,1,0,0,0,318,1827,1,0,0,0,320,1836,1,0,0,0,322,
1858,1,0,0,0,324,1860,1,0,0,0,326,1862,1,0,0,0,328,1868,1,0,0,0,330,1874,
1,0,0,0,332,1884,1,0,0,0,334,1888,1,0,0,0,336,1890,1,0,0,0,338,1906,1,0,
0,0,340,1924,1,0,0,0,342,1926,1,0,0,0,344,1928,1,0,0,0,346,1936,1,0,0,0,
348,1944,1,0,0,0,350,1952,1,0,0,0,352,1958,1,0,0,0,354,1964,1,0,0,0,356,
1970,1,0,0,0,358,1974,1,0,0,0,360,1996,1,0,0,0,362,1998,1,0,0,0,364,2005,
1,0,0,0,366,2014,1,0,0,0,368,2020,1,0,0,0,370,2028,1,0,0,0,372,2031,1,0,
0,0,374,2040,1,0,0,0,376,2047,1,0,0,0,378,2057,1,0,0,0,380,2061,1,0,0,0,
382,2063,1,0,0,0,384,2067,1,0,0,0,386,2069,1,0,0,0,388,2073,1,0,0,0,390,
2077,1,0,0,0,392,2296,1,0,0,0,394,2335,1,0,0,0,396,2372,1,0,0,0,398,2383,
1,0,0,0,400,2385,1,0,0,0,402,2401,1,0,0,0,404,2423,1,0,0,0,406,2427,1,0,
0,0,408,2441,1,0,0,0,410,2453,1,0,0,0,412,2455,1,0,0,0,414,2465,1,0,0,0,
416,2487,1,0,0,0,418,2502,1,0,0,0,420,2572,1,0,0,0,422,2574,1,0,0,0,424,
2629,1,0,0,0,426,2639,1,0,0,0,428,2649,1,0,0,0,430,2651,1,0,0,0,432,2654,
1,0,0,0,434,2664,1,0,0,0,436,2666,1,0,0,0,438,2669,1,0,0,0,440,2679,1,0,
0,0,442,2708,1,0,0,0,444,2710,1,0,0,0,446,2727,1,0,0,0,448,2741,1,0,0,0,
450,2762,1,0,0,0,452,2788,1,0,0,0,454,2802,1,0,0,0,456,2813,1,0,0,0,458,
2824,1,0,0,0,460,2835,1,0,0,0,462,2846,1,0,0,0,464,2870,1,0,0,0,466,2874,
1,0,0,0,468,2876,1,0,0,0,470,2883,1,0,0,0,472,2885,1,0,0,0,474,2887,1,0,
0,0,476,2897,1,0,0,0,478,2915,1,0,0,0,480,2927,1,0,0,0,482,2931,1,0,0,0,
484,2935,1,0,0,0,486,2937,1,0,0,0,488,2943,1,0,0,0,490,491,3,64,32,0,491,
492,5,0,0,1,492,1,1,0,0,0,493,494,7,0,0,0,494,3,1,0,0,0,495,496,5,123,0,
0,496,5,1,0,0,0,497,498,5,123,0,0,498,7,1,0,0,0,499,501,3,254,127,0,500,
499,1,0,0,0,501,504,1,0,0,0,502,500,1,0,0,0,502,503,1,0,0,0,503,507,1,0,
0,0,504,502,1,0,0,0,505,508,3,10,5,0,506,508,5,20,0,0,507,505,1,0,0,0,507,
506,1,0,0,0,508,9,1,0,0,0,509,512,3,12,6,0,510,512,3,14,7,0,511,509,1,0,
0,0,511,510,1,0,0,0,512,11,1,0,0,0,513,514,7,1,0,0,514,13,1,0,0,0,515,516,
7,2,0,0,516,15,1,0,0,0,517,521,3,20,10,0,518,521,3,26,13,0,519,521,3,28,
14,0,520,517,1,0,0,0,520,518,1,0,0,0,520,519,1,0,0,0,521,17,1,0,0,0,522,
526,5,84,0,0,523,525,3,254,127,0,524,523,1,0,0,0,525,528,1,0,0,0,526,524,
1,0,0,0,526,527,1,0,0,0,527,529,1,0,0,0,528,526,1,0,0,0,529,531,3,4,2,0,
530,532,3,40,20,0,531,530,1,0,0,0,531,532,1,0,0,0,532,534,1,0,0,0,533,535,
3,18,9,0,534,533,1,0,0,0,534,535,1,0,0,0,535,19,1,0,0,0,536,537,3,52,26,
0,537,538,5,84,0,0,538,540,1,0,0,0,539,536,1,0,0,0,539,540,1,0,0,0,540,544,
1,0,0,0,541,543,3,254,127,0,542,541,1,0,0,0,543,546,1,0,0,0,544,542,1,0,
0,0,544,545,1,0,0,0,545,547,1,0,0,0,546,544,1,0,0,0,547,549,3,4,2,0,548,
550,3,40,20,0,549,548,1,0,0,0,549,550,1,0,0,0,550,552,1,0,0,0,551,553,3,
18,9,0,552,551,1,0,0,0,552,553,1,0,0,0,553,21,1,0,0,0,554,556,3,254,127,
0,555,554,1,0,0,0,556,559,1,0,0,0,557,555,1,0,0,0,557,558,1,0,0,0,558,560,
1,0,0,0,559,557,1,0,0,0,560,562,3,4,2,0,561,563,3,40,20,0,562,561,1,0,0,
0,562,563,1,0,0,0,563,589,1,0,0,0,564,565,3,52,26,0,565,569,5,84,0,0,566,
568,3,254,127,0,567,566,1,0,0,0,568,571,1,0,0,0,569,567,1,0,0,0,569,570,
1,0,0,0,570,572,1,0,0,0,571,569,1,0,0,0,572,574,3,4,2,0,573,575,3,40,20,
0,574,573,1,0,0,0,574,575,1,0,0,0,575,589,1,0,0,0,576,577,3,20,10,0,577,
581,5,84,0,0,578,580,3,254,127,0,579,578,1,0,0,0,580,583,1,0,0,0,581,579,
1,0,0,0,581,582,1,0,0,0,582,584,1,0,0,0,583,581,1,0,0,0,584,586,3,4,2,0,
585,587,3,40,20,0,586,585,1,0,0,0,586,587,1,0,0,0,587,589,1,0,0,0,588,557,
1,0,0,0,588,564,1,0,0,0,588,576,1,0,0,0,589,23,1,0,0,0,590,591,3,22,11,0,
591,25,1,0,0,0,592,594,3,254,127,0,593,592,1,0,0,0,594,597,1,0,0,0,595,593,
1,0,0,0,595,596,1,0,0,0,596,598,1,0,0,0,597,595,1,0,0,0,598,599,3,4,2,0,
599,27,1,0,0,0,600,601,3,8,4,0,601,602,3,30,15,0,602,610,1,0,0,0,603,604,
3,22,11,0,604,605,3,30,15,0,605,610,1,0,0,0,606,607,3,26,13,0,607,608,3,
30,15,0,608,610,1,0,0,0,609,600,1,0,0,0,609,603,1,0,0,0,609,606,1,0,0,0,
610,29,1,0,0,0,611,613,3,254,127,0,612,611,1,0,0,0,613,616,1,0,0,0,614,612,
1,0,0,0,614,615,1,0,0,0,615,617,1,0,0,0,616,614,1,0,0,0,617,618,5,80,0,0,
618,629,5,81,0,0,619,621,3,254,127,0,620,619,1,0,0,0,621,624,1,0,0,0,622,
620,1,0,0,0,622,623,1,0,0,0,623,625,1,0,0,0,624,622,1,0,0,0,625,626,5,80,
0,0,626,628,5,81,0,0,627,622,1,0,0,0,628,631,1,0,0,0,629,627,1,0,0,0,629,
630,1,0,0,0,630,31,1,0,0,0,631,629,1,0,0,0,632,634,3,34,17,0,633,632,1,0,
0,0,634,637,1,0,0,0,635,633,1,0,0,0,635,636,1,0,0,0,636,638,1,0,0,0,637,
635,1,0,0,0,638,640,3,4,2,0,639,641,3,36,18,0,640,639,1,0,0,0,640,641,1,
0,0,0,641,33,1,0,0,0,642,643,3,254,127,0,643,35,1,0,0,0,644,653,5,34,0,0,
645,654,3,26,13,0,646,650,3,20,10,0,647,649,3,38,19,0,648,647,1,0,0,0,649,
652,1,0,0,0,650,648,1,0,0,0,650,651,1,0,0,0,651,654,1,0,0,0,652,650,1,0,
0,0,653,645,1,0,0,0,653,646,1,0,0,0,654,37,1,0,0,0,655,656,5,108,0,0,656,
657,3,24,12,0,657,39,1,0,0,0,658,659,5,90,0,0,659,660,3,42,21,0,660,661,
5,89,0,0,661,41,1,0,0,0,662,667,3,44,22,0,663,664,5,83,0,0,664,666,3,44,
22,0,665,663,1,0,0,0,666,669,1,0,0,0,667,665,1,0,0,0,667,668,1,0,0,0,668,
43,1,0,0,0,669,667,1,0,0,0,670,673,3,16,8,0,671,673,3,46,23,0,672,670,1,
0,0,0,672,671,1,0,0,0,673,45,1,0,0,0,674,676,3,254,127,0,675,674,1,0,0,0,
676,679,1,0,0,0,677,675,1,0,0,0,677,678,1,0,0,0,678,680,1,0,0,0,679,677,
1,0,0,0,680,682,5,93,0,0,681,683,3,48,24,0,682,681,1,0,0,0,682,683,1,0,0,
0,683,47,1,0,0,0,684,685,5,34,0,0,685,689,3,16,8,0,686,687,5,57,0,0,687,
689,3,16,8,0,688,684,1,0,0,0,688,686,1,0,0,0,689,49,1,0,0,0,690,693,5,123,
0,0,691,692,5,84,0,0,692,694,3,50,25,0,693,691,1,0,0,0,693,694,1,0,0,0,694,
51,1,0,0,0,695,698,5,123,0,0,696,697,5,84,0,0,697,699,3,52,26,0,698,696,
1,0,0,0,698,699,1,0,0,0,699,53,1,0,0,0,700,703,3,52,26,0,701,702,5,84,0,
0,702,704,3,4,2,0,703,701,1,0,0,0,703,704,1,0,0,0,704,55,1,0,0,0,705,708,
5,123,0,0,706,707,5,84,0,0,707,709,3,56,28,0,708,706,1,0,0,0,708,709,1,0,
0,0,709,57,1,0,0,0,710,711,3,62,31,0,711,712,5,84,0,0,712,714,1,0,0,0,713,
710,1,0,0,0,713,714,1,0,0,0,714,715,1,0,0,0,715,716,5,123,0,0,716,59,1,0,
0,0,717,718,3,6,3,0,718,61,1,0,0,0,719,722,5,123,0,0,720,721,5,84,0,0,721,
723,3,62,31,0,722,720,1,0,0,0,722,723,1,0,0,0,723,63,1,0,0,0,724,727,3,66,
33,0,725,727,3,68,34,0,726,724,1,0,0,0,726,725,1,0,0,0,727,65,1,0,0,0,728,
730,3,70,35,0,729,728,1,0,0,0,729,730,1,0,0,0,730,734,1,0,0,0,731,733,3,
74,37,0,732,731,1,0,0,0,733,736,1,0,0,0,734,732,1,0,0,0,734,735,1,0,0,0,
735,740,1,0,0,0,736,734,1,0,0,0,737,739,3,84,42,0,738,737,1,0,0,0,739,742,
1,0,0,0,740,738,1,0,0,0,740,741,1,0,0,0,741,67,1,0,0,0,742,740,1,0,0,0,743,
745,3,74,37,0,744,743,1,0,0,0,745,748,1,0,0,0,746,744,1,0,0,0,746,747,1,
0,0,0,747,749,1,0,0,0,748,746,1,0,0,0,749,750,3,86,43,0,750,69,1,0,0,0,751,
753,3,72,36,0,752,751,1,0,0,0,753,756,1,0,0,0,754,752,1,0,0,0,754,755,1,
0,0,0,755,757,1,0,0,0,756,754,1,0,0,0,757,758,5,49,0,0,758,763,5,123,0,0,
759,760,5,84,0,0,760,762,5,123,0,0,761,759,1,0,0,0,762,765,1,0,0,0,763,761,
1,0,0,0,763,764,1,0,0,0,764,766,1,0,0,0,765,763,1,0,0,0,766,767,5,82,0,0,
767,71,1,0,0,0,768,769,3,254,127,0,769,73,1,0,0,0,770,775,3,76,38,0,771,
775,3,78,39,0,772,775,3,80,40,0,773,775,3,82,41,0,774,770,1,0,0,0,774,771,
1,0,0,0,774,772,1,0,0,0,774,773,1,0,0,0,775,75,1,0,0,0,776,777,5,42,0,0,
777,778,3,54,27,0,778,779,5,82,0,0,779,77,1,0,0,0,780,781,5,42,0,0,781,782,
3,56,28,0,782,783,5,84,0,0,783,784,5,106,0,0,784,785,5,82,0,0,785,79,1,0,
0,0,786,787,5,42,0,0,787,788,5,55,0,0,788,789,3,54,27,0,789,790,5,84,0,0,
790,791,5,123,0,0,791,792,5,82,0,0,792,81,1,0,0,0,793,794,5,42,0,0,794,795,
5,55,0,0,795,796,3,54,27,0,796,797,5,84,0,0,797,798,5,106,0,0,798,799,5,
82,0,0,799,83,1,0,0,0,800,804,3,92,46,0,801,804,3,220,110,0,802,804,5,82,
0,0,803,800,1,0,0,0,803,801,1,0,0,0,803,802,1,0,0,0,804,85,1,0,0,0,805,807,
3,254,127,0,806,805,1,0,0,0,807,810,1,0,0,0,808,806,1,0,0,0,808,809,1,0,
0,0,809,812,1,0,0,0,810,808,1,0,0,0,811,813,5,5,0,0,812,811,1,0,0,0,812,
813,1,0,0,0,813,814,1,0,0,0,814,815,5,2,0,0,815,820,5,123,0,0,816,817,5,
84,0,0,817,819,5,123,0,0,818,816,1,0,0,0,819,822,1,0,0,0,820,818,1,0,0,0,
820,821,1,0,0,0,821,823,1,0,0,0,822,820,1,0,0,0,823,827,5,78,0,0,824,826,
3,88,44,0,825,824,1,0,0,0,826,829,1,0,0,0,827,825,1,0,0,0,827,828,1,0,0,
0,828,830,1,0,0,0,829,827,1,0,0,0,830,831,5,79,0,0,831,87,1,0,0,0,832,836,
5,10,0,0,833,835,3,90,45,0,834,833,1,0,0,0,835,838,1,0,0,0,836,834,1,0,0,
0,836,837,1,0,0,0,837,839,1,0,0,0,838,836,1,0,0,0,839,840,3,50,25,0,840,
841,5,82,0,0,841,890,1,0,0,0,842,843,5,1,0,0,843,853,3,52,26,0,844,845,5,
12,0,0,845,850,3,50,25,0,846,847,5,83,0,0,847,849,3,50,25,0,848,846,1,0,
0,0,849,852,1,0,0,0,850,848,1,0,0,0,850,851,1,0,0,0,851,854,1,0,0,0,852,
850,1,0,0,0,853,844,1,0,0,0,853,854,1,0,0,0,854,855,1,0,0,0,855,856,5,82,
0,0,856,890,1,0,0,0,857,858,5,6,0,0,858,868,3,52,26,0,859,860,5,12,0,0,860,
865,3,50,25,0,861,862,5,83,0,0,862,864,3,50,25,0,863,861,1,0,0,0,864,867,
1,0,0,0,865,863,1,0,0,0,865,866,1,0,0,0,866,869,1,0,0,0,867,865,1,0,0,0,
868,859,1,0,0,0,868,869,1,0,0,0,869,870,1,0,0,0,870,871,5,82,0,0,871,890,
1,0,0,0,872,873,5,14,0,0,873,874,3,54,27,0,874,875,5,82,0,0,875,890,1,0,
0,0,876,877,5,8,0,0,877,878,3,54,27,0,878,879,5,16,0,0,879,884,3,54,27,0,
880,881,5,83,0,0,881,883,3,54,27,0,882,880,1,0,0,0,883,886,1,0,0,0,884,882,
1,0,0,0,884,885,1,0,0,0,885,887,1,0,0,0,886,884,1,0,0,0,887,888,5,82,0,0,
888,890,1,0,0,0,889,832,1,0,0,0,889,842,1,0,0,0,889,857,1,0,0,0,889,872,
1,0,0,0,889,876,1,0,0,0,890,89,1,0,0,0,891,892,7,3,0,0,892,91,1,0,0,0,893,
897,3,94,47,0,894,897,3,190,95,0,895,897,3,202,101,0,896,893,1,0,0,0,896,
894,1,0,0,0,896,895,1,0,0,0,897,93,1,0,0,0,898,900,3,96,48,0,899,898,1,0,
0,0,900,903,1,0,0,0,901,899,1,0,0,0,901,902,1,0,0,0,902,904,1,0,0,0,903,
901,1,0,0,0,904,905,5,26,0,0,905,907,3,4,2,0,906,908,3,98,49,0,907,906,1,
0,0,0,907,908,1,0,0,0,908,910,1,0,0,0,909,911,3,102,51,0,910,909,1,0,0,0,
910,911,1,0,0,0,911,913,1,0,0,0,912,914,3,104,52,0,913,912,1,0,0,0,913,914,
1,0,0,0,914,916,1,0,0,0,915,917,3,108,54,0,916,915,1,0,0,0,916,917,1,0,0,
0,917,918,1,0,0,0,918,919,3,110,55,0,919,95,1,0,0,0,920,931,3,254,127,0,
921,931,5,52,0,0,922,931,5,51,0,0,923,931,5,50,0,0,924,931,5,18,0,0,925,
931,5,55,0,0,926,931,5,35,0,0,927,931,5,11,0,0,928,931,5,3,0,0,929,931,5,
56,0,0,930,920,1,0,0,0,930,921,1,0,0,0,930,922,1,0,0,0,930,923,1,0,0,0,930,
924,1,0,0,0,930,925,1,0,0,0,930,926,1,0,0,0,930,927,1,0,0,0,930,928,1,0,
0,0,930,929,1,0,0,0,931,97,1,0,0,0,932,933,5,90,0,0,933,934,3,100,50,0,934,
935,5,89,0,0,935,99,1,0,0,0,936,941,3,32,16,0,937,938,5,83,0,0,938,940,3,
32,16,0,939,937,1,0,0,0,940,943,1,0,0,0,941,939,1,0,0,0,941,942,1,0,0,0,
942,101,1,0,0,0,943,941,1,0,0,0,944,945,5,34,0,0,945,946,3,22,11,0,946,103,
1,0,0,0,947,948,5,41,0,0,948,949,3,106,53,0,949,105,1,0,0,0,950,955,3,24,
12,0,951,952,5,83,0,0,952,954,3,24,12,0,953,951,1,0,0,0,954,957,1,0,0,0,
955,953,1,0,0,0,955,956,1,0,0,0,956,107,1,0,0,0,957,955,1,0,0,0,958,959,
5,7,0,0,959,964,3,54,27,0,960,961,5,83,0,0,961,963,3,54,27,0,962,960,1,0,
0,0,963,966,1,0,0,0,964,962,1,0,0,0,964,965,1,0,0,0,965,109,1,0,0,0,966,
964,1,0,0,0,967,971,5,78,0,0,968,970,3,112,56,0,969,968,1,0,0,0,970,973,
1,0,0,0,971,969,1,0,0,0,971,972,1,0,0,0,972,974,1,0,0,0,973,971,1,0,0,0,
974,975,5,79,0,0,975,111,1,0,0,0,976,981,3,114,57,0,977,981,3,174,87,0,978,
981,3,176,88,0,979,981,3,178,89,0,980,976,1,0,0,0,980,977,1,0,0,0,980,978,
1,0,0,0,980,979,1,0,0,0,981,113,1,0,0,0,982,988,3,116,58,0,983,988,3,146,
73,0,984,988,3,92,46,0,985,988,3,220,110,0,986,988,5,82,0,0,987,982,1,0,
0,0,987,983,1,0,0,0,987,984,1,0,0,0,987,985,1,0,0,0,987,986,1,0,0,0,988,
115,1,0,0,0,989,991,3,118,59,0,990,989,1,0,0,0,991,994,1,0,0,0,992,990,1,
0,0,0,992,993,1,0,0,0,993,995,1,0,0,0,994,992,1,0,0,0,995,996,3,128,64,0,
996,997,3,120,60,0,997,998,5,82,0,0,998,117,1,0,0,0,999,1008,3,254,127,0,
1000,1008,5,52,0,0,1001,1008,5,51,0,0,1002,1008,5,50,0,0,1003,1008,5,55,
0,0,1004,1008,5,35,0,0,1005,1008,5,63,0,0,1006,1008,5,66,0,0,1007,999,1,
0,0,0,1007,1000,1,0,0,0,1007,1001,1,0,0,0,1007,1002,1,0,0,0,1007,1003,1,
0,0,0,1007,1004,1,0,0,0,1007,1005,1,0,0,0,1007,1006,1,0,0,0,1008,119,1,0,
0,0,1009,1014,3,122,61,0,1010,1011,5,83,0,0,1011,1013,3,122,61,0,1012,1010,
1,0,0,0,1013,1016,1,0,0,0,1014,1012,1,0,0,0,1014,1015,1,0,0,0,1015,121,1,
0,0,0,1016,1014,1,0,0,0,1017,1020,3,124,62,0,1018,1019,5,88,0,0,1019,1021,
3,126,63,0,1020,1018,1,0,0,0,1020,1021,1,0,0,0,1021,123,1,0,0,0,1022,1024,
5,123,0,0,1023,1025,3,30,15,0,1024,1023,1,0,0,0,1024,1025,1,0,0,0,1025,125,
1,0,0,0,1026,1029,3,388,194,0,1027,1029,3,272,136,0,1028,1026,1,0,0,0,1028,
1027,1,0,0,0,1029,127,1,0,0,0,1030,1033,3,130,65,0,1031,1033,3,132,66,0,
1032,1030,1,0,0,0,1032,1031,1,0,0,0,1033,129,1,0,0,0,1034,1037,3,10,5,0,
1035,1037,5,20,0,0,1036,1034,1,0,0,0,1036,1035,1,0,0,0,1037,131,1,0,0,0,
1038,1042,3,134,67,0,1039,1042,3,142,71,0,1040,1042,3,144,72,0,1041,1038,
1,0,0,0,1041,1039,1,0,0,0,1041,1040,1,0,0,0,1042,133,1,0,0,0,1043,1044,3,
52,26,0,1044,1048,5,84,0,0,1045,1047,3,254,127,0,1046,1045,1,0,0,0,1047,
1050,1,0,0,0,1048,1046,1,0,0,0,1048,1049,1,0,0,0,1049,1052,1,0,0,0,1050,
1048,1,0,0,0,1051,1043,1,0,0,0,1051,1052,1,0,0,0,1052,1053,1,0,0,0,1053,
1055,3,4,2,0,1054,1056,3,40,20,0,1055,1054,1,0,0,0,1055,1056,1,0,0,0,1056,
1058,1,0,0,0,1057,1059,3,136,68,0,1058,1057,1,0,0,0,1058,1059,1,0,0,0,1059,
135,1,0,0,0,1060,1064,5,84,0,0,1061,1063,3,254,127,0,1062,1061,1,0,0,0,1063,
1066,1,0,0,0,1064,1062,1,0,0,0,1064,1065,1,0,0,0,1065,1067,1,0,0,0,1066,
1064,1,0,0,0,1067,1069,3,4,2,0,1068,1070,3,40,20,0,1069,1068,1,0,0,0,1069,
1070,1,0,0,0,1070,1072,1,0,0,0,1071,1073,3,136,68,0,1072,1071,1,0,0,0,1072,
1073,1,0,0,0,1073,137,1,0,0,0,1074,1076,3,4,2,0,1075,1077,3,40,20,0,1076,
1075,1,0,0,0,1076,1077,1,0,0,0,1077,1094,1,0,0,0,1078,1081,3,52,26,0,1079,
1081,3,134,67,0,1080,1078,1,0,0,0,1080,1079,1,0,0,0,1081,1082,1,0,0,0,1082,
1086,5,84,0,0,1083,1085,3,254,127,0,1084,1083,1,0,0,0,1085,1088,1,0,0,0,
1086,1084,1,0,0,0,1086,1087,1,0,0,0,1087,1089,1,0,0,0,1088,1086,1,0,0,0,
1089,1091,3,4,2,0,1090,1092,3,40,20,0,1091,1090,1,0,0,0,1091,1092,1,0,0,
0,1092,1094,1,0,0,0,1093,1074,1,0,0,0,1093,1080,1,0,0,0,1094,139,1,0,0,0,
1095,1096,3,138,69,0,1096,141,1,0,0,0,1097,1098,3,4,2,0,1098,143,1,0,0,0,
1099,1103,3,130,65,0,1100,1103,3,134,67,0,1101,1103,3,142,71,0,1102,1099,
1,0,0,0,1102,1100,1,0,0,0,1102,1101,1,0,0,0,1103,1104,1,0,0,0,1104,1105,
3,30,15,0,1105,145,1,0,0,0,1106,1108,3,148,74,0,1107,1106,1,0,0,0,1108,1111,
1,0,0,0,1109,1107,1,0,0,0,1109,1110,1,0,0,0,1110,1112,1,0,0,0,1111,1109,
1,0,0,0,1112,1113,3,150,75,0,1113,1114,3,172,86,0,1114,147,1,0,0,0,1115,
1126,3,254,127,0,1116,1126,5,52,0,0,1117,1126,5,51,0,0,1118,1126,5,50,0,
0,1119,1126,5,18,0,0,1120,1126,5,55,0,0,1121,1126,5,35,0,0,1122,1126,5,59,
0,0,1123,1126,5,47,0,0,1124,1126,5,56,0,0,1125,1115,1,0,0,0,1125,1116,1,
0,0,0,1125,1117,1,0,0,0,1125,1118,1,0,0,0,1125,1119,1,0,0,0,1125,1120,1,
0,0,0,1125,1121,1,0,0,0,1125,1122,1,0,0,0,1125,1123,1,0,0,0,1125,1124,1,
0,0,0,1126,149,1,0,0,0,1127,1131,3,98,49,0,1128,1130,3,254,127,0,1129,1128,
1,0,0,0,1130,1133,1,0,0,0,1131,1129,1,0,0,0,1131,1132,1,0,0,0,1132,1135,
1,0,0,0,1133,1131,1,0,0,0,1134,1127,1,0,0,0,1134,1135,1,0,0,0,1135,1136,
1,0,0,0,1136,1137,3,152,76,0,1137,1139,3,154,77,0,1138,1140,3,166,83,0,1139,
1138,1,0,0,0,1139,1140,1,0,0,0,1140,151,1,0,0,0,1141,1144,3,128,64,0,1142,
1144,5,65,0,0,1143,1141,1,0,0,0,1143,1142,1,0,0,0,1144,153,1,0,0,0,1145,
1146,5,123,0,0,1146,1150,5,76,0,0,1147,1148,3,156,78,0,1148,1149,5,83,0,
0,1149,1151,1,0,0,0,1150,1147,1,0,0,0,1150,1151,1,0,0,0,1151,1153,1,0,0,
0,1152,1154,3,158,79,0,1153,1152,1,0,0,0,1153,1154,1,0,0,0,1154,1155,1,0,
0,0,1155,1157,5,77,0,0,1156,1158,3,30,15,0,1157,1156,1,0,0,0,1157,1158,1,
0,0,0,1158,155,1,0,0,0,1159,1161,3,254,127,0,1160,1159,1,0,0,0,1161,1164,
1,0,0,0,1162,1160,1,0,0,0,1162,1163,1,0,0,0,1163,1165,1,0,0,0,1164,1162,
1,0,0,0,1165,1168,3,128,64,0,1166,1167,5,123,0,0,1167,1169,5,84,0,0,1168,
1166,1,0,0,0,1168,1169,1,0,0,0,1169,1170,1,0,0,0,1170,1171,5,60,0,0,1171,
157,1,0,0,0,1172,1177,3,160,80,0,1173,1174,5,83,0,0,1174,1176,3,160,80,0,
1175,1173,1,0,0,0,1176,1179,1,0,0,0,1177,1175,1,0,0,0,1177,1178,1,0,0,0,
1178,159,1,0,0,0,1179,1177,1,0,0,0,1180,1182,3,164,82,0,1181,1180,1,0,0,
0,1182,1185,1,0,0,0,1183,1181,1,0,0,0,1183,1184,1,0,0,0,1184,1186,1,0,0,
0,1185,1183,1,0,0,0,1186,1187,3,128,64,0,1187,1188,3,124,62,0,1188,1191,
1,0,0,0,1189,1191,3,162,81,0,1190,1183,1,0,0,0,1190,1189,1,0,0,0,1191,161,
1,0,0,0,1192,1194,3,164,82,0,1193,1192,1,0,0,0,1194,1197,1,0,0,0,1195,1193,
1,0,0,0,1195,1196,1,0,0,0,1196,1198,1,0,0,0,1197,1195,1,0,0,0,1198,1202,
3,128,64,0,1199,1201,3,254,127,0,1200,1199,1,0,0,0,1201,1204,1,0,0,0,1202,
1200,1,0,0,0,1202,1203,1,0,0,0,1203,1205,1,0,0,0,1204,1202,1,0,0,0,1205,
1206,5,85,0,0,1206,1207,5,123,0,0,1207,163,1,0,0,0,1208,1211,3,254,127,0,
1209,1211,5,35,0,0,1210,1208,1,0,0,0,1210,1209,1,0,0,0,1211,165,1,0,0,0,
1212,1213,5,62,0,0,1213,1214,3,168,84,0,1214,167,1,0,0,0,1215,1220,3,170,
85,0,1216,1217,5,83,0,0,1217,1219,3,170,85,0,1218,1216,1,0,0,0,1219,1222,
1,0,0,0,1220,1218,1,0,0,0,1220,1221,1,0,0,0,1221,169,1,0,0,0,1222,1220,1,
0,0,0,1223,1226,3,22,11,0,1224,1226,3,26,13,0,1225,1223,1,0,0,0,1225,1224,
1,0,0,0,1226,171,1,0,0,0,1227,1230,3,276,138,0,1228,1230,5,82,0,0,1229,1227,
1,0,0,0,1229,1228,1,0,0,0,1230,173,1,0,0,0,1231,1232,3,276,138,0,1232,175,
1,0,0,0,1233,1234,5,55,0,0,1234,1235,3,276,138,0,1235,177,1,0,0,0,1236,1238,
3,180,90,0,1237,1236,1,0,0,0,1238,1241,1,0,0,0,1239,1237,1,0,0,0,1239,1240,
1,0,0,0,1240,1242,1,0,0,0,1241,1239,1,0,0,0,1242,1244,3,182,91,0,1243,1245,
3,166,83,0,1244,1243,1,0,0,0,1244,1245,1,0,0,0,1245,1246,1,0,0,0,1246,1247,
3,186,93,0,1247,179,1,0,0,0,1248,1253,3,254,127,0,1249,1253,5,52,0,0,1250,
1253,5,51,0,0,1251,1253,5,50,0,0,1252,1248,1,0,0,0,1252,1249,1,0,0,0,1252,
1250,1,0,0,0,1252,1251,1,0,0,0,1253,181,1,0,0,0,1254,1256,3,98,49,0,1255,
1254,1,0,0,0,1255,1256,1,0,0,0,1256,1257,1,0,0,0,1257,1258,3,184,92,0,1258,
1262,5,76,0,0,1259,1260,3,156,78,0,1260,1261,5,83,0,0,1261,1263,1,0,0,0,
1262,1259,1,0,0,0,1262,1263,1,0,0,0,1263,1265,1,0,0,0,1264,1266,3,158,79,
0,1265,1264,1,0,0,0,1265,1266,1,0,0,0,1266,1267,1,0,0,0,1267,1268,5,77,0,
0,1268,183,1,0,0,0,1269,1270,3,4,2,0,1270,185,1,0,0,0,1271,1273,5,78,0,0,
1272,1274,3,188,94,0,1273,1272,1,0,0,0,1273,1274,1,0,0,0,1274,1276,1,0,0,
0,1275,1277,3,278,139,0,1276,1275,1,0,0,0,1276,1277,1,0,0,0,1277,1278,1,
0,0,0,1278,1279,5,79,0,0,1279,187,1,0,0,0,1280,1282,3,40,20,0,1281,1280,
1,0,0,0,1281,1282,1,0,0,0,1282,1283,1,0,0,0,1283,1284,7,4,0,0,1284,1286,
5,76,0,0,1285,1287,3,422,211,0,1286,1285,1,0,0,0,1286,1287,1,0,0,0,1287,
1288,1,0,0,0,1288,1289,5,77,0,0,1289,1307,5,82,0,0,1290,1293,3,58,29,0,1291,
1293,3,390,195,0,1292,1290,1,0,0,0,1292,1291,1,0,0,0,1293,1294,1,0,0,0,1294,
1296,5,84,0,0,1295,1297,3,40,20,0,1296,1295,1,0,0,0,1296,1297,1,0,0,0,1297,
1298,1,0,0,0,1298,1299,5,57,0,0,1299,1301,5,76,0,0,1300,1302,3,422,211,0,
1301,1300,1,0,0,0,1301,1302,1,0,0,0,1302,1303,1,0,0,0,1303,1304,5,77,0,0,
1304,1305,5,82,0,0,1305,1307,1,0,0,0,1306,1281,1,0,0,0,1306,1292,1,0,0,0,
1307,189,1,0,0,0,1308,1310,3,96,48,0,1309,1308,1,0,0,0,1310,1313,1,0,0,0,
1311,1309,1,0,0,0,1311,1312,1,0,0,0,1312,1314,1,0,0,0,1313,1311,1,0,0,0,
1314,1315,5,33,0,0,1315,1317,3,4,2,0,1316,1318,3,104,52,0,1317,1316,1,0,
0,0,1317,1318,1,0,0,0,1318,1319,1,0,0,0,1319,1320,3,192,96,0,1320,191,1,
0,0,0,1321,1323,5,78,0,0,1322,1324,3,194,97,0,1323,1322,1,0,0,0,1323,1324,
1,0,0,0,1324,1326,1,0,0,0,1325,1327,5,83,0,0,1326,1325,1,0,0,0,1326,1327,
1,0,0,0,1327,1329,1,0,0,0,1328,1330,3,200,100,0,1329,1328,1,0,0,0,1329,1330,
1,0,0,0,1330,1331,1,0,0,0,1331,1332,5,79,0,0,1332,193,1,0,0,0,1333,1338,
3,196,98,0,1334,1335,5,83,0,0,1335,1337,3,196,98,0,1336,1334,1,0,0,0,1337,
1340,1,0,0,0,1338,1336,1,0,0,0,1338,1339,1,0,0,0,1339,195,1,0,0,0,1340,1338,
1,0,0,0,1341,1343,3,198,99,0,1342,1341,1,0,0,0,1343,1346,1,0,0,0,1344,1342,
1,0,0,0,1344,1345,1,0,0,0,1345,1347,1,0,0,0,1346,1344,1,0,0,0,1347,1353,
5,123,0,0,1348,1350,5,76,0,0,1349,1351,3,422,211,0,1350,1349,1,0,0,0,1350,
1351,1,0,0,0,1351,1352,1,0,0,0,1352,1354,5,77,0,0,1353,1348,1,0,0,0,1353,
1354,1,0,0,0,1354,1356,1,0,0,0,1355,1357,3,110,55,0,1356,1355,1,0,0,0,1356,
1357,1,0,0,0,1357,197,1,0,0,0,1358,1359,3,254,127,0,1359,199,1,0,0,0,1360,
1364,5,82,0,0,1361,1363,3,112,56,0,1362,1361,1,0,0,0,1363,1366,1,0,0,0,1364,
1362,1,0,0,0,1364,1365,1,0,0,0,1365,201,1,0,0,0,1366,1364,1,0,0,0,1367,1369,
3,96,48,0,1368,1367,1,0,0,0,1369,1372,1,0,0,0,1370,1368,1,0,0,0,1370,1371,
1,0,0,0,1371,1373,1,0,0,0,1372,1370,1,0,0,0,1373,1374,5,9,0,0,1374,1376,
3,4,2,0,1375,1377,3,98,49,0,1376,1375,1,0,0,0,1376,1377,1,0,0,0,1377,1378,
1,0,0,0,1378,1380,3,204,102,0,1379,1381,3,104,52,0,1380,1379,1,0,0,0,1380,
1381,1,0,0,0,1381,1382,1,0,0,0,1382,1383,3,214,107,0,1383,203,1,0,0,0,1384,
1386,5,76,0,0,1385,1387,3,206,103,0,1386,1385,1,0,0,0,1386,1387,1,0,0,0,
1387,1388,1,0,0,0,1388,1389,5,77,0,0,1389,205,1,0,0,0,1390,1395,3,208,104,
0,1391,1392,5,83,0,0,1392,1394,3,208,104,0,1393,1391,1,0,0,0,1394,1397,1,
0,0,0,1395,1393,1,0,0,0,1395,1396,1,0,0,0,1396,207,1,0,0,0,1397,1395,1,0,
0,0,1398,1400,3,212,106,0,1399,1398,1,0,0,0,1400,1403,1,0,0,0,1401,1399,
1,0,0,0,1401,1402,1,0,0,0,1402,1404,1,0,0,0,1403,1401,1,0,0,0,1404,1405,
3,128,64,0,1405,1406,5,123,0,0,1406,1409,1,0,0,0,1407,1409,3,210,105,0,1408,
1401,1,0,0,0,1408,1407,1,0,0,0,1409,209,1,0,0,0,1410,1412,3,212,106,0,1411,
1410,1,0,0,0,1412,1415,1,0,0,0,1413,1411,1,0,0,0,1413,1414,1,0,0,0,1414,
1416,1,0,0,0,1415,1413,1,0,0,0,1416,1420,3,128,64,0,1417,1419,3,254,127,
0,1418,1417,1,0,0,0,1419,1422,1,0,0,0,1420,1418,1,0,0,0,1420,1421,1,0,0,
0,1421,1423,1,0,0,0,1422,1420,1,0,0,0,1423,1424,5,85,0,0,1424,1425,5,123,
0,0,1425,211,1,0,0,0,1426,1427,3,254,127,0,1427,213,1,0,0,0,1428,1432,5,
78,0,0,1429,1431,3,216,108,0,1430,1429,1,0,0,0,1431,1434,1,0,0,0,1432,1430,
1,0,0,0,1432,1433,1,0,0,0,1433,1435,1,0,0,0,1434,1432,1,0,0,0,1435,1436,
5,79,0,0,1436,215,1,0,0,0,1437,1440,3,112,56,0,1438,1440,3,218,109,0,1439,
1437,1,0,0,0,1439,1438,1,0,0,0,1440,217,1,0,0,0,1441,1443,3,180,90,0,1442,
1441,1,0,0,0,1443,1446,1,0,0,0,1444,1442,1,0,0,0,1444,1445,1,0,0,0,1445,
1447,1,0,0,0,1446,1444,1,0,0,0,1447,1448,3,184,92,0,1448,1449,3,186,93,0,
1449,219,1,0,0,0,1450,1453,3,222,111,0,1451,1453,3,242,121,0,1452,1450,1,
0,0,0,1452,1451,1,0,0,0,1453,221,1,0,0,0,1454,1456,3,224,112,0,1455,1454,
1,0,0,0,1456,1459,1,0,0,0,1457,1455,1,0,0,0,1457,1458,1,0,0,0,1458,1460,
1,0,0,0,1459,1457,1,0,0,0,1460,1461,5,45,0,0,1461,1463,3,4,2,0,1462,1464,
3,98,49,0,1463,1462,1,0,0,0,1463,1464,1,0,0,0,1464,1466,1,0,0,0,1465,1467,
3,226,113,0,1466,1465,1,0,0,0,1466,1467,1,0,0,0,1467,1469,1,0,0,0,1468,1470,
3,228,114,0,1469,1468,1,0,0,0,1469,1470,1,0,0,0,1470,1471,1,0,0,0,1471,1472,
3,230,115,0,1472,223,1,0,0,0,1473,1483,3,254,127,0,1474,1483,5,52,0,0,1475,
1483,5,51,0,0,1476,1483,5,50,0,0,1477,1483,5,18,0,0,1478,1483,5,55,0,0,1479,
1483,5,11,0,0,1480,1483,5,3,0,0,1481,1483,5,56,0,0,1482,1473,1,0,0,0,1482,
1474,1,0,0,0,1482,1475,1,0,0,0,1482,1476,1,0,0,0,1482,1477,1,0,0,0,1482,
1478,1,0,0,0,1482,1479,1,0,0,0,1482,1480,1,0,0,0,1482,1481,1,0,0,0,1483,
225,1,0,0,0,1484,1485,5,34,0,0,1485,1486,3,106,53,0,1486,227,1,0,0,0,1487,
1488,5,7,0,0,1488,1493,3,54,27,0,1489,1490,5,83,0,0,1490,1492,3,54,27,0,
1491,1489,1,0,0,0,1492,1495,1,0,0,0,1493,1491,1,0,0,0,1493,1494,1,0,0,0,
1494,229,1,0,0,0,1495,1493,1,0,0,0,1496,1500,5,78,0,0,1497,1499,3,232,116,
0,1498,1497,1,0,0,0,1499,1502,1,0,0,0,1500,1498,1,0,0,0,1500,1501,1,0,0,
0,1501,1503,1,0,0,0,1502,1500,1,0,0,0,1503,1504,5,79,0,0,1504,231,1,0,0,
0,1505,1511,3,234,117,0,1506,1511,3,238,119,0,1507,1511,3,92,46,0,1508,1511,
3,220,110,0,1509,1511,5,82,0,0,1510,1505,1,0,0,0,1510,1506,1,0,0,0,1510,
1507,1,0,0,0,1510,1508,1,0,0,0,1510,1509,1,0,0,0,1511,233,1,0,0,0,1512,1514,
3,236,118,0,1513,1512,1,0,0,0,1514,1517,1,0,0,0,1515,1513,1,0,0,0,1515,1516,
1,0,0,0,1516,1518,1,0,0,0,1517,1515,1,0,0,0,1518,1519,3,128,64,0,1519,1520,
3,120,60,0,1520,1521,5,82,0,0,1521,235,1,0,0,0,1522,1527,3,254,127,0,1523,
1527,5,52,0,0,1524,1527,5,55,0,0,1525,1527,5,35,0,0,1526,1522,1,0,0,0,1526,
1523,1,0,0,0,1526,1524,1,0,0,0,1526,1525,1,0,0,0,1527,237,1,0,0,0,1528,1530,
3,240,120,0,1529,1528,1,0,0,0,1530,1533,1,0,0,0,1531,1529,1,0,0,0,1531,1532,
1,0,0,0,1532,1534,1,0,0,0,1533,1531,1,0,0,0,1534,1535,3,150,75,0,1535,1536,
3,172,86,0,1536,239,1,0,0,0,1537,1545,3,254,127,0,1538,1545,5,52,0,0,1539,
1545,5,50,0,0,1540,1545,5,18,0,0,1541,1545,5,29,0,0,1542,1545,5,55,0,0,1543,
1545,5,56,0,0,1544,1537,1,0,0,0,1544,1538,1,0,0,0,1544,1539,1,0,0,0,1544,
1540,1,0,0,0,1544,1541,1,0,0,0,1544,1542,1,0,0,0,1544,1543,1,0,0,0,1545,
241,1,0,0,0,1546,1548,3,224,112,0,1547,1546,1,0,0,0,1548,1551,1,0,0,0,1549,
1547,1,0,0,0,1549,1550,1,0,0,0,1550,1552,1,0,0,0,1551,1549,1,0,0,0,1552,
1553,5,86,0,0,1553,1554,5,45,0,0,1554,1555,3,4,2,0,1555,1556,3,244,122,0,
1556,243,1,0,0,0,1557,1561,5,78,0,0,1558,1560,3,246,123,0,1559,1558,1,0,
0,0,1560,1563,1,0,0,0,1561,1559,1,0,0,0,1561,1562,1,0,0,0,1562,1564,1,0,
0,0,1563,1561,1,0,0,0,1564,1565,5,79,0,0,1565,245,1,0,0,0,1566,1572,3,248,
124,0,1567,1572,3,234,117,0,1568,1572,3,92,46,0,1569,1572,3,220,110,0,1570,
1572,5,82,0,0,1571,1566,1,0,0,0,1571,1567,1,0,0,0,1571,1568,1,0,0,0,1571,
1569,1,0,0,0,1571,1570,1,0,0,0,1572,247,1,0,0,0,1573,1575,3,250,125,0,1574,
1573,1,0,0,0,1575,1578,1,0,0,0,1576,1574,1,0,0,0,1576,1577,1,0,0,0,1577,
1579,1,0,0,0,1578,1576,1,0,0,0,1579,1580,3,128,64,0,1580,1581,5,123,0,0,
1581,1582,5,76,0,0,1582,1584,5,77,0,0,1583,1585,3,30,15,0,1584,1583,1,0,
0,0,1584,1585,1,0,0,0,1585,1587,1,0,0,0,1586,1588,3,252,126,0,1587,1586,
1,0,0,0,1587,1588,1,0,0,0,1588,1589,1,0,0,0,1589,1590,5,82,0,0,1590,249,
1,0,0,0,1591,1595,3,254,127,0,1592,1595,5,52,0,0,1593,1595,5,18,0,0,1594,
1591,1,0,0,0,1594,1592,1,0,0,0,1594,1593,1,0,0,0,1595,251,1,0,0,0,1596,1597,
5,29,0,0,1597,1598,3,262,131,0,1598,253,1,0,0,0,1599,1603,3,256,128,0,1600,
1603,3,268,134,0,1601,1603,3,270,135,0,1602,1599,1,0,0,0,1602,1600,1,0,0,
0,1602,1601,1,0,0,0,1603,255,1,0,0,0,1604,1605,5,86,0,0,1605,1606,3,54,27,
0,1606,1608,5,76,0,0,1607,1609,3,258,129,0,1608,1607,1,0,0,0,1608,1609,1,
0,0,0,1609,1610,1,0,0,0,1610,1611,5,77,0,0,1611,257,1,0,0,0,1612,1617,3,
260,130,0,1613,1614,5,83,0,0,1614,1616,3,260,130,0,1615,1613,1,0,0,0,1616,
1619,1,0,0,0,1617,1615,1,0,0,0,1617,1618,1,0,0,0,1618,259,1,0,0,0,1619,1617,
1,0,0,0,1620,1621,5,123,0,0,1621,1622,5,88,0,0,1622,1623,3,262,131,0,1623,
261,1,0,0,0,1624,1628,3,464,232,0,1625,1628,3,264,132,0,1626,1628,3,254,
127,0,1627,1624,1,0,0,0,1627,1625,1,0,0,0,1627,1626,1,0,0,0,1628,263,1,0,
0,0,1629,1631,5,78,0,0,1630,1632,3,266,133,0,1631,1630,1,0,0,0,1631,1632,
1,0,0,0,1632,1634,1,0,0,0,1633,1635,5,83,0,0,1634,1633,1,0,0,0,1634,1635,
1,0,0,0,1635,1636,1,0,0,0,1636,1637,5,79,0,0,1637,265,1,0,0,0,1638,1643,
3,262,131,0,1639,1640,5,83,0,0,1640,1642,3,262,131,0,1641,1639,1,0,0,0,1642,
1645,1,0,0,0,1643,1641,1,0,0,0,1643,1644,1,0,0,0,1644,267,1,0,0,0,1645,1643,
1,0,0,0,1646,1647,5,86,0,0,1647,1648,3,54,27,0,1648,269,1,0,0,0,1649,1650,
5,86,0,0,1650,1651,3,54,27,0,1651,1652,5,76,0,0,1652,1653,3,262,131,0,1653,
1654,5,77,0,0,1654,271,1,0,0,0,1655,1657,5,78,0,0,1656,1658,3,274,137,0,
1657,1656,1,0,0,0,1657,1658,1,0,0,0,1658,1660,1,0,0,0,1659,1661,5,83,0,0,
1660,1659,1,0,0,0,1660,1661,1,0,0,0,1661,1662,1,0,0,0,1662,1663,5,79,0,0,
1663,273,1,0,0,0,1664,1669,3,126,63,0,1665,1666,5,83,0,0,1666,1668,3,126,
63,0,1667,1665,1,0,0,0,1668,1671,1,0,0,0,1669,1667,1,0,0,0,1669,1670,1,0,
0,0,1670,275,1,0,0,0,1671,1669,1,0,0,0,1672,1674,5,78,0,0,1673,1675,3,278,
139,0,1674,1673,1,0,0,0,1674,1675,1,0,0,0,1675,1676,1,0,0,0,1676,1677,5,
79,0,0,1677,277,1,0,0,0,1678,1682,3,280,140,0,1679,1681,3,280,140,0,1680,
1679,1,0,0,0,1681,1684,1,0,0,0,1682,1680,1,0,0,0,1682,1683,1,0,0,0,1683,
279,1,0,0,0,1684,1682,1,0,0,0,1685,1689,3,282,141,0,1686,1689,3,288,144,
0,1687,1689,3,290,145,0,1688,1685,1,0,0,0,1688,1686,1,0,0,0,1688,1687,1,
0,0,0,1689,281,1,0,0,0,1690,1693,3,92,46,0,1691,1693,3,222,111,0,1692,1690,
1,0,0,0,1692,1691,1,0,0,0,1693,283,1,0,0,0,1694,1696,3,164,82,0,1695,1694,
1,0,0,0,1696,1699,1,0,0,0,1697,1695,1,0,0,0,1697,1698,1,0,0,0,1698,1700,
1,0,0,0,1699,1697,1,0,0,0,1700,1702,3,286,143,0,1701,1703,3,120,60,0,1702,
1701,1,0,0,0,1702,1703,1,0,0,0,1703,285,1,0,0,0,1704,1707,3,128,64,0,1705,
1707,5,15,0,0,1706,1704,1,0,0,0,1706,1705,1,0,0,0,1707,287,1,0,0,0,1708,
1709,3,284,142,0,1709,1710,5,82,0,0,1710,289,1,0,0,0,1711,1718,3,294,147,
0,1712,1718,3,298,149,0,1713,1718,3,306,153,0,1714,1718,3,308,154,0,1715,
1718,3,326,163,0,1716,1718,3,332,166,0,1717,1711,1,0,0,0,1717,1712,1,0,0,
0,1717,1713,1,0,0,0,1717,1714,1,0,0,0,1717,1715,1,0,0,0,1717,1716,1,0,0,
0,1718,291,1,0,0,0,1719,1725,3,294,147,0,1720,1725,3,300,150,0,1721,1725,
3,310,155,0,1722,1725,3,328,164,0,1723,1725,3,334,167,0,1724,1719,1,0,0,
0,1724,1720,1,0,0,0,1724,1721,1,0,0,0,1724,1722,1,0,0,0,1724,1723,1,0,0,
0,1725,293,1,0,0,0,1726,1740,3,276,138,0,1727,1740,3,296,148,0,1728,1740,
3,302,151,0,1729,1740,3,312,156,0,1730,1740,3,314,157,0,1731,1740,3,330,
165,0,1732,1740,3,350,175,0,1733,1740,3,352,176,0,1734,1740,3,354,177,0,
1735,1740,3,358,179,0,1736,1740,3,356,178,0,1737,1740,3,360,180,0,1738,1740,
3,382,191,0,1739,1726,1,0,0,0,1739,1727,1,0,0,0,1739,1728,1,0,0,0,1739,1729,
1,0,0,0,1739,1730,1,0,0,0,1739,1731,1,0,0,0,1739,1732,1,0,0,0,1739,1733,
1,0,0,0,1739,1734,1,0,0,0,1739,1735,1,0,0,0,1739,1736,1,0,0,0,1739,1737,
1,0,0,0,1739,1738,1,0,0,0,1740,295,1,0,0,0,1741,1742,5,82,0,0,1742,297,1,
0,0,0,1743,1744,5,123,0,0,1744,1745,5,94,0,0,1745,1746,3,290,145,0,1746,
299,1,0,0,0,1747,1748,5,123,0,0,1748,1749,5,94,0,0,1749,1750,3,292,146,0,
1750,301,1,0,0,0,1751,1752,3,304,152,0,1752,1753,5,82,0,0,1753,303,1,0,0,
0,1754,1762,3,468,234,0,1755,1762,3,436,218,0,1756,1762,3,438,219,0,1757,
1762,3,430,215,0,1758,1762,3,432,216,0,1759,1762,3,420,210,0,1760,1762,3,
398,199,0,1761,1754,1,0,0,0,1761,1755,1,0,0,0,1761,1756,1,0,0,0,1761,1757,
1,0,0,0,1761,1758,1,0,0,0,1761,1759,1,0,0,0,1761,1760,1,0,0,0,1762,305,1,
0,0,0,1763,1764,5,39,0,0,1764,1765,5,76,0,0,1765,1766,3,388,194,0,1766,1767,
5,77,0,0,1767,1768,3,290,145,0,1768,307,1,0,0,0,1769,1770,5,39,0,0,1770,
1771,5,76,0,0,1771,1772,3,388,194,0,1772,1773,5,77,0,0,1773,1774,3,292,146,
0,1774,1775,5,32,0,0,1775,1776,3,290,145,0,1776,309,1,0,0,0,1777,1778,5,
39,0,0,1778,1779,5,76,0,0,1779,1780,3,388,194,0,1780,1781,5,77,0,0,1781,
1782,3,292,146,0,1782,1783,5,32,0,0,1783,1784,3,292,146,0,1784,311,1,0,0,
0,1785,1786,5,19,0,0,1786,1789,3,388,194,0,1787,1788,5,94,0,0,1788,1790,
3,388,194,0,1789,1787,1,0,0,0,1789,1790,1,0,0,0,1790,1791,1,0,0,0,1791,1792,
5,82,0,0,1792,313,1,0,0,0,1793,1794,5,58,0,0,1794,1795,5,76,0,0,1795,1796,
3,388,194,0,1796,1797,5,77,0,0,1797,1798,3,316,158,0,1798,315,1,0,0,0,1799,
1800,5,78,0,0,1800,1804,3,318,159,0,1801,1803,3,318,159,0,1802,1801,1,0,
0,0,1803,1806,1,0,0,0,1804,1802,1,0,0,0,1804,1805,1,0,0,0,1805,1807,1,0,
0,0,1806,1804,1,0,0,0,1807,1808,5,79,0,0,1808,1826,1,0,0,0,1809,1813,5,78,
0,0,1810,1812,3,320,160,0,1811,1810,1,0,0,0,1812,1815,1,0,0,0,1813,1811,
1,0,0,0,1813,1814,1,0,0,0,1814,1821,1,0,0,0,1815,1813,1,0,0,0,1816,1817,
3,322,161,0,1817,1818,5,94,0,0,1818,1820,1,0,0,0,1819,1816,1,0,0,0,1820,
1823,1,0,0,0,1821,1819,1,0,0,0,1821,1822,1,0,0,0,1822,1824,1,0,0,0,1823,
1821,1,0,0,0,1824,1826,5,79,0,0,1825,1799,1,0,0,0,1825,1809,1,0,0,0,1826,
317,1,0,0,0,1827,1828,3,322,161,0,1828,1834,5,95,0,0,1829,1830,3,388,194,
0,1830,1831,5,82,0,0,1831,1835,1,0,0,0,1832,1835,3,276,138,0,1833,1835,3,
356,178,0,1834,1829,1,0,0,0,1834,1832,1,0,0,0,1834,1833,1,0,0,0,1835,319,
1,0,0,0,1836,1837,3,322,161,0,1837,1843,5,94,0,0,1838,1839,3,322,161,0,1839,
1840,5,94,0,0,1840,1842,1,0,0,0,1841,1838,1,0,0,0,1842,1845,1,0,0,0,1843,
1841,1,0,0,0,1843,1844,1,0,0,0,1844,1846,1,0,0,0,1845,1843,1,0,0,0,1846,
1847,3,278,139,0,1847,321,1,0,0,0,1848,1849,5,23,0,0,1849,1854,3,324,162,
0,1850,1851,5,83,0,0,1851,1853,3,324,162,0,1852,1850,1,0,0,0,1853,1856,1,
0,0,0,1854,1852,1,0,0,0,1854,1855,1,0,0,0,1855,1859,1,0,0,0,1856,1854,1,
0,0,0,1857,1859,5,29,0,0,1858,1848,1,0,0,0,1858,1857,1,0,0,0,1859,323,1,
0,0,0,1860,1861,3,464,232,0,1861,325,1,0,0,0,1862,1863,5,67,0,0,1863,1864,
5,76,0,0,1864,1865,3,388,194,0,1865,1866,5,77,0,0,1866,1867,3,290,145,0,
1867,327,1,0,0,0,1868,1869,5,67,0,0,1869,1870,5,76,0,0,1870,1871,3,388,194,
0,1871,1872,5,77,0,0,1872,1873,3,292,146,0,1873,329,1,0,0,0,1874,1875,5,
30,0,0,1875,1876,3,290,145,0,1876,1877,5,67,0,0,1877,1878,5,76,0,0,1878,
1879,3,388,194,0,1879,1880,5,77,0,0,1880,1881,5,82,0,0,1881,331,1,0,0,0,
1882,1885,3,336,168,0,1883,1885,3,346,173,0,1884,1882,1,0,0,0,1884,1883,
1,0,0,0,1885,333,1,0,0,0,1886,1889,3,338,169,0,1887,1889,3,348,174,0,1888,
1886,1,0,0,0,1888,1887,1,0,0,0,1889,335,1,0,0,0,1890,1891,5,38,0,0,1891,
1893,5,76,0,0,1892,1894,3,340,170,0,1893,1892,1,0,0,0,1893,1894,1,0,0,0,
1894,1895,1,0,0,0,1895,1897,5,82,0,0,1896,1898,3,388,194,0,1897,1896,1,0,
0,0,1897,1898,1,0,0,0,1898,1899,1,0,0,0,1899,1901,5,82,0,0,1900,1902,3,342,
171,0,1901,1900,1,0,0,0,1901,1902,1,0,0,0,1902,1903,1,0,0,0,1903,1904,5,
77,0,0,1904,1905,3,290,145,0,1905,337,1,0,0,0,1906,1907,5,38,0,0,1907,1909,
5,76,0,0,1908,1910,3,340,170,0,1909,1908,1,0,0,0,1909,1910,1,0,0,0,1910,
1911,1,0,0,0,1911,1913,5,82,0,0,1912,1914,3,388,194,0,1913,1912,1,0,0,0,
1913,1914,1,0,0,0,1914,1915,1,0,0,0,1915,1917,5,82,0,0,1916,1918,3,342,171,
0,1917,1916,1,0,0,0,1917,1918,1,0,0,0,1918,1919,1,0,0,0,1919,1920,5,77,0,
0,1920,1921,3,292,146,0,1921,339,1,0,0,0,1922,1925,3,344,172,0,1923,1925,
3,284,142,0,1924,1922,1,0,0,0,1924,1923,1,0,0,0,1925,341,1,0,0,0,1926,1927,
3,344,172,0,1927,343,1,0,0,0,1928,1933,3,304,152,0,1929,1930,5,83,0,0,1930,
1932,3,304,152,0,1931,1929,1,0,0,0,1932,1935,1,0,0,0,1933,1931,1,0,0,0,1933,
1934,1,0,0,0,1934,345,1,0,0,0,1935,1933,1,0,0,0,1936,1937,5,38,0,0,1937,
1938,5,76,0,0,1938,1939,3,284,142,0,1939,1940,5,94,0,0,1940,1941,3,388,194,
0,1941,1942,5,77,0,0,1942,1943,3,290,145,0,1943,347,1,0,0,0,1944,1945,5,
38,0,0,1945,1946,5,76,0,0,1946,1947,3,284,142,0,1947,1948,5,94,0,0,1948,
1949,3,388,194,0,1949,1950,5,77,0,0,1950,1951,3,292,146,0,1951,349,1,0,0,
0,1952,1954,5,21,0,0,1953,1955,5,123,0,0,1954,1953,1,0,0,0,1954,1955,1,0,
0,0,1955,1956,1,0,0,0,1956,1957,5,82,0,0,1957,351,1,0,0,0,1958,1960,5,28,
0,0,1959,1961,5,123,0,0,1960,1959,1,0,0,0,1960,1961,1,0,0,0,1961,1962,1,
0,0,0,1962,1963,5,82,0,0,1963,353,1,0,0,0,1964,1966,5,53,0,0,1965,1967,3,
388,194,0,1966,1965,1,0,0,0,1966,1967,1,0,0,0,1967,1968,1,0,0,0,1968,1969,
5,82,0,0,1969,355,1,0,0,0,1970,1971,5,61,0,0,1971,1972,3,388,194,0,1972,
1973,5,82,0,0,1973,357,1,0,0,0,1974,1975,5,59,0,0,1975,1976,5,76,0,0,1976,
1977,3,388,194,0,1977,1978,5,77,0,0,1978,1979,3,276,138,0,1979,359,1,0,0,
0,1980,1981,5,64,0,0,1981,1982,3,276,138,0,1982,1983,3,362,181,0,1983,1997,
1,0,0,0,1984,1985,5,64,0,0,1985,1986,3,276,138,0,1986,1987,3,370,185,0,1987,
1997,1,0,0,0,1988,1989,5,64,0,0,1989,1991,3,276,138,0,1990,1992,3,362,181,
0,1991,1990,1,0,0,0,1991,1992,1,0,0,0,1992,1993,1,0,0,0,1993,1994,3,370,
185,0,1994,1997,1,0,0,0,1995,1997,3,372,186,0,1996,1980,1,0,0,0,1996,1984,
1,0,0,0,1996,1988,1,0,0,0,1996,1995,1,0,0,0,1997,361,1,0,0,0,1998,2002,3,
364,182,0,1999,2001,3,364,182,0,2000,1999,1,0,0,0,2001,2004,1,0,0,0,2002,
2000,1,0,0,0,2002,2003,1,0,0,0,2003,363,1,0,0,0,2004,2002,1,0,0,0,2005,2006,
5,24,0,0,2006,2007,5,76,0,0,2007,2008,3,366,183,0,2008,2009,5,77,0,0,2009,
2010,3,276,138,0,2010,365,1,0,0,0,2011,2013,3,164,82,0,2012,2011,1,0,0,0,
2013,2016,1,0,0,0,2014,2012,1,0,0,0,2014,2015,1,0,0,0,2015,2017,1,0,0,0,
2016,2014,1,0,0,0,2017,2018,3,368,184,0,2018,2019,3,124,62,0,2019,367,1,
0,0,0,2020,2025,3,138,69,0,2021,2022,5,109,0,0,2022,2024,3,22,11,0,2023,
2021,1,0,0,0,2024,2027,1,0,0,0,2025,2023,1,0,0,0,2025,2026,1,0,0,0,2026,
369,1,0,0,0,2027,2025,1,0,0,0,2028,2029,5,36,0,0,2029,2030,3,276,138,0,2030,
371,1,0,0,0,2031,2032,5,64,0,0,2032,2033,3,374,187,0,2033,2035,3,276,138,
0,2034,2036,3,362,181,0,2035,2034,1,0,0,0,2035,2036,1,0,0,0,2036,2038,1,
0,0,0,2037,2039,3,370,185,0,2038,2037,1,0,0,0,2038,2039,1,0,0,0,2039,373,
1,0,0,0,2040,2041,5,76,0,0,2041,2043,3,376,188,0,2042,2044,5,82,0,0,2043,
2042,1,0,0,0,2043,2044,1,0,0,0,2044,2045,1,0,0,0,2045,2046,5,77,0,0,2046,
375,1,0,0,0,2047,2052,3,378,189,0,2048,2049,5,82,0,0,2049,2051,3,378,189,
0,2050,2048,1,0,0,0,2051,2054,1,0,0,0,2052,2050,1,0,0,0,2052,2053,1,0,0,
0,2053,377,1,0,0,0,2054,2052,1,0,0,0,2055,2058,3,284,142,0,2056,2058,3,380,
190,0,2057,2055,1,0,0,0,2057,2056,1,0,0,0,2058,379,1,0,0,0,2059,2062,3,58,
29,0,2060,2062,3,418,209,0,2061,2059,1,0,0,0,2061,2060,1,0,0,0,2062,381,
1,0,0,0,2063,2064,5,17,0,0,2064,2065,3,388,194,0,2065,2066,5,82,0,0,2066,
383,1,0,0,0,2067,2068,3,386,193,0,2068,385,1,0,0,0,2069,2070,3,284,142,0,
2070,387,1,0,0,0,2071,2074,3,474,237,0,2072,2074,3,466,233,0,2073,2071,1,
0,0,0,2073,2072,1,0,0,0,2074,389,1,0,0,0,2075,2078,3,392,196,0,2076,2078,
3,406,203,0,2077,2075,1,0,0,0,2077,2076,1,0,0,0,2078,391,1,0,0,0,2079,2081,
3,2,1,0,2080,2082,3,394,197,0,2081,2080,1,0,0,0,2081,2082,1,0,0,0,2082,2297,
1,0,0,0,2083,2085,3,396,198,0,2084,2086,3,394,197,0,2085,2084,1,0,0,0,2085,
2086,1,0,0,0,2086,2297,1,0,0,0,2087,2089,5,60,0,0,2088,2090,3,394,197,0,
2089,2088,1,0,0,0,2089,2090,1,0,0,0,2090,2297,1,0,0,0,2091,2092,3,54,27,
0,2092,2093,5,84,0,0,2093,2095,5,60,0,0,2094,2096,3,394,197,0,2095,2094,
1,0,0,0,2095,2096,1,0,0,0,2096,2297,1,0,0,0,2097,2098,5,76,0,0,2098,2099,
3,388,194,0,2099,2101,5,77,0,0,2100,2102,3,394,197,0,2101,2100,1,0,0,0,2101,
2102,1,0,0,0,2102,2297,1,0,0,0,2103,2105,3,400,200,0,2104,2106,3,394,197,
0,2105,2104,1,0,0,0,2105,2106,1,0,0,0,2106,2297,1,0,0,0,2107,2108,3,58,29,
0,2108,2109,5,84,0,0,2109,2111,3,400,200,0,2110,2112,3,394,197,0,2111,2110,
1,0,0,0,2111,2112,1,0,0,0,2112,2297,1,0,0,0,2113,2114,3,406,203,0,2114,2115,
5,84,0,0,2115,2117,3,400,200,0,2116,2118,3,394,197,0,2117,2116,1,0,0,0,2117,
2118,1,0,0,0,2118,2297,1,0,0,0,2119,2120,3,406,203,0,2120,2121,5,84,0,0,
2121,2123,5,123,0,0,2122,2124,3,394,197,0,2123,2122,1,0,0,0,2123,2124,1,
0,0,0,2124,2297,1,0,0,0,2125,2126,5,57,0,0,2126,2127,5,84,0,0,2127,2129,
5,123,0,0,2128,2130,3,394,197,0,2129,2128,1,0,0,0,2129,2130,1,0,0,0,2130,
2297,1,0,0,0,2131,2132,3,54,27,0,2132,2133,5,84,0,0,2133,2134,5,57,0,0,2134,
2135,5,84,0,0,2135,2137,5,123,0,0,2136,2138,3,394,197,0,2137,2136,1,0,0,
0,2137,2138,1,0,0,0,2138,2297,1,0,0,0,2139,2140,3,58,29,0,2140,2141,5,80,
0,0,2141,2142,3,388,194,0,2142,2144,5,81,0,0,2143,2145,3,394,197,0,2144,
2143,1,0,0,0,2144,2145,1,0,0,0,2145,2297,1,0,0,0,2146,2147,3,410,205,0,2147,
2148,5,80,0,0,2148,2149,3,388,194,0,2149,2151,5,81,0,0,2150,2152,3,394,197,
0,2151,2150,1,0,0,0,2151,2152,1,0,0,0,2152,2297,1,0,0,0,2153,2154,3,60,30,
0,2154,2156,5,76,0,0,2155,2157,3,422,211,0,2156,2155,1,0,0,0,2156,2157,1,
0,0,0,2157,2158,1,0,0,0,2158,2160,5,77,0,0,2159,2161,3,394,197,0,2160,2159,
1,0,0,0,2160,2161,1,0,0,0,2161,2297,1,0,0,0,2162,2163,3,54,27,0,2163,2165,
5,84,0,0,2164,2166,3,40,20,0,2165,2164,1,0,0,0,2165,2166,1,0,0,0,2166,2167,
1,0,0,0,2167,2168,5,123,0,0,2168,2170,5,76,0,0,2169,2171,3,422,211,0,2170,
2169,1,0,0,0,2170,2171,1,0,0,0,2171,2172,1,0,0,0,2172,2174,5,77,0,0,2173,
2175,3,394,197,0,2174,2173,1,0,0,0,2174,2175,1,0,0,0,2175,2297,1,0,0,0,2176,
2177,3,58,29,0,2177,2179,5,84,0,0,2178,2180,3,40,20,0,2179,2178,1,0,0,0,
2179,2180,1,0,0,0,2180,2181,1,0,0,0,2181,2182,5,123,0,0,2182,2184,5,76,0,
0,2183,2185,3,422,211,0,2184,2183,1,0,0,0,2184,2185,1,0,0,0,2185,2186,1,
0,0,0,2186,2188,5,77,0,0,2187,2189,3,394,197,0,2188,2187,1,0,0,0,2188,2189,
1,0,0,0,2189,2297,1,0,0,0,2190,2191,3,406,203,0,2191,2193,5,84,0,0,2192,
2194,3,40,20,0,2193,2192,1,0,0,0,2193,2194,1,0,0,0,2194,2195,1,0,0,0,2195,
2196,5,123,0,0,2196,2198,5,76,0,0,2197,2199,3,422,211,0,2198,2197,1,0,0,
0,2198,2199,1,0,0,0,2199,2200,1,0,0,0,2200,2202,5,77,0,0,2201,2203,3,394,
197,0,2202,2201,1,0,0,0,2202,2203,1,0,0,0,2203,2297,1,0,0,0,2204,2205,5,
57,0,0,2205,2207,5,84,0,0,2206,2208,3,40,20,0,2207,2206,1,0,0,0,2207,2208,
1,0,0,0,2208,2209,1,0,0,0,2209,2210,5,123,0,0,2210,2212,5,76,0,0,2211,2213,
3,422,211,0,2212,2211,1,0,0,0,2212,2213,1,0,0,0,2213,2214,1,0,0,0,2214,2216,
5,77,0,0,2215,2217,3,394,197,0,2216,2215,1,0,0,0,2216,2217,1,0,0,0,2217,
2297,1,0,0,0,2218,2219,3,54,27,0,2219,2220,5,84,0,0,2220,2221,5,57,0,0,2221,
2223,5,84,0,0,2222,2224,3,40,20,0,2223,2222,1,0,0,0,2223,2224,1,0,0,0,2224,
2225,1,0,0,0,2225,2226,5,123,0,0,2226,2228,5,76,0,0,2227,2229,3,422,211,
0,2228,2227,1,0,0,0,2228,2229,1,0,0,0,2229,2230,1,0,0,0,2230,2232,5,77,0,
0,2231,2233,3,394,197,0,2232,2231,1,0,0,0,2232,2233,1,0,0,0,2233,2297,1,
0,0,0,2234,2235,3,58,29,0,2235,2237,5,87,0,0,2236,2238,3,40,20,0,2237,2236,
1,0,0,0,2237,2238,1,0,0,0,2238,2239,1,0,0,0,2239,2241,5,123,0,0,2240,2242,
3,394,197,0,2241,2240,1,0,0,0,2241,2242,1,0,0,0,2242,2297,1,0,0,0,2243,2244,
3,406,203,0,2244,2246,5,87,0,0,2245,2247,3,40,20,0,2246,2245,1,0,0,0,2246,
2247,1,0,0,0,2247,2248,1,0,0,0,2248,2250,5,123,0,0,2249,2251,3,394,197,0,
2250,2249,1,0,0,0,2250,2251,1,0,0,0,2251,2297,1,0,0,0,2252,2253,3,16,8,0,
2253,2255,5,87,0,0,2254,2256,3,40,20,0,2255,2254,1,0,0,0,2255,2256,1,0,0,
0,2256,2257,1,0,0,0,2257,2259,5,123,0,0,2258,2260,3,394,197,0,2259,2258,
1,0,0,0,2259,2260,1,0,0,0,2260,2297,1,0,0,0,2261,2262,5,57,0,0,2262,2264,
5,87,0,0,2263,2265,3,40,20,0,2264,2263,1,0,0,0,2264,2265,1,0,0,0,2265,2266,
1,0,0,0,2266,2268,5,123,0,0,2267,2269,3,394,197,0,2268,2267,1,0,0,0,2268,
2269,1,0,0,0,2269,2297,1,0,0,0,2270,2271,3,54,27,0,2271,2272,5,84,0,0,2272,
2273,5,57,0,0,2273,2275,5,87,0,0,2274,2276,3,40,20,0,2275,2274,1,0,0,0,2275,
2276,1,0,0,0,2276,2277,1,0,0,0,2277,2279,5,123,0,0,2278,2280,3,394,197,0,
2279,2278,1,0,0,0,2279,2280,1,0,0,0,2280,2297,1,0,0,0,2281,2282,3,22,11,
0,2282,2284,5,87,0,0,2283,2285,3,40,20,0,2284,2283,1,0,0,0,2284,2285,1,0,
0,0,2285,2286,1,0,0,0,2286,2288,5,48,0,0,2287,2289,3,394,197,0,2288,2287,
1,0,0,0,2288,2289,1,0,0,0,2289,2297,1,0,0,0,2290,2291,3,28,14,0,2291,2292,
5,87,0,0,2292,2294,5,48,0,0,2293,2295,3,394,197,0,2294,2293,1,0,0,0,2294,
2295,1,0,0,0,2295,2297,1,0,0,0,2296,2079,1,0,0,0,2296,2083,1,0,0,0,2296,
2087,1,0,0,0,2296,2091,1,0,0,0,2296,2097,1,0,0,0,2296,2103,1,0,0,0,2296,
2107,1,0,0,0,2296,2113,1,0,0,0,2296,2119,1,0,0,0,2296,2125,1,0,0,0,2296,
2131,1,0,0,0,2296,2139,1,0,0,0,2296,2146,1,0,0,0,2296,2153,1,0,0,0,2296,
2162,1,0,0,0,2296,2176,1,0,0,0,2296,2190,1,0,0,0,2296,2204,1,0,0,0,2296,
2218,1,0,0,0,2296,2234,1,0,0,0,2296,2243,1,0,0,0,2296,2252,1,0,0,0,2296,
2261,1,0,0,0,2296,2270,1,0,0,0,2296,2281,1,0,0,0,2296,2290,1,0,0,0,2297,
393,1,0,0,0,2298,2299,5,84,0,0,2299,2301,3,400,200,0,2300,2302,3,394,197,
0,2301,2300,1,0,0,0,2301,2302,1,0,0,0,2302,2336,1,0,0,0,2303,2304,5,84,0,
0,2304,2306,5,123,0,0,2305,2307,3,394,197,0,2306,2305,1,0,0,0,2306,2307,
1,0,0,0,2307,2336,1,0,0,0,2308,2309,5,80,0,0,2309,2310,3,388,194,0,2310,
2312,5,81,0,0,2311,2313,3,394,197,0,2312,2311,1,0,0,0,2312,2313,1,0,0,0,
2313,2336,1,0,0,0,2314,2316,5,84,0,0,2315,2317,3,40,20,0,2316,2315,1,0,0,
0,2316,2317,1,0,0,0,2317,2318,1,0,0,0,2318,2319,5,123,0,0,2319,2321,5,76,
0,0,2320,2322,3,422,211,0,2321,2320,1,0,0,0,2321,2322,1,0,0,0,2322,2323,
1,0,0,0,2323,2325,5,77,0,0,2324,2326,3,394,197,0,2325,2324,1,0,0,0,2325,
2326,1,0,0,0,2326,2336,1,0,0,0,2327,2329,5,87,0,0,2328,2330,3,40,20,0,2329,
2328,1,0,0,0,2329,2330,1,0,0,0,2330,2331,1,0,0,0,2331,2333,5,123,0,0,2332,
2334,3,394,197,0,2333,2332,1,0,0,0,2333,2334,1,0,0,0,2334,2336,1,0,0,0,2335,
2298,1,0,0,0,2335,2303,1,0,0,0,2335,2308,1,0,0,0,2335,2314,1,0,0,0,2335,
2327,1,0,0,0,2336,395,1,0,0,0,2337,2342,3,54,27,0,2338,2339,5,80,0,0,2339,
2341,5,81,0,0,2340,2338,1,0,0,0,2341,2344,1,0,0,0,2342,2340,1,0,0,0,2342,
2343,1,0,0,0,2343,2345,1,0,0,0,2344,2342,1,0,0,0,2345,2346,5,84,0,0,2346,
2347,5,26,0,0,2347,2373,1,0,0,0,2348,2353,3,10,5,0,2349,2350,5,80,0,0,2350,
2352,5,81,0,0,2351,2349,1,0,0,0,2352,2355,1,0,0,0,2353,2351,1,0,0,0,2353,
2354,1,0,0,0,2354,2356,1,0,0,0,2355,2353,1,0,0,0,2356,2357,5,84,0,0,2357,
2358,5,26,0,0,2358,2373,1,0,0,0,2359,2364,5,20,0,0,2360,2361,5,80,0,0,2361,
2363,5,81,0,0,2362,2360,1,0,0,0,2363,2366,1,0,0,0,2364,2362,1,0,0,0,2364,
2365,1,0,0,0,2365,2367,1,0,0,0,2366,2364,1,0,0,0,2367,2368,5,84,0,0,2368,
2373,5,26,0,0,2369,2370,5,65,0,0,2370,2371,5,84,0,0,2371,2373,5,26,0,0,2372,
2337,1,0,0,0,2372,2348,1,0,0,0,2372,2359,1,0,0,0,2372,2369,1,0,0,0,2373,
397,1,0,0,0,2374,2384,3,400,200,0,2375,2376,3,58,29,0,2376,2377,5,84,0,0,
2377,2378,3,400,200,0,2378,2384,1,0,0,0,2379,2380,3,390,195,0,2380,2381,
5,84,0,0,2381,2382,3,400,200,0,2382,2384,1,0,0,0,2383,2374,1,0,0,0,2383,
2375,1,0,0,0,2383,2379,1,0,0,0,2384,399,1,0,0,0,2385,2387,5,48,0,0,2386,
2388,3,40,20,0,2387,2386,1,0,0,0,2387,2388,1,0,0,0,2388,2389,1,0,0,0,2389,
2390,3,402,201,0,2390,2392,5,76,0,0,2391,2393,3,422,211,0,2392,2391,1,0,
0,0,2392,2393,1,0,0,0,2393,2394,1,0,0,0,2394,2396,5,77,0,0,2395,2397,3,110,
55,0,2396,2395,1,0,0,0,2396,2397,1,0,0,0,2397,401,1,0,0,0,2398,2400,3,254,
127,0,2399,2398,1,0,0,0,2400,2403,1,0,0,0,2401,2399,1,0,0,0,2401,2402,1,
0,0,0,2402,2404,1,0,0,0,2403,2401,1,0,0,0,2404,2415,5,123,0,0,2405,2409,
5,84,0,0,2406,2408,3,254,127,0,2407,2406,1,0,0,0,2408,2411,1,0,0,0,2409,
2407,1,0,0,0,2409,2410,1,0,0,0,2410,2412,1,0,0,0,2411,2409,1,0,0,0,2412,
2414,5,123,0,0,2413,2405,1,0,0,0,2414,2417,1,0,0,0,2415,2413,1,0,0,0,2415,
2416,1,0,0,0,2416,2419,1,0,0,0,2417,2415,1,0,0,0,2418,2420,3,404,202,0,2419,
2418,1,0,0,0,2419,2420,1,0,0,0,2420,403,1,0,0,0,2421,2424,3,40,20,0,2422,
2424,5,4,0,0,2423,2421,1,0,0,0,2423,2422,1,0,0,0,2424,405,1,0,0,0,2425,2428,
3,408,204,0,2426,2428,3,410,205,0,2427,2425,1,0,0,0,2427,2426,1,0,0,0,2428,
407,1,0,0,0,2429,2430,5,48,0,0,2430,2431,3,8,4,0,2431,2433,3,412,206,0,2432,
2434,3,30,15,0,2433,2432,1,0,0,0,2433,2434,1,0,0,0,2434,2442,1,0,0,0,2435,
2436,5,48,0,0,2436,2437,3,22,11,0,2437,2439,3,412,206,0,2438,2440,3,30,15,
0,2439,2438,1,0,0,0,2439,2440,1,0,0,0,2440,2442,1,0,0,0,2441,2429,1,0,0,
0,2441,2435,1,0,0,0,2442,409,1,0,0,0,2443,2444,5,48,0,0,2444,2445,3,8,4,
0,2445,2446,3,30,15,0,2446,2447,3,272,136,0,2447,2454,1,0,0,0,2448,2449,
5,48,0,0,2449,2450,3,20,10,0,2450,2451,3,30,15,0,2451,2452,3,272,136,0,2452,
2454,1,0,0,0,2453,2443,1,0,0,0,2453,2448,1,0,0,0,2454,411,1,0,0,0,2455,2459,
3,414,207,0,2456,2458,3,414,207,0,2457,2456,1,0,0,0,2458,2461,1,0,0,0,2459,
2457,1,0,0,0,2459,2460,1,0,0,0,2460,413,1,0,0,0,2461,2459,1,0,0,0,2462,2464,
3,254,127,0,2463,2462,1,0,0,0,2464,2467,1,0,0,0,2465,2463,1,0,0,0,2465,2466,
1,0,0,0,2466,2468,1,0,0,0,2467,2465,1,0,0,0,2468,2469,5,80,0,0,2469,2470,
3,388,194,0,2470,2471,5,81,0,0,2471,415,1,0,0,0,2472,2473,3,58,29,0,2473,
2474,5,80,0,0,2474,2475,3,388,194,0,2475,2476,5,81,0,0,2476,2488,1,0,0,0,
2477,2478,3,392,196,0,2478,2479,5,80,0,0,2479,2480,3,388,194,0,2480,2481,
5,81,0,0,2481,2488,1,0,0,0,2482,2483,3,410,205,0,2483,2484,5,80,0,0,2484,
2485,3,388,194,0,2485,2486,5,81,0,0,2486,2488,1,0,0,0,2487,2472,1,0,0,0,
2487,2477,1,0,0,0,2487,2482,1,0,0,0,2488,417,1,0,0,0,2489,2490,3,390,195,
0,2490,2491,5,84,0,0,2491,2492,5,123,0,0,2492,2503,1,0,0,0,2493,2494,5,57,
0,0,2494,2495,5,84,0,0,2495,2503,5,123,0,0,2496,2497,3,54,27,0,2497,2498,
5,84,0,0,2498,2499,5,57,0,0,2499,2500,5,84,0,0,2500,2501,5,123,0,0,2501,
2503,1,0,0,0,2502,2489,1,0,0,0,2502,2493,1,0,0,0,2502,2496,1,0,0,0,2503,
419,1,0,0,0,2504,2505,3,60,30,0,2505,2507,5,76,0,0,2506,2508,3,422,211,0,
2507,2506,1,0,0,0,2507,2508,1,0,0,0,2508,2509,1,0,0,0,2509,2510,5,77,0,0,
2510,2573,1,0,0,0,2511,2512,3,54,27,0,2512,2514,5,84,0,0,2513,2515,3,40,
20,0,2514,2513,1,0,0,0,2514,2515,1,0,0,0,2515,2516,1,0,0,0,2516,2517,5,123,
0,0,2517,2519,5,76,0,0,2518,2520,3,422,211,0,2519,2518,1,0,0,0,2519,2520,
1,0,0,0,2520,2521,1,0,0,0,2521,2522,5,77,0,0,2522,2573,1,0,0,0,2523,2524,
3,58,29,0,2524,2526,5,84,0,0,2525,2527,3,40,20,0,2526,2525,1,0,0,0,2526,
2527,1,0,0,0,2527,2528,1,0,0,0,2528,2529,5,123,0,0,2529,2531,5,76,0,0,2530,
2532,3,422,211,0,2531,2530,1,0,0,0,2531,2532,1,0,0,0,2532,2533,1,0,0,0,2533,
2534,5,77,0,0,2534,2573,1,0,0,0,2535,2536,3,390,195,0,2536,2538,5,84,0,0,
2537,2539,3,40,20,0,2538,2537,1,0,0,0,2538,2539,1,0,0,0,2539,2540,1,0,0,
0,2540,2541,5,123,0,0,2541,2543,5,76,0,0,2542,2544,3,422,211,0,2543,2542,
1,0,0,0,2543,2544,1,0,0,0,2544,2545,1,0,0,0,2545,2546,5,77,0,0,2546,2573,
1,0,0,0,2547,2548,5,57,0,0,2548,2550,5,84,0,0,2549,2551,3,40,20,0,2550,2549,
1,0,0,0,2550,2551,1,0,0,0,2551,2552,1,0,0,0,2552,2553,5,123,0,0,2553,2555,
5,76,0,0,2554,2556,3,422,211,0,2555,2554,1,0,0,0,2555,2556,1,0,0,0,2556,
2557,1,0,0,0,2557,2573,5,77,0,0,2558,2559,3,54,27,0,2559,2560,5,84,0,0,2560,
2561,5,57,0,0,2561,2563,5,84,0,0,2562,2564,3,40,20,0,2563,2562,1,0,0,0,2563,
2564,1,0,0,0,2564,2565,1,0,0,0,2565,2566,5,123,0,0,2566,2568,5,76,0,0,2567,
2569,3,422,211,0,2568,2567,1,0,0,0,2568,2569,1,0,0,0,2569,2570,1,0,0,0,2570,
2571,5,77,0,0,2571,2573,1,0,0,0,2572,2504,1,0,0,0,2572,2511,1,0,0,0,2572,
2523,1,0,0,0,2572,2535,1,0,0,0,2572,2547,1,0,0,0,2572,2558,1,0,0,0,2573,
421,1,0,0,0,2574,2579,3,388,194,0,2575,2576,5,83,0,0,2576,2578,3,388,194,
0,2577,2575,1,0,0,0,2578,2581,1,0,0,0,2579,2577,1,0,0,0,2579,2580,1,0,0,
0,2580,423,1,0,0,0,2581,2579,1,0,0,0,2582,2583,3,58,29,0,2583,2585,5,87,
0,0,2584,2586,3,40,20,0,2585,2584,1,0,0,0,2585,2586,1,0,0,0,2586,2587,1,
0,0,0,2587,2588,5,123,0,0,2588,2630,1,0,0,0,2589,2590,3,390,195,0,2590,2592,
5,87,0,0,2591,2593,3,40,20,0,2592,2591,1,0,0,0,2592,2593,1,0,0,0,2593,2594,
1,0,0,0,2594,2595,5,123,0,0,2595,2630,1,0,0,0,2596,2597,3,16,8,0,2597,2599,
5,87,0,0,2598,2600,3,40,20,0,2599,2598,1,0,0,0,2599,2600,1,0,0,0,2600,2601,
1,0,0,0,2601,2602,5,123,0,0,2602,2630,1,0,0,0,2603,2604,5,57,0,0,2604,2606,
5,87,0,0,2605,2607,3,40,20,0,2606,2605,1,0,0,0,2606,2607,1,0,0,0,2607,2608,
1,0,0,0,2608,2630,5,123,0,0,2609,2610,3,54,27,0,2610,2611,5,84,0,0,2611,
2612,5,57,0,0,2612,2614,5,87,0,0,2613,2615,3,40,20,0,2614,2613,1,0,0,0,2614,
2615,1,0,0,0,2615,2616,1,0,0,0,2616,2617,5,123,0,0,2617,2630,1,0,0,0,2618,
2619,3,22,11,0,2619,2621,5,87,0,0,2620,2622,3,40,20,0,2621,2620,1,0,0,0,
2621,2622,1,0,0,0,2622,2623,1,0,0,0,2623,2624,5,48,0,0,2624,2630,1,0,0,0,
2625,2626,3,28,14,0,2626,2627,5,87,0,0,2627,2628,5,48,0,0,2628,2630,1,0,
0,0,2629,2582,1,0,0,0,2629,2589,1,0,0,0,2629,2596,1,0,0,0,2629,2603,1,0,
0,0,2629,2609,1,0,0,0,2629,2618,1,0,0,0,2629,2625,1,0,0,0,2630,425,1,0,0,
0,2631,2633,3,390,195,0,2632,2634,3,428,214,0,2633,2632,1,0,0,0,2633,2634,
1,0,0,0,2634,2640,1,0,0,0,2635,2637,3,58,29,0,2636,2638,3,428,214,0,2637,
2636,1,0,0,0,2637,2638,1,0,0,0,2638,2640,1,0,0,0,2639,2631,1,0,0,0,2639,
2635,1,0,0,0,2640,427,1,0,0,0,2641,2643,5,102,0,0,2642,2644,3,428,214,0,
2643,2642,1,0,0,0,2643,2644,1,0,0,0,2644,2650,1,0,0,0,2645,2647,5,103,0,
0,2646,2648,3,428,214,0,2647,2646,1,0,0,0,2647,2648,1,0,0,0,2648,2650,1,
0,0,0,2649,2641,1,0,0,0,2649,2645,1,0,0,0,2650,429,1,0,0,0,2651,2652,3,426,
213,0,2652,2653,5,102,0,0,2653,431,1,0,0,0,2654,2655,3,426,213,0,2655,2656,
5,103,0,0,2656,433,1,0,0,0,2657,2665,3,436,218,0,2658,2665,3,438,219,0,2659,
2660,5,104,0,0,2660,2665,3,434,217,0,2661,2662,5,105,0,0,2662,2665,3,434,
217,0,2663,2665,3,440,220,0,2664,2657,1,0,0,0,2664,2658,1,0,0,0,2664,2659,
1,0,0,0,2664,2661,1,0,0,0,2664,2663,1,0,0,0,2665,435,1,0,0,0,2666,2667,5,
102,0,0,2667,2668,3,434,217,0,2668,437,1,0,0,0,2669,2670,5,103,0,0,2670,
2671,3,434,217,0,2671,439,1,0,0,0,2672,2680,3,426,213,0,2673,2674,5,92,0,
0,2674,2680,3,434,217,0,2675,2676,5,91,0,0,2676,2680,3,434,217,0,2677,2680,
3,442,221,0,2678,2680,3,486,243,0,2679,2672,1,0,0,0,2679,2673,1,0,0,0,2679,
2675,1,0,0,0,2679,2677,1,0,0,0,2679,2678,1,0,0,0,2680,441,1,0,0,0,2681,2682,
5,76,0,0,2682,2683,3,8,4,0,2683,2684,5,77,0,0,2684,2685,3,434,217,0,2685,
2709,1,0,0,0,2686,2687,5,76,0,0,2687,2691,3,16,8,0,2688,2690,3,38,19,0,2689,
2688,1,0,0,0,2690,2693,1,0,0,0,2691,2689,1,0,0,0,2691,2692,1,0,0,0,2692,
2694,1,0,0,0,2693,2691,1,0,0,0,2694,2695,5,77,0,0,2695,2696,3,440,220,0,
2696,2709,1,0,0,0,2697,2698,5,76,0,0,2698,2702,3,16,8,0,2699,2701,3,38,19,
0,2700,2699,1,0,0,0,2701,2704,1,0,0,0,2702,2700,1,0,0,0,2702,2703,1,0,0,
0,2703,2705,1,0,0,0,2704,2702,1,0,0,0,2705,2706,5,77,0,0,2706,2707,3,474,
237,0,2707,2709,1,0,0,0,2708,2681,1,0,0,0,2708,2686,1,0,0,0,2708,2697,1,
0,0,0,2709,443,1,0,0,0,2710,2711,6,222,-1,0,2711,2712,3,434,217,0,2712,2724,
1,0,0,0,2713,2714,10,3,0,0,2714,2715,5,106,0,0,2715,2723,3,434,217,0,2716,
2717,10,2,0,0,2717,2718,5,107,0,0,2718,2723,3,434,217,0,2719,2720,10,1,0,
0,2720,2721,5,111,0,0,2721,2723,3,434,217,0,2722,2713,1,0,0,0,2722,2716,
1,0,0,0,2722,2719,1,0,0,0,2723,2726,1,0,0,0,2724,2722,1,0,0,0,2724,2725,
1,0,0,0,2725,445,1,0,0,0,2726,2724,1,0,0,0,2727,2728,6,223,-1,0,2728,2729,
3,444,222,0,2729,2738,1,0,0,0,2730,2731,10,2,0,0,2731,2732,5,104,0,0,2732,
2737,3,444,222,0,2733,2734,10,1,0,0,2734,2735,5,105,0,0,2735,2737,3,444,
222,0,2736,2730,1,0,0,0,2736,2733,1,0,0,0,2737,2740,1,0,0,0,2738,2736,1,
0,0,0,2738,2739,1,0,0,0,2739,447,1,0,0,0,2740,2738,1,0,0,0,2741,2742,6,224,
-1,0,2742,2743,3,446,223,0,2743,2759,1,0,0,0,2744,2745,10,3,0,0,2745,2746,
5,90,0,0,2746,2747,5,90,0,0,2747,2758,3,446,223,0,2748,2749,10,2,0,0,2749,
2750,5,89,0,0,2750,2751,5,89,0,0,2751,2758,3,446,223,0,2752,2753,10,1,0,
0,2753,2754,5,89,0,0,2754,2755,5,89,0,0,2755,2756,5,89,0,0,2756,2758,3,446,
223,0,2757,2744,1,0,0,0,2757,2748,1,0,0,0,2757,2752,1,0,0,0,2758,2761,1,
0,0,0,2759,2757,1,0,0,0,2759,2760,1,0,0,0,2760,449,1,0,0,0,2761,2759,1,0,
0,0,2762,2763,6,225,-1,0,2763,2764,3,448,224,0,2764,2785,1,0,0,0,2765,2766,
10,5,0,0,2766,2767,5,90,0,0,2767,2784,3,448,224,0,2768,2769,10,4,0,0,2769,
2770,5,89,0,0,2770,2784,3,448,224,0,2771,2772,10,3,0,0,2772,2773,5,97,0,
0,2773,2784,3,448,224,0,2774,2775,10,2,0,0,2775,2776,5,98,0,0,2776,2784,
3,448,224,0,2777,2778,10,1,0,0,2778,2781,5,43,0,0,2779,2782,3,16,8,0,2780,
2782,3,384,192,0,2781,2779,1,0,0,0,2781,2780,1,0,0,0,2782,2784,1,0,0,0,2783,
2765,1,0,0,0,2783,2768,1,0,0,0,2783,2771,1,0,0,0,2783,2774,1,0,0,0,2783,
2777,1,0,0,0,2784,2787,1,0,0,0,2785,2783,1,0,0,0,2785,2786,1,0,0,0,2786,
451,1,0,0,0,2787,2785,1,0,0,0,2788,2789,6,226,-1,0,2789,2790,3,450,225,0,
2790,2799,1,0,0,0,2791,2792,10,2,0,0,2792,2793,5,96,0,0,2793,2798,3,450,
225,0,2794,2795,10,1,0,0,2795,2796,5,99,0,0,2796,2798,3,450,225,0,2797,2791,
1,0,0,0,2797,2794,1,0,0,0,2798,2801,1,0,0,0,2799,2797,1,0,0,0,2799,2800,
1,0,0,0,2800,453,1,0,0,0,2801,2799,1,0,0,0,2802,2803,6,227,-1,0,2803,2804,
3,452,226,0,2804,2810,1,0,0,0,2805,2806,10,1,0,0,2806,2807,5,108,0,0,2807,
2809,3,452,226,0,2808,2805,1,0,0,0,2809,2812,1,0,0,0,2810,2808,1,0,0,0,2810,
2811,1,0,0,0,2811,455,1,0,0,0,2812,2810,1,0,0,0,2813,2814,6,228,-1,0,2814,
2815,3,454,227,0,2815,2821,1,0,0,0,2816,2817,10,1,0,0,2817,2818,5,110,0,
0,2818,2820,3,454,227,0,2819,2816,1,0,0,0,2820,2823,1,0,0,0,2821,2819,1,
0,0,0,2821,2822,1,0,0,0,2822,457,1,0,0,0,2823,2821,1,0,0,0,2824,2825,6,229,
-1,0,2825,2826,3,456,228,0,2826,2832,1,0,0,0,2827,2828,10,1,0,0,2828,2829,
5,109,0,0,2829,2831,3,456,228,0,2830,2827,1,0,0,0,2831,2834,1,0,0,0,2832,
2830,1,0,0,0,2832,2833,1,0,0,0,2833,459,1,0,0,0,2834,2832,1,0,0,0,2835,2836,
6,230,-1,0,2836,2837,3,458,229,0,2837,2843,1,0,0,0,2838,2839,10,1,0,0,2839,
2840,5,100,0,0,2840,2842,3,458,229,0,2841,2838,1,0,0,0,2842,2845,1,0,0,0,
2843,2841,1,0,0,0,2843,2844,1,0,0,0,2844,461,1,0,0,0,2845,2843,1,0,0,0,2846,
2847,6,231,-1,0,2847,2848,3,460,230,0,2848,2854,1,0,0,0,2849,2850,10,1,0,
0,2850,2851,5,101,0,0,2851,2853,3,460,230,0,2852,2849,1,0,0,0,2853,2856,
1,0,0,0,2854,2852,1,0,0,0,2854,2855,1,0,0,0,2855,463,1,0,0,0,2856,2854,1,
0,0,0,2857,2871,3,462,231,0,2858,2859,3,462,231,0,2859,2860,5,93,0,0,2860,
2861,3,388,194,0,2861,2862,5,94,0,0,2862,2863,3,464,232,0,2863,2871,1,0,
0,0,2864,2865,3,462,231,0,2865,2866,5,93,0,0,2866,2867,3,388,194,0,2867,
2868,5,94,0,0,2868,2869,3,474,237,0,2869,2871,1,0,0,0,2870,2857,1,0,0,0,
2870,2858,1,0,0,0,2870,2864,1,0,0,0,2871,465,1,0,0,0,2872,2875,3,464,232,
0,2873,2875,3,468,234,0,2874,2872,1,0,0,0,2874,2873,1,0,0,0,2875,467,1,0,
0,0,2876,2877,3,470,235,0,2877,2878,3,472,236,0,2878,2879,3,388,194,0,2879,
469,1,0,0,0,2880,2884,3,58,29,0,2881,2884,3,418,209,0,2882,2884,3,416,208,
0,2883,2880,1,0,0,0,2883,2881,1,0,0,0,2883,2882,1,0,0,0,2884,471,1,0,0,0,
2885,2886,7,5,0,0,2886,473,1,0,0,0,2887,2888,3,476,238,0,2888,2889,5,95,
0,0,2889,2890,3,484,242,0,2890,475,1,0,0,0,2891,2893,5,76,0,0,2892,2894,
3,478,239,0,2893,2892,1,0,0,0,2893,2894,1,0,0,0,2894,2895,1,0,0,0,2895,2898,
5,77,0,0,2896,2898,5,123,0,0,2897,2891,1,0,0,0,2897,2896,1,0,0,0,2898,477,
1,0,0,0,2899,2904,3,480,240,0,2900,2901,5,83,0,0,2901,2903,3,480,240,0,2902,
2900,1,0,0,0,2903,2906,1,0,0,0,2904,2902,1,0,0,0,2904,2905,1,0,0,0,2905,
2916,1,0,0,0,2906,2904,1,0,0,0,2907,2912,5,123,0,0,2908,2909,5,83,0,0,2909,
2911,5,123,0,0,2910,2908,1,0,0,0,2911,2914,1,0,0,0,2912,2910,1,0,0,0,2912,
2913,1,0,0,0,2913,2916,1,0,0,0,2914,2912,1,0,0,0,2915,2899,1,0,0,0,2915,
2907,1,0,0,0,2916,479,1,0,0,0,2917,2919,3,164,82,0,2918,2917,1,0,0,0,2919,
2922,1,0,0,0,2920,2918,1,0,0,0,2920,2921,1,0,0,0,2921,2923,1,0,0,0,2922,
2920,1,0,0,0,2923,2924,3,482,241,0,2924,2925,3,124,62,0,2925,2928,1,0,0,
0,2926,2928,3,162,81,0,2927,2920,1,0,0,0,2927,2926,1,0,0,0,2928,481,1,0,
0,0,2929,2932,3,128,64,0,2930,2932,5,15,0,0,2931,2929,1,0,0,0,2931,2930,
1,0,0,0,2932,483,1,0,0,0,2933,2936,3,388,194,0,2934,2936,3,276,138,0,2935,
2933,1,0,0,0,2935,2934,1,0,0,0,2936,485,1,0,0,0,2937,2938,5,58,0,0,2938,
2939,5,76,0,0,2939,2940,3,388,194,0,2940,2941,5,77,0,0,2941,2942,3,316,158,
0,2942,487,1,0,0,0,2943,2944,3,388,194,0,2944,489,1,0,0,0,360,502,507,511,
520,526,531,534,539,544,549,552,557,562,569,574,581,586,588,595,609,614,
622,629,635,640,650,653,667,672,677,682,688,693,698,703,708,713,722,726,
729,734,740,746,754,763,774,803,808,812,820,827,836,850,853,865,868,884,
889,896,901,907,910,913,916,930,941,955,964,971,980,987,992,1007,1014,1020,
1024,1028,1032,1036,1041,1048,1051,1055,1058,1064,1069,1072,1076,1080,1086,
1091,1093,1102,1109,1125,1131,1134,1139,1143,1150,1153,1157,1162,1168,1177,
1183,1190,1195,1202,1210,1220,1225,1229,1239,1244,1252,1255,1262,1265,1273,
1276,1281,1286,1292,1296,1301,1306,1311,1317,1323,1326,1329,1338,1344,1350,
1353,1356,1364,1370,1376,1380,1386,1395,1401,1408,1413,1420,1432,1439,1444,
1452,1457,1463,1466,1469,1482,1493,1500,1510,1515,1526,1531,1544,1549,1561,
1571,1576,1584,1587,1594,1602,1608,1617,1627,1631,1634,1643,1657,1660,1669,
1674,1682,1688,1692,1697,1702,1706,1717,1724,1739,1761,1789,1804,1813,1821,
1825,1834,1843,1854,1858,1884,1888,1893,1897,1901,1909,1913,1917,1924,1933,
1954,1960,1966,1991,1996,2002,2014,2025,2035,2038,2043,2052,2057,2061,2073,
2077,2081,2085,2089,2095,2101,2105,2111,2117,2123,2129,2137,2144,2151,2156,
2160,2165,2170,2174,2179,2184,2188,2193,2198,2202,2207,2212,2216,2223,2228,
2232,2237,2241,2246,2250,2255,2259,2264,2268,2275,2279,2284,2288,2294,2296,
2301,2306,2312,2316,2321,2325,2329,2333,2335,2342,2353,2364,2372,2383,2387,
2392,2396,2401,2409,2415,2419,2423,2427,2433,2439,2441,2453,2459,2465,2487,
2502,2507,2514,2519,2526,2531,2538,2543,2550,2555,2563,2568,2572,2579,2585,
2592,2599,2606,2614,2621,2629,2633,2637,2639,2643,2647,2649,2664,2679,2691,
2702,2708,2722,2724,2736,2738,2757,2759,2781,2783,2785,2797,2799,2810,2821,
2832,2843,2854,2870,2874,2883,2893,2897,2904,2912,2915,2920,2927,2931,2935];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class Java20Parser extends antlr4.Parser {

    static grammarFileName = "Java20Parser.g4";
    static literalNames = [ null, "'exports'", "'module'", "'non-sealed'", 
                            "'<>'", "'open'", "'opens'", "'permits'", "'provides'", 
                            "'record'", "'requires'", "'sealed'", "'to'", 
                            "'transitive'", "'uses'", "'var'", "'with'", 
                            "'yield'", "'abstract'", "'assert'", "'boolean'", 
                            "'break'", "'byte'", "'case'", "'catch'", "'char'", 
                            "'class'", "'const'", "'continue'", "'default'", 
                            "'do'", "'double'", "'else'", "'enum'", "'extends'", 
                            "'final'", "'finally'", "'float'", "'for'", 
                            "'if'", "'goto'", "'implements'", "'import'", 
                            "'instanceof'", "'int'", "'interface'", "'long'", 
                            "'native'", "'new'", "'package'", "'private'", 
                            "'protected'", "'public'", "'return'", "'short'", 
                            "'static'", "'strictfp'", "'super'", "'switch'", 
                            "'synchronized'", "'this'", "'throw'", "'throws'", 
                            "'transient'", "'try'", "'void'", "'volatile'", 
                            "'while'", "'_'", null, null, null, null, null, 
                            null, "'null'", "'('", "')'", "'{'", "'}'", 
                            "'['", "']'", "';'", "','", "'.'", "'...'", 
                            "'@'", "'::'", "'='", "'>'", "'<'", "'!'", "'~'", 
                            "'?'", "':'", "'->'", "'=='", "'<='", "'>='", 
                            "'!='", "'&&'", "'||'", "'++'", "'--'", "'+'", 
                            "'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", 
                            "'+='", "'-='", "'*='", "'/='", "'&='", "'|='", 
                            "'^='", "'%='", "'<<='", "'>>='", "'>>>='" ];
    static symbolicNames = [ null, "EXPORTS", "MODULE", "NONSEALED", "OACA", 
                             "OPEN", "OPENS", "PERMITS", "PROVIDES", "RECORD", 
                             "REQUIRES", "SEALED", "TO", "TRANSITIVE", "USES", 
                             "VAR", "WITH", "YIELD", "ABSTRACT", "ASSERT", 
                             "BOOLEAN", "BREAK", "BYTE", "CASE", "CATCH", 
                             "CHAR", "CLASS", "CONST", "CONTINUE", "DEFAULT", 
                             "DO", "DOUBLE", "ELSE", "ENUM", "EXTENDS", 
                             "FINAL", "FINALLY", "FLOAT", "FOR", "IF", "GOTO", 
                             "IMPLEMENTS", "IMPORT", "INSTANCEOF", "INT", 
                             "INTERFACE", "LONG", "NATIVE", "NEW", "PACKAGE", 
                             "PRIVATE", "PROTECTED", "PUBLIC", "RETURN", 
                             "SHORT", "STATIC", "STRICTFP", "SUPER", "SWITCH", 
                             "SYNCHRONIZED", "THIS", "THROW", "THROWS", 
                             "TRANSIENT", "TRY", "VOID", "VOLATILE", "WHILE", 
                             "UNDER_SCORE", "IntegerLiteral", "FloatingPointLiteral", 
                             "BooleanLiteral", "CharacterLiteral", "StringLiteral", 
                             "TextBlock", "NullLiteral", "LPAREN", "RPAREN", 
                             "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", 
                             "COMMA", "DOT", "ELLIPSIS", "AT", "COLONCOLON", 
                             "ASSIGN", "GT", "LT", "BANG", "TILDE", "QUESTION", 
                             "COLON", "ARROW", "EQUAL", "LE", "GE", "NOTEQUAL", 
                             "AND", "OR", "INC", "DEC", "ADD", "SUB", "MUL", 
                             "DIV", "BITAND", "BITOR", "CARET", "MOD", "ADD_ASSIGN", 
                             "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", 
                             "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN", 
                             "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", "Identifier", 
                             "WS", "COMMENT", "LINE_COMMENT" ];
    static ruleNames = [ "start_", "literal", "typeIdentifier", "unqualifiedMethodIdentifier", 
                         "primitiveType", "numericType", "integralType", 
                         "floatingPointType", "referenceType", "coit", "classOrInterfaceType", 
                         "classType", "interfaceType", "typeVariable", "arrayType", 
                         "dims", "typeParameter", "typeParameterModifier", 
                         "typeBound", "additionalBound", "typeArguments", 
                         "typeArgumentList", "typeArgument", "wildcard", 
                         "wildcardBounds", "moduleName", "packageName", 
                         "typeName", "packageOrTypeName", "expressionName", 
                         "methodName", "ambiguousName", "compilationUnit", 
                         "ordinaryCompilationUnit", "modularCompilationUnit", 
                         "packageDeclaration", "packageModifier", "importDeclaration", 
                         "singleTypeImportDeclaration", "typeImportOnDemandDeclaration", 
                         "singleStaticImportDeclaration", "staticImportOnDemandDeclaration", 
                         "topLevelClassOrInterfaceDeclaration", "moduleDeclaration", 
                         "moduleDirective", "requiresModifier", "classDeclaration", 
                         "normalClassDeclaration", "classModifier", "typeParameters", 
                         "typeParameterList", "classExtends", "classImplements", 
                         "interfaceTypeList", "classPermits", "classBody", 
                         "classBodyDeclaration", "classMemberDeclaration", 
                         "fieldDeclaration", "fieldModifier", "variableDeclaratorList", 
                         "variableDeclarator", "variableDeclaratorId", "variableInitializer", 
                         "unannType", "unannPrimitiveType", "unannReferenceType", 
                         "unannClassOrInterfaceType", "uCOIT", "unannClassType", 
                         "unannInterfaceType", "unannTypeVariable", "unannArrayType", 
                         "methodDeclaration", "methodModifier", "methodHeader", 
                         "result", "methodDeclarator", "receiverParameter", 
                         "formalParameterList", "formalParameter", "variableArityParameter", 
                         "variableModifier", "throwsT", "exceptionTypeList", 
                         "exceptionType", "methodBody", "instanceInitializer", 
                         "staticInitializer", "constructorDeclaration", 
                         "constructorModifier", "constructorDeclarator", 
                         "simpleTypeName", "constructorBody", "explicitConstructorInvocation", 
                         "enumDeclaration", "enumBody", "enumConstantList", 
                         "enumConstant", "enumConstantModifier", "enumBodyDeclarations", 
                         "recordDeclaration", "recordHeader", "recordComponentList", 
                         "recordComponent", "variableArityRecordComponent", 
                         "recordComponentModifier", "recordBody", "recordBodyDeclaration", 
                         "compactConstructorDeclaration", "interfaceDeclaration", 
                         "normalInterfaceDeclaration", "interfaceModifier", 
                         "interfaceExtends", "interfacePermits", "interfaceBody", 
                         "interfaceMemberDeclaration", "constantDeclaration", 
                         "constantModifier", "interfaceMethodDeclaration", 
                         "interfaceMethodModifier", "annotationInterfaceDeclaration", 
                         "annotationInterfaceBody", "annotationInterfaceMemberDeclaration", 
                         "annotationInterfaceElementDeclaration", "annotationInterfaceElementModifier", 
                         "defaultValue", "annotation", "normalAnnotation", 
                         "elementValuePairList", "elementValuePair", "elementValue", 
                         "elementValueArrayInitializer", "elementValueList", 
                         "markerAnnotation", "singleElementAnnotation", 
                         "arrayInitializer", "variableInitializerList", 
                         "block", "blockStatements", "blockStatement", "localClassOrInterfaceDeclaration", 
                         "localVariableDeclaration", "localVariableType", 
                         "localVariableDeclarationStatement", "statement", 
                         "statementNoShortIf", "statementWithoutTrailingSubstatement", 
                         "emptyStatement_", "labeledStatement", "labeledStatementNoShortIf", 
                         "expressionStatement", "statementExpression", "ifThenStatement", 
                         "ifThenElseStatement", "ifThenElseStatementNoShortIf", 
                         "assertStatement", "switchStatement", "switchBlock", 
                         "switchRule", "switchBlockStatementGroup", "switchLabel", 
                         "caseConstant", "whileStatement", "whileStatementNoShortIf", 
                         "doStatement", "forStatement", "forStatementNoShortIf", 
                         "basicForStatement", "basicForStatementNoShortIf", 
                         "forInit", "forUpdate", "statementExpressionList", 
                         "enhancedForStatement", "enhancedForStatementNoShortIf", 
                         "breakStatement", "continueStatement", "returnStatement", 
                         "throwStatement", "synchronizedStatement", "tryStatement", 
                         "catches", "catchClause", "catchFormalParameter", 
                         "catchType", "finallyBlock", "tryWithResourcesStatement", 
                         "resourceSpecification", "resourceList", "resource", 
                         "variableAccess", "yieldStatement", "pattern", 
                         "typePattern", "expression", "primary", "primaryNoNewArray", 
                         "pNNA", "classLiteral", "classInstanceCreationExpression", 
                         "unqualifiedClassInstanceCreationExpression", "classOrInterfaceTypeToInstantiate", 
                         "typeArgumentsOrDiamond", "arrayCreationExpression", 
                         "arrayCreationExpressionWithoutInitializer", "arrayCreationExpressionWithInitializer", 
                         "dimExprs", "dimExpr", "arrayAccess", "fieldAccess", 
                         "methodInvocation", "argumentList", "methodReference", 
                         "postfixExpression", "pfE", "postIncrementExpression", 
                         "postDecrementExpression", "unaryExpression", "preIncrementExpression", 
                         "preDecrementExpression", "unaryExpressionNotPlusMinus", 
                         "castExpression", "multiplicativeExpression", "additiveExpression", 
                         "shiftExpression", "relationalExpression", "equalityExpression", 
                         "andExpression", "exclusiveOrExpression", "inclusiveOrExpression", 
                         "conditionalAndExpression", "conditionalOrExpression", 
                         "conditionalExpression", "assignmentExpression", 
                         "assignment", "leftHandSide", "assignmentOperator", 
                         "lambdaExpression", "lambdaParameters", "lambdaParameterList", 
                         "lambdaParameter", "lambdaParameterType", "lambdaBody", 
                         "switchExpression", "constantExpression" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = Java20Parser.ruleNames;
        this.literalNames = Java20Parser.literalNames;
        this.symbolicNames = Java20Parser.symbolicNames;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 222:
    	    		return this.multiplicativeExpression_sempred(localctx, predIndex);
    	case 223:
    	    		return this.additiveExpression_sempred(localctx, predIndex);
    	case 224:
    	    		return this.shiftExpression_sempred(localctx, predIndex);
    	case 225:
    	    		return this.relationalExpression_sempred(localctx, predIndex);
    	case 226:
    	    		return this.equalityExpression_sempred(localctx, predIndex);
    	case 227:
    	    		return this.andExpression_sempred(localctx, predIndex);
    	case 228:
    	    		return this.exclusiveOrExpression_sempred(localctx, predIndex);
    	case 229:
    	    		return this.inclusiveOrExpression_sempred(localctx, predIndex);
    	case 230:
    	    		return this.conditionalAndExpression_sempred(localctx, predIndex);
    	case 231:
    	    		return this.conditionalOrExpression_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    multiplicativeExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 3);
    		case 1:
    			return this.precpred(this._ctx, 2);
    		case 2:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    additiveExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 3:
    			return this.precpred(this._ctx, 2);
    		case 4:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    shiftExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 5:
    			return this.precpred(this._ctx, 3);
    		case 6:
    			return this.precpred(this._ctx, 2);
    		case 7:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    relationalExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 8:
    			return this.precpred(this._ctx, 5);
    		case 9:
    			return this.precpred(this._ctx, 4);
    		case 10:
    			return this.precpred(this._ctx, 3);
    		case 11:
    			return this.precpred(this._ctx, 2);
    		case 12:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    equalityExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 13:
    			return this.precpred(this._ctx, 2);
    		case 14:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    andExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 15:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    exclusiveOrExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 16:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    inclusiveOrExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 17:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    conditionalAndExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 18:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    conditionalOrExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 19:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	start_() {
	    let localctx = new Start_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, Java20Parser.RULE_start_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 490;
	        this.compilationUnit();
	        this.state = 491;
	        this.match(Java20Parser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, Java20Parser.RULE_literal);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 493;
	        _la = this._input.LA(1);
	        if(!(((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 127) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeIdentifier() {
	    let localctx = new TypeIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, Java20Parser.RULE_typeIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 495;
	        this.match(Java20Parser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unqualifiedMethodIdentifier() {
	    let localctx = new UnqualifiedMethodIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, Java20Parser.RULE_unqualifiedMethodIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 497;
	        this.match(Java20Parser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveType() {
	    let localctx = new PrimitiveTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, Java20Parser.RULE_primitiveType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 502;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 499;
	            this.annotation();
	            this.state = 504;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 507;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 22:
	        case 25:
	        case 31:
	        case 37:
	        case 44:
	        case 46:
	        case 54:
	            this.state = 505;
	            this.numericType();
	            break;
	        case 20:
	            this.state = 506;
	            this.match(Java20Parser.BOOLEAN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericType() {
	    let localctx = new NumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, Java20Parser.RULE_numericType);
	    try {
	        this.state = 511;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 22:
	        case 25:
	        case 44:
	        case 46:
	        case 54:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 509;
	            this.integralType();
	            break;
	        case 31:
	        case 37:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 510;
	            this.floatingPointType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integralType() {
	    let localctx = new IntegralTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, Java20Parser.RULE_integralType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 513;
	        _la = this._input.LA(1);
	        if(!(_la===22 || _la===25 || ((((_la - 44)) & ~0x1f) === 0 && ((1 << (_la - 44)) & 1029) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	floatingPointType() {
	    let localctx = new FloatingPointTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, Java20Parser.RULE_floatingPointType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 515;
	        _la = this._input.LA(1);
	        if(!(_la===31 || _la===37)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	referenceType() {
	    let localctx = new ReferenceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, Java20Parser.RULE_referenceType);
	    try {
	        this.state = 520;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 517;
	            this.classOrInterfaceType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 518;
	            this.typeVariable();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 519;
	            this.arrayType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	coit() {
	    let localctx = new CoitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, Java20Parser.RULE_coit);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 522;
	        this.match(Java20Parser.DOT);
	        this.state = 526;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 523;
	            this.annotation();
	            this.state = 528;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 529;
	        this.typeIdentifier();
	        this.state = 531;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	        if(la_===1) {
	            this.state = 530;
	            this.typeArguments();

	        }
	        this.state = 534;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
	        if(la_===1) {
	            this.state = 533;
	            this.coit();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classOrInterfaceType() {
	    let localctx = new ClassOrInterfaceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, Java20Parser.RULE_classOrInterfaceType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 539;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
	        if(la_===1) {
	            this.state = 536;
	            this.packageName();
	            this.state = 537;
	            this.match(Java20Parser.DOT);

	        }
	        this.state = 544;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 541;
	            this.annotation();
	            this.state = 546;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 547;
	        this.typeIdentifier();
	        this.state = 549;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
	        if(la_===1) {
	            this.state = 548;
	            this.typeArguments();

	        }
	        this.state = 552;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
	        if(la_===1) {
	            this.state = 551;
	            this.coit();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classType() {
	    let localctx = new ClassTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, Java20Parser.RULE_classType);
	    var _la = 0;
	    try {
	        this.state = 588;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 557;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===86) {
	                this.state = 554;
	                this.annotation();
	                this.state = 559;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 560;
	            this.typeIdentifier();
	            this.state = 562;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 561;
	                this.typeArguments();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 564;
	            this.packageName();
	            this.state = 565;
	            this.match(Java20Parser.DOT);
	            this.state = 569;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===86) {
	                this.state = 566;
	                this.annotation();
	                this.state = 571;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 572;
	            this.typeIdentifier();
	            this.state = 574;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 573;
	                this.typeArguments();
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 576;
	            this.classOrInterfaceType();
	            this.state = 577;
	            this.match(Java20Parser.DOT);
	            this.state = 581;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===86) {
	                this.state = 578;
	                this.annotation();
	                this.state = 583;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 584;
	            this.typeIdentifier();
	            this.state = 586;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 585;
	                this.typeArguments();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceType() {
	    let localctx = new InterfaceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, Java20Parser.RULE_interfaceType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 590;
	        this.classType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeVariable() {
	    let localctx = new TypeVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, Java20Parser.RULE_typeVariable);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 595;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 592;
	            this.annotation();
	            this.state = 597;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 598;
	        this.typeIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayType() {
	    let localctx = new ArrayTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, Java20Parser.RULE_arrayType);
	    try {
	        this.state = 609;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 600;
	            this.primitiveType();
	            this.state = 601;
	            this.dims();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 603;
	            this.classType();
	            this.state = 604;
	            this.dims();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 606;
	            this.typeVariable();
	            this.state = 607;
	            this.dims();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dims() {
	    let localctx = new DimsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, Java20Parser.RULE_dims);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 614;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 611;
	            this.annotation();
	            this.state = 616;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 617;
	        this.match(Java20Parser.LBRACK);
	        this.state = 618;
	        this.match(Java20Parser.RBRACK);
	        this.state = 629;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,22,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 622;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===86) {
	                    this.state = 619;
	                    this.annotation();
	                    this.state = 624;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 625;
	                this.match(Java20Parser.LBRACK);
	                this.state = 626;
	                this.match(Java20Parser.RBRACK); 
	            }
	            this.state = 631;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,22,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParameter() {
	    let localctx = new TypeParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, Java20Parser.RULE_typeParameter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 635;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 632;
	            this.typeParameterModifier();
	            this.state = 637;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 638;
	        this.typeIdentifier();
	        this.state = 640;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===34) {
	            this.state = 639;
	            this.typeBound();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParameterModifier() {
	    let localctx = new TypeParameterModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, Java20Parser.RULE_typeParameterModifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 642;
	        this.annotation();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeBound() {
	    let localctx = new TypeBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, Java20Parser.RULE_typeBound);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 644;
	        this.match(Java20Parser.EXTENDS);
	        this.state = 653;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 645;
	            this.typeVariable();
	            break;

	        case 2:
	            this.state = 646;
	            this.classOrInterfaceType();
	            this.state = 650;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===108) {
	                this.state = 647;
	                this.additionalBound();
	                this.state = 652;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	additionalBound() {
	    let localctx = new AdditionalBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, Java20Parser.RULE_additionalBound);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 655;
	        this.match(Java20Parser.BITAND);
	        this.state = 656;
	        this.interfaceType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeArguments() {
	    let localctx = new TypeArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, Java20Parser.RULE_typeArguments);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 658;
	        this.match(Java20Parser.LT);
	        this.state = 659;
	        this.typeArgumentList();
	        this.state = 660;
	        this.match(Java20Parser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeArgumentList() {
	    let localctx = new TypeArgumentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, Java20Parser.RULE_typeArgumentList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 662;
	        this.typeArgument();
	        this.state = 667;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===83) {
	            this.state = 663;
	            this.match(Java20Parser.COMMA);
	            this.state = 664;
	            this.typeArgument();
	            this.state = 669;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeArgument() {
	    let localctx = new TypeArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, Java20Parser.RULE_typeArgument);
	    try {
	        this.state = 672;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 670;
	            this.referenceType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 671;
	            this.wildcard();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wildcard() {
	    let localctx = new WildcardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, Java20Parser.RULE_wildcard);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 677;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 674;
	            this.annotation();
	            this.state = 679;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 680;
	        this.match(Java20Parser.QUESTION);
	        this.state = 682;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===34 || _la===57) {
	            this.state = 681;
	            this.wildcardBounds();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wildcardBounds() {
	    let localctx = new WildcardBoundsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, Java20Parser.RULE_wildcardBounds);
	    try {
	        this.state = 688;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 34:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 684;
	            this.match(Java20Parser.EXTENDS);
	            this.state = 685;
	            this.referenceType();
	            break;
	        case 57:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 686;
	            this.match(Java20Parser.SUPER);
	            this.state = 687;
	            this.referenceType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleName() {
	    let localctx = new ModuleNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, Java20Parser.RULE_moduleName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 690;
	        this.match(Java20Parser.Identifier);
	        this.state = 693;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===84) {
	            this.state = 691;
	            this.match(Java20Parser.DOT);
	            this.state = 692;
	            this.moduleName();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	packageName() {
	    let localctx = new PackageNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, Java20Parser.RULE_packageName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 695;
	        this.match(Java20Parser.Identifier);
	        this.state = 698;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
	        if(la_===1) {
	            this.state = 696;
	            this.match(Java20Parser.DOT);
	            this.state = 697;
	            this.packageName();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeName() {
	    let localctx = new TypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, Java20Parser.RULE_typeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 700;
	        this.packageName();
	        this.state = 703;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
	        if(la_===1) {
	            this.state = 701;
	            this.match(Java20Parser.DOT);
	            this.state = 702;
	            this.typeIdentifier();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	packageOrTypeName() {
	    let localctx = new PackageOrTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, Java20Parser.RULE_packageOrTypeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 705;
	        this.match(Java20Parser.Identifier);
	        this.state = 708;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
	        if(la_===1) {
	            this.state = 706;
	            this.match(Java20Parser.DOT);
	            this.state = 707;
	            this.packageOrTypeName();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionName() {
	    let localctx = new ExpressionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, Java20Parser.RULE_expressionName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 713;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	        if(la_===1) {
	            this.state = 710;
	            this.ambiguousName();
	            this.state = 711;
	            this.match(Java20Parser.DOT);

	        }
	        this.state = 715;
	        this.match(Java20Parser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodName() {
	    let localctx = new MethodNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, Java20Parser.RULE_methodName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 717;
	        this.unqualifiedMethodIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ambiguousName() {
	    let localctx = new AmbiguousNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, Java20Parser.RULE_ambiguousName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 719;
	        this.match(Java20Parser.Identifier);
	        this.state = 722;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
	        if(la_===1) {
	            this.state = 720;
	            this.match(Java20Parser.DOT);
	            this.state = 721;
	            this.ambiguousName();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compilationUnit() {
	    let localctx = new CompilationUnitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, Java20Parser.RULE_compilationUnit);
	    try {
	        this.state = 726;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 724;
	            this.ordinaryCompilationUnit();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 725;
	            this.modularCompilationUnit();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ordinaryCompilationUnit() {
	    let localctx = new OrdinaryCompilationUnitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, Java20Parser.RULE_ordinaryCompilationUnit);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 729;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        if(la_===1) {
	            this.state = 728;
	            this.packageDeclaration();

	        }
	        this.state = 734;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===42) {
	            this.state = 731;
	            this.importDeclaration();
	            this.state = 736;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 740;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 67373576) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 13504517) !== 0) || _la===82 || _la===86) {
	            this.state = 737;
	            this.topLevelClassOrInterfaceDeclaration();
	            this.state = 742;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modularCompilationUnit() {
	    let localctx = new ModularCompilationUnitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, Java20Parser.RULE_modularCompilationUnit);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 746;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===42) {
	            this.state = 743;
	            this.importDeclaration();
	            this.state = 748;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 749;
	        this.moduleDeclaration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	packageDeclaration() {
	    let localctx = new PackageDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, Java20Parser.RULE_packageDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 754;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 751;
	            this.packageModifier();
	            this.state = 756;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 757;
	        this.match(Java20Parser.PACKAGE);
	        this.state = 758;
	        this.match(Java20Parser.Identifier);
	        this.state = 763;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===84) {
	            this.state = 759;
	            this.match(Java20Parser.DOT);
	            this.state = 760;
	            this.match(Java20Parser.Identifier);
	            this.state = 765;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 766;
	        this.match(Java20Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	packageModifier() {
	    let localctx = new PackageModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, Java20Parser.RULE_packageModifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 768;
	        this.annotation();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importDeclaration() {
	    let localctx = new ImportDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, Java20Parser.RULE_importDeclaration);
	    try {
	        this.state = 774;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 770;
	            this.singleTypeImportDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 771;
	            this.typeImportOnDemandDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 772;
	            this.singleStaticImportDeclaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 773;
	            this.staticImportOnDemandDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleTypeImportDeclaration() {
	    let localctx = new SingleTypeImportDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, Java20Parser.RULE_singleTypeImportDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 776;
	        this.match(Java20Parser.IMPORT);
	        this.state = 777;
	        this.typeName();
	        this.state = 778;
	        this.match(Java20Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeImportOnDemandDeclaration() {
	    let localctx = new TypeImportOnDemandDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, Java20Parser.RULE_typeImportOnDemandDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 780;
	        this.match(Java20Parser.IMPORT);
	        this.state = 781;
	        this.packageOrTypeName();
	        this.state = 782;
	        this.match(Java20Parser.DOT);
	        this.state = 783;
	        this.match(Java20Parser.MUL);
	        this.state = 784;
	        this.match(Java20Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleStaticImportDeclaration() {
	    let localctx = new SingleStaticImportDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, Java20Parser.RULE_singleStaticImportDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 786;
	        this.match(Java20Parser.IMPORT);
	        this.state = 787;
	        this.match(Java20Parser.STATIC);
	        this.state = 788;
	        this.typeName();
	        this.state = 789;
	        this.match(Java20Parser.DOT);
	        this.state = 790;
	        this.match(Java20Parser.Identifier);
	        this.state = 791;
	        this.match(Java20Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	staticImportOnDemandDeclaration() {
	    let localctx = new StaticImportOnDemandDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, Java20Parser.RULE_staticImportOnDemandDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 793;
	        this.match(Java20Parser.IMPORT);
	        this.state = 794;
	        this.match(Java20Parser.STATIC);
	        this.state = 795;
	        this.typeName();
	        this.state = 796;
	        this.match(Java20Parser.DOT);
	        this.state = 797;
	        this.match(Java20Parser.MUL);
	        this.state = 798;
	        this.match(Java20Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	topLevelClassOrInterfaceDeclaration() {
	    let localctx = new TopLevelClassOrInterfaceDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, Java20Parser.RULE_topLevelClassOrInterfaceDeclaration);
	    try {
	        this.state = 803;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 800;
	            this.classDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 801;
	            this.interfaceDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 802;
	            this.match(Java20Parser.SEMI);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleDeclaration() {
	    let localctx = new ModuleDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, Java20Parser.RULE_moduleDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 808;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 805;
	            this.annotation();
	            this.state = 810;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 812;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===5) {
	            this.state = 811;
	            this.match(Java20Parser.OPEN);
	        }

	        this.state = 814;
	        this.match(Java20Parser.MODULE);
	        this.state = 815;
	        this.match(Java20Parser.Identifier);
	        this.state = 820;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===84) {
	            this.state = 816;
	            this.match(Java20Parser.DOT);
	            this.state = 817;
	            this.match(Java20Parser.Identifier);
	            this.state = 822;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 823;
	        this.match(Java20Parser.LBRACE);
	        this.state = 827;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 17730) !== 0)) {
	            this.state = 824;
	            this.moduleDirective();
	            this.state = 829;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 830;
	        this.match(Java20Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleDirective() {
	    let localctx = new ModuleDirectiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, Java20Parser.RULE_moduleDirective);
	    var _la = 0;
	    try {
	        this.state = 889;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 10:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 832;
	            this.match(Java20Parser.REQUIRES);
	            this.state = 836;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===13 || _la===55) {
	                this.state = 833;
	                this.requiresModifier();
	                this.state = 838;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 839;
	            this.moduleName();
	            this.state = 840;
	            this.match(Java20Parser.SEMI);
	            break;
	        case 1:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 842;
	            this.match(Java20Parser.EXPORTS);
	            this.state = 843;
	            this.packageName();
	            this.state = 853;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===12) {
	                this.state = 844;
	                this.match(Java20Parser.TO);
	                this.state = 845;
	                this.moduleName();
	                this.state = 850;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===83) {
	                    this.state = 846;
	                    this.match(Java20Parser.COMMA);
	                    this.state = 847;
	                    this.moduleName();
	                    this.state = 852;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 855;
	            this.match(Java20Parser.SEMI);
	            break;
	        case 6:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 857;
	            this.match(Java20Parser.OPENS);
	            this.state = 858;
	            this.packageName();
	            this.state = 868;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===12) {
	                this.state = 859;
	                this.match(Java20Parser.TO);
	                this.state = 860;
	                this.moduleName();
	                this.state = 865;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===83) {
	                    this.state = 861;
	                    this.match(Java20Parser.COMMA);
	                    this.state = 862;
	                    this.moduleName();
	                    this.state = 867;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 870;
	            this.match(Java20Parser.SEMI);
	            break;
	        case 14:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 872;
	            this.match(Java20Parser.USES);
	            this.state = 873;
	            this.typeName();
	            this.state = 874;
	            this.match(Java20Parser.SEMI);
	            break;
	        case 8:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 876;
	            this.match(Java20Parser.PROVIDES);
	            this.state = 877;
	            this.typeName();
	            this.state = 878;
	            this.match(Java20Parser.WITH);
	            this.state = 879;
	            this.typeName();
	            this.state = 884;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===83) {
	                this.state = 880;
	                this.match(Java20Parser.COMMA);
	                this.state = 881;
	                this.typeName();
	                this.state = 886;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 887;
	            this.match(Java20Parser.SEMI);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	requiresModifier() {
	    let localctx = new RequiresModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, Java20Parser.RULE_requiresModifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 891;
	        _la = this._input.LA(1);
	        if(!(_la===13 || _la===55)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classDeclaration() {
	    let localctx = new ClassDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, Java20Parser.RULE_classDeclaration);
	    try {
	        this.state = 896;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 893;
	            this.normalClassDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 894;
	            this.enumDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 895;
	            this.recordDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normalClassDeclaration() {
	    let localctx = new NormalClassDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, Java20Parser.RULE_normalClassDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 901;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 264200) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 3375105) !== 0) || _la===86) {
	            this.state = 898;
	            this.classModifier();
	            this.state = 903;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 904;
	        this.match(Java20Parser.CLASS);
	        this.state = 905;
	        this.typeIdentifier();
	        this.state = 907;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===90) {
	            this.state = 906;
	            this.typeParameters();
	        }

	        this.state = 910;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===34) {
	            this.state = 909;
	            this.classExtends();
	        }

	        this.state = 913;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===41) {
	            this.state = 912;
	            this.classImplements();
	        }

	        this.state = 916;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===7) {
	            this.state = 915;
	            this.classPermits();
	        }

	        this.state = 918;
	        this.classBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classModifier() {
	    let localctx = new ClassModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, Java20Parser.RULE_classModifier);
	    try {
	        this.state = 930;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 86:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 920;
	            this.annotation();
	            break;
	        case 52:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 921;
	            this.match(Java20Parser.PUBLIC);
	            break;
	        case 51:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 922;
	            this.match(Java20Parser.PROTECTED);
	            break;
	        case 50:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 923;
	            this.match(Java20Parser.PRIVATE);
	            break;
	        case 18:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 924;
	            this.match(Java20Parser.ABSTRACT);
	            break;
	        case 55:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 925;
	            this.match(Java20Parser.STATIC);
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 926;
	            this.match(Java20Parser.FINAL);
	            break;
	        case 11:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 927;
	            this.match(Java20Parser.SEALED);
	            break;
	        case 3:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 928;
	            this.match(Java20Parser.NONSEALED);
	            break;
	        case 56:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 929;
	            this.match(Java20Parser.STRICTFP);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParameters() {
	    let localctx = new TypeParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, Java20Parser.RULE_typeParameters);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 932;
	        this.match(Java20Parser.LT);
	        this.state = 933;
	        this.typeParameterList();
	        this.state = 934;
	        this.match(Java20Parser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParameterList() {
	    let localctx = new TypeParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, Java20Parser.RULE_typeParameterList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 936;
	        this.typeParameter();
	        this.state = 941;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===83) {
	            this.state = 937;
	            this.match(Java20Parser.COMMA);
	            this.state = 938;
	            this.typeParameter();
	            this.state = 943;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classExtends() {
	    let localctx = new ClassExtendsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, Java20Parser.RULE_classExtends);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 944;
	        this.match(Java20Parser.EXTENDS);
	        this.state = 945;
	        this.classType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classImplements() {
	    let localctx = new ClassImplementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, Java20Parser.RULE_classImplements);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 947;
	        this.match(Java20Parser.IMPLEMENTS);
	        this.state = 948;
	        this.interfaceTypeList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceTypeList() {
	    let localctx = new InterfaceTypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, Java20Parser.RULE_interfaceTypeList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 950;
	        this.interfaceType();
	        this.state = 955;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===83) {
	            this.state = 951;
	            this.match(Java20Parser.COMMA);
	            this.state = 952;
	            this.interfaceType();
	            this.state = 957;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classPermits() {
	    let localctx = new ClassPermitsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, Java20Parser.RULE_classPermits);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 958;
	        this.match(Java20Parser.PERMITS);
	        this.state = 959;
	        this.typeName();
	        this.state = 964;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===83) {
	            this.state = 960;
	            this.match(Java20Parser.COMMA);
	            this.state = 961;
	            this.typeName();
	            this.state = 966;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classBody() {
	    let localctx = new ClassBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, Java20Parser.RULE_classBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 967;
	        this.match(Java20Parser.LBRACE);
	        this.state = 971;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2253654536) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 1156478997) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 35790851) !== 0) || _la===123) {
	            this.state = 968;
	            this.classBodyDeclaration();
	            this.state = 973;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 974;
	        this.match(Java20Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classBodyDeclaration() {
	    let localctx = new ClassBodyDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, Java20Parser.RULE_classBodyDeclaration);
	    try {
	        this.state = 980;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 976;
	            this.classMemberDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 977;
	            this.instanceInitializer();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 978;
	            this.staticInitializer();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 979;
	            this.constructorDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classMemberDeclaration() {
	    let localctx = new ClassMemberDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, Java20Parser.RULE_classMemberDeclaration);
	    try {
	        this.state = 987;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 982;
	            this.fieldDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 983;
	            this.methodDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 984;
	            this.classDeclaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 985;
	            this.interfaceDeclaration();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 986;
	            this.match(Java20Parser.SEMI);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldDeclaration() {
	    let localctx = new FieldDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, Java20Parser.RULE_fieldDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 992;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 2417197057) !== 0) || _la===86) {
	            this.state = 989;
	            this.fieldModifier();
	            this.state = 994;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 995;
	        this.unannType();
	        this.state = 996;
	        this.variableDeclaratorList();
	        this.state = 997;
	        this.match(Java20Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldModifier() {
	    let localctx = new FieldModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, Java20Parser.RULE_fieldModifier);
	    try {
	        this.state = 1007;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 86:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 999;
	            this.annotation();
	            break;
	        case 52:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1000;
	            this.match(Java20Parser.PUBLIC);
	            break;
	        case 51:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1001;
	            this.match(Java20Parser.PROTECTED);
	            break;
	        case 50:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1002;
	            this.match(Java20Parser.PRIVATE);
	            break;
	        case 55:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1003;
	            this.match(Java20Parser.STATIC);
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1004;
	            this.match(Java20Parser.FINAL);
	            break;
	        case 63:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1005;
	            this.match(Java20Parser.TRANSIENT);
	            break;
	        case 66:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1006;
	            this.match(Java20Parser.VOLATILE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclaratorList() {
	    let localctx = new VariableDeclaratorListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, Java20Parser.RULE_variableDeclaratorList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1009;
	        this.variableDeclarator();
	        this.state = 1014;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,73,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1010;
	                this.match(Java20Parser.COMMA);
	                this.state = 1011;
	                this.variableDeclarator(); 
	            }
	            this.state = 1016;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,73,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclarator() {
	    let localctx = new VariableDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, Java20Parser.RULE_variableDeclarator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1017;
	        this.variableDeclaratorId();
	        this.state = 1020;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
	        if(la_===1) {
	            this.state = 1018;
	            this.match(Java20Parser.ASSIGN);
	            this.state = 1019;
	            this.variableInitializer();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclaratorId() {
	    let localctx = new VariableDeclaratorIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, Java20Parser.RULE_variableDeclaratorId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1022;
	        this.match(Java20Parser.Identifier);
	        this.state = 1024;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
	        if(la_===1) {
	            this.state = 1023;
	            this.dims();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableInitializer() {
	    let localctx = new VariableInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, Java20Parser.RULE_variableInitializer);
	    try {
	        this.state = 1028;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 20:
	        case 22:
	        case 25:
	        case 31:
	        case 37:
	        case 44:
	        case 46:
	        case 48:
	        case 54:
	        case 57:
	        case 58:
	        case 60:
	        case 65:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 86:
	        case 91:
	        case 92:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 123:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1026;
	            this.expression();
	            break;
	        case 78:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1027;
	            this.arrayInitializer();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannType() {
	    let localctx = new UnannTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, Java20Parser.RULE_unannType);
	    try {
	        this.state = 1032;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1030;
	            this.unannPrimitiveType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1031;
	            this.unannReferenceType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannPrimitiveType() {
	    let localctx = new UnannPrimitiveTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, Java20Parser.RULE_unannPrimitiveType);
	    try {
	        this.state = 1036;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 22:
	        case 25:
	        case 31:
	        case 37:
	        case 44:
	        case 46:
	        case 54:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1034;
	            this.numericType();
	            break;
	        case 20:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1035;
	            this.match(Java20Parser.BOOLEAN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannReferenceType() {
	    let localctx = new UnannReferenceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, Java20Parser.RULE_unannReferenceType);
	    try {
	        this.state = 1041;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1038;
	            this.unannClassOrInterfaceType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1039;
	            this.unannTypeVariable();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1040;
	            this.unannArrayType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannClassOrInterfaceType() {
	    let localctx = new UnannClassOrInterfaceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, Java20Parser.RULE_unannClassOrInterfaceType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1051;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
	        if(la_===1) {
	            this.state = 1043;
	            this.packageName();
	            this.state = 1044;
	            this.match(Java20Parser.DOT);
	            this.state = 1048;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===86) {
	                this.state = 1045;
	                this.annotation();
	                this.state = 1050;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }

	        }
	        this.state = 1053;
	        this.typeIdentifier();
	        this.state = 1055;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	        if(la_===1) {
	            this.state = 1054;
	            this.typeArguments();

	        }
	        this.state = 1058;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
	        if(la_===1) {
	            this.state = 1057;
	            this.uCOIT();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uCOIT() {
	    let localctx = new UCOITContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, Java20Parser.RULE_uCOIT);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1060;
	        this.match(Java20Parser.DOT);
	        this.state = 1064;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 1061;
	            this.annotation();
	            this.state = 1066;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1067;
	        this.typeIdentifier();
	        this.state = 1069;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
	        if(la_===1) {
	            this.state = 1068;
	            this.typeArguments();

	        }
	        this.state = 1072;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
	        if(la_===1) {
	            this.state = 1071;
	            this.uCOIT();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannClassType() {
	    let localctx = new UnannClassTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, Java20Parser.RULE_unannClassType);
	    var _la = 0;
	    try {
	        this.state = 1093;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1074;
	            this.typeIdentifier();
	            this.state = 1076;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 1075;
	                this.typeArguments();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1080;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1078;
	                this.packageName();
	                break;

	            case 2:
	                this.state = 1079;
	                this.unannClassOrInterfaceType();
	                break;

	            }
	            this.state = 1082;
	            this.match(Java20Parser.DOT);
	            this.state = 1086;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===86) {
	                this.state = 1083;
	                this.annotation();
	                this.state = 1088;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1089;
	            this.typeIdentifier();
	            this.state = 1091;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 1090;
	                this.typeArguments();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannInterfaceType() {
	    let localctx = new UnannInterfaceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, Java20Parser.RULE_unannInterfaceType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1095;
	        this.unannClassType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannTypeVariable() {
	    let localctx = new UnannTypeVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, Java20Parser.RULE_unannTypeVariable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1097;
	        this.typeIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannArrayType() {
	    let localctx = new UnannArrayTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, Java20Parser.RULE_unannArrayType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1102;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1099;
	            this.unannPrimitiveType();
	            break;

	        case 2:
	            this.state = 1100;
	            this.unannClassOrInterfaceType();
	            break;

	        case 3:
	            this.state = 1101;
	            this.unannTypeVariable();
	            break;

	        }
	        this.state = 1104;
	        this.dims();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodDeclaration() {
	    let localctx = new MethodDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, Java20Parser.RULE_methodDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1109;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===18 || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 20156417) !== 0) || _la===86) {
	            this.state = 1106;
	            this.methodModifier();
	            this.state = 1111;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1112;
	        this.methodHeader();
	        this.state = 1113;
	        this.methodBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodModifier() {
	    let localctx = new MethodModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, Java20Parser.RULE_methodModifier);
	    try {
	        this.state = 1125;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 86:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1115;
	            this.annotation();
	            break;
	        case 52:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1116;
	            this.match(Java20Parser.PUBLIC);
	            break;
	        case 51:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1117;
	            this.match(Java20Parser.PROTECTED);
	            break;
	        case 50:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1118;
	            this.match(Java20Parser.PRIVATE);
	            break;
	        case 18:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1119;
	            this.match(Java20Parser.ABSTRACT);
	            break;
	        case 55:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1120;
	            this.match(Java20Parser.STATIC);
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1121;
	            this.match(Java20Parser.FINAL);
	            break;
	        case 59:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1122;
	            this.match(Java20Parser.SYNCHRONIZED);
	            break;
	        case 47:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1123;
	            this.match(Java20Parser.NATIVE);
	            break;
	        case 56:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1124;
	            this.match(Java20Parser.STRICTFP);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodHeader() {
	    let localctx = new MethodHeaderContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, Java20Parser.RULE_methodHeader);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1134;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===90) {
	            this.state = 1127;
	            this.typeParameters();
	            this.state = 1131;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===86) {
	                this.state = 1128;
	                this.annotation();
	                this.state = 1133;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 1136;
	        this.result();
	        this.state = 1137;
	        this.methodDeclarator();
	        this.state = 1139;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===62) {
	            this.state = 1138;
	            this.throwsT();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	result() {
	    let localctx = new ResultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, Java20Parser.RULE_result);
	    try {
	        this.state = 1143;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 20:
	        case 22:
	        case 25:
	        case 31:
	        case 37:
	        case 44:
	        case 46:
	        case 54:
	        case 123:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1141;
	            this.unannType();
	            break;
	        case 65:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1142;
	            this.match(Java20Parser.VOID);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodDeclarator() {
	    let localctx = new MethodDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, Java20Parser.RULE_methodDeclarator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1145;
	        this.match(Java20Parser.Identifier);
	        this.state = 1146;
	        this.match(Java20Parser.LPAREN);
	        this.state = 1150;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
	        if(la_===1) {
	            this.state = 1147;
	            this.receiverParameter();
	            this.state = 1148;
	            this.match(Java20Parser.COMMA);

	        }
	        this.state = 1153;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186280960) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 526853) !== 0) || _la===86 || _la===123) {
	            this.state = 1152;
	            this.formalParameterList();
	        }

	        this.state = 1155;
	        this.match(Java20Parser.RPAREN);
	        this.state = 1157;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===80 || _la===86) {
	            this.state = 1156;
	            this.dims();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	receiverParameter() {
	    let localctx = new ReceiverParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, Java20Parser.RULE_receiverParameter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1162;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 1159;
	            this.annotation();
	            this.state = 1164;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1165;
	        this.unannType();
	        this.state = 1168;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===123) {
	            this.state = 1166;
	            this.match(Java20Parser.Identifier);
	            this.state = 1167;
	            this.match(Java20Parser.DOT);
	        }

	        this.state = 1170;
	        this.match(Java20Parser.THIS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameterList() {
	    let localctx = new FormalParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, Java20Parser.RULE_formalParameterList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1172;
	        this.formalParameter();
	        this.state = 1177;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===83) {
	            this.state = 1173;
	            this.match(Java20Parser.COMMA);
	            this.state = 1174;
	            this.formalParameter();
	            this.state = 1179;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameter() {
	    let localctx = new FormalParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, Java20Parser.RULE_formalParameter);
	    var _la = 0;
	    try {
	        this.state = 1190;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1183;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===35 || _la===86) {
	                this.state = 1180;
	                this.variableModifier();
	                this.state = 1185;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1186;
	            this.unannType();
	            this.state = 1187;
	            this.variableDeclaratorId();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1189;
	            this.variableArityParameter();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableArityParameter() {
	    let localctx = new VariableArityParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, Java20Parser.RULE_variableArityParameter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1195;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===35 || _la===86) {
	            this.state = 1192;
	            this.variableModifier();
	            this.state = 1197;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1198;
	        this.unannType();
	        this.state = 1202;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 1199;
	            this.annotation();
	            this.state = 1204;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1205;
	        this.match(Java20Parser.ELLIPSIS);
	        this.state = 1206;
	        this.match(Java20Parser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableModifier() {
	    let localctx = new VariableModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, Java20Parser.RULE_variableModifier);
	    try {
	        this.state = 1210;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 86:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1208;
	            this.annotation();
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1209;
	            this.match(Java20Parser.FINAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	throwsT() {
	    let localctx = new ThrowsTContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, Java20Parser.RULE_throwsT);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1212;
	        this.match(Java20Parser.THROWS);
	        this.state = 1213;
	        this.exceptionTypeList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exceptionTypeList() {
	    let localctx = new ExceptionTypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, Java20Parser.RULE_exceptionTypeList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1215;
	        this.exceptionType();
	        this.state = 1220;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===83) {
	            this.state = 1216;
	            this.match(Java20Parser.COMMA);
	            this.state = 1217;
	            this.exceptionType();
	            this.state = 1222;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exceptionType() {
	    let localctx = new ExceptionTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, Java20Parser.RULE_exceptionType);
	    try {
	        this.state = 1225;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1223;
	            this.classType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1224;
	            this.typeVariable();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodBody() {
	    let localctx = new MethodBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, Java20Parser.RULE_methodBody);
	    try {
	        this.state = 1229;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 78:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1227;
	            this.block();
	            break;
	        case 82:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1228;
	            this.match(Java20Parser.SEMI);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	instanceInitializer() {
	    let localctx = new InstanceInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, Java20Parser.RULE_instanceInitializer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1231;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	staticInitializer() {
	    let localctx = new StaticInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, Java20Parser.RULE_staticInitializer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1233;
	        this.match(Java20Parser.STATIC);
	        this.state = 1234;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructorDeclaration() {
	    let localctx = new ConstructorDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, Java20Parser.RULE_constructorDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1239;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 50)) & ~0x1f) === 0 && ((1 << (_la - 50)) & 7) !== 0) || _la===86) {
	            this.state = 1236;
	            this.constructorModifier();
	            this.state = 1241;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1242;
	        this.constructorDeclarator();
	        this.state = 1244;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===62) {
	            this.state = 1243;
	            this.throwsT();
	        }

	        this.state = 1246;
	        this.constructorBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructorModifier() {
	    let localctx = new ConstructorModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, Java20Parser.RULE_constructorModifier);
	    try {
	        this.state = 1252;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 86:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1248;
	            this.annotation();
	            break;
	        case 52:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1249;
	            this.match(Java20Parser.PUBLIC);
	            break;
	        case 51:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1250;
	            this.match(Java20Parser.PROTECTED);
	            break;
	        case 50:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1251;
	            this.match(Java20Parser.PRIVATE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructorDeclarator() {
	    let localctx = new ConstructorDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, Java20Parser.RULE_constructorDeclarator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1255;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===90) {
	            this.state = 1254;
	            this.typeParameters();
	        }

	        this.state = 1257;
	        this.simpleTypeName();
	        this.state = 1258;
	        this.match(Java20Parser.LPAREN);
	        this.state = 1262;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
	        if(la_===1) {
	            this.state = 1259;
	            this.receiverParameter();
	            this.state = 1260;
	            this.match(Java20Parser.COMMA);

	        }
	        this.state = 1265;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186280960) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 526853) !== 0) || _la===86 || _la===123) {
	            this.state = 1264;
	            this.formalParameterList();
	        }

	        this.state = 1267;
	        this.match(Java20Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleTypeName() {
	    let localctx = new SimpleTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, Java20Parser.RULE_simpleTypeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1269;
	        this.typeIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructorBody() {
	    let localctx = new ConstructorBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, Java20Parser.RULE_constructorBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1271;
	        this.match(Java20Parser.LBRACE);
	        this.state = 1273;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
	        if(la_===1) {
	            this.state = 1272;
	            this.explicitConstructorInvocation();

	        }
	        this.state = 1276;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3598617096) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 2684270709) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 2240501) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097155) !== 0)) {
	            this.state = 1275;
	            this.blockStatements();
	        }

	        this.state = 1278;
	        this.match(Java20Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explicitConstructorInvocation() {
	    let localctx = new ExplicitConstructorInvocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, Java20Parser.RULE_explicitConstructorInvocation);
	    var _la = 0;
	    try {
	        this.state = 1306;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1281;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 1280;
	                this.typeArguments();
	            }

	            this.state = 1283;
	            _la = this._input.LA(1);
	            if(!(_la===57 || _la===60)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1284;
	            this.match(Java20Parser.LPAREN);
	            this.state = 1286;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186280960) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	                this.state = 1285;
	                this.argumentList();
	            }

	            this.state = 1288;
	            this.match(Java20Parser.RPAREN);
	            this.state = 1289;
	            this.match(Java20Parser.SEMI);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1292;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1290;
	                this.expressionName();
	                break;

	            case 2:
	                this.state = 1291;
	                this.primary();
	                break;

	            }
	            this.state = 1294;
	            this.match(Java20Parser.DOT);
	            this.state = 1296;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 1295;
	                this.typeArguments();
	            }

	            this.state = 1298;
	            this.match(Java20Parser.SUPER);
	            this.state = 1299;
	            this.match(Java20Parser.LPAREN);
	            this.state = 1301;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186280960) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	                this.state = 1300;
	                this.argumentList();
	            }

	            this.state = 1303;
	            this.match(Java20Parser.RPAREN);
	            this.state = 1304;
	            this.match(Java20Parser.SEMI);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumDeclaration() {
	    let localctx = new EnumDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, Java20Parser.RULE_enumDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1311;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 264200) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 3375105) !== 0) || _la===86) {
	            this.state = 1308;
	            this.classModifier();
	            this.state = 1313;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1314;
	        this.match(Java20Parser.ENUM);
	        this.state = 1315;
	        this.typeIdentifier();
	        this.state = 1317;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===41) {
	            this.state = 1316;
	            this.classImplements();
	        }

	        this.state = 1319;
	        this.enumBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumBody() {
	    let localctx = new EnumBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, Java20Parser.RULE_enumBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1321;
	        this.match(Java20Parser.LBRACE);
	        this.state = 1323;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===86 || _la===123) {
	            this.state = 1322;
	            this.enumConstantList();
	        }

	        this.state = 1326;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===83) {
	            this.state = 1325;
	            this.match(Java20Parser.COMMA);
	        }

	        this.state = 1329;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===82) {
	            this.state = 1328;
	            this.enumBodyDeclarations();
	        }

	        this.state = 1331;
	        this.match(Java20Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumConstantList() {
	    let localctx = new EnumConstantListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, Java20Parser.RULE_enumConstantList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1333;
	        this.enumConstant();
	        this.state = 1338;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,132,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1334;
	                this.match(Java20Parser.COMMA);
	                this.state = 1335;
	                this.enumConstant(); 
	            }
	            this.state = 1340;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,132,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumConstant() {
	    let localctx = new EnumConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, Java20Parser.RULE_enumConstant);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1344;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 1341;
	            this.enumConstantModifier();
	            this.state = 1346;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1347;
	        this.match(Java20Parser.Identifier);
	        this.state = 1353;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===76) {
	            this.state = 1348;
	            this.match(Java20Parser.LPAREN);
	            this.state = 1350;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186280960) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	                this.state = 1349;
	                this.argumentList();
	            }

	            this.state = 1352;
	            this.match(Java20Parser.RPAREN);
	        }

	        this.state = 1356;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===78) {
	            this.state = 1355;
	            this.classBody();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumConstantModifier() {
	    let localctx = new EnumConstantModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, Java20Parser.RULE_enumConstantModifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1358;
	        this.annotation();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumBodyDeclarations() {
	    let localctx = new EnumBodyDeclarationsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, Java20Parser.RULE_enumBodyDeclarations);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1360;
	        this.match(Java20Parser.SEMI);
	        this.state = 1364;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2253654536) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 1156478997) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 35790851) !== 0) || _la===123) {
	            this.state = 1361;
	            this.classBodyDeclaration();
	            this.state = 1366;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordDeclaration() {
	    let localctx = new RecordDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, Java20Parser.RULE_recordDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1370;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 264200) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 3375105) !== 0) || _la===86) {
	            this.state = 1367;
	            this.classModifier();
	            this.state = 1372;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1373;
	        this.match(Java20Parser.RECORD);
	        this.state = 1374;
	        this.typeIdentifier();
	        this.state = 1376;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===90) {
	            this.state = 1375;
	            this.typeParameters();
	        }

	        this.state = 1378;
	        this.recordHeader();
	        this.state = 1380;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===41) {
	            this.state = 1379;
	            this.classImplements();
	        }

	        this.state = 1382;
	        this.recordBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordHeader() {
	    let localctx = new RecordHeaderContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, Java20Parser.RULE_recordHeader);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1384;
	        this.match(Java20Parser.LPAREN);
	        this.state = 1386;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186280960) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 131713) !== 0) || _la===86 || _la===123) {
	            this.state = 1385;
	            this.recordComponentList();
	        }

	        this.state = 1388;
	        this.match(Java20Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordComponentList() {
	    let localctx = new RecordComponentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, Java20Parser.RULE_recordComponentList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1390;
	        this.recordComponent();
	        this.state = 1395;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===83) {
	            this.state = 1391;
	            this.match(Java20Parser.COMMA);
	            this.state = 1392;
	            this.recordComponent();
	            this.state = 1397;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordComponent() {
	    let localctx = new RecordComponentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, Java20Parser.RULE_recordComponent);
	    var _la = 0;
	    try {
	        this.state = 1408;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,144,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1401;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===86) {
	                this.state = 1398;
	                this.recordComponentModifier();
	                this.state = 1403;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1404;
	            this.unannType();
	            this.state = 1405;
	            this.match(Java20Parser.Identifier);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1407;
	            this.variableArityRecordComponent();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableArityRecordComponent() {
	    let localctx = new VariableArityRecordComponentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, Java20Parser.RULE_variableArityRecordComponent);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1413;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 1410;
	            this.recordComponentModifier();
	            this.state = 1415;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1416;
	        this.unannType();
	        this.state = 1420;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 1417;
	            this.annotation();
	            this.state = 1422;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1423;
	        this.match(Java20Parser.ELLIPSIS);
	        this.state = 1424;
	        this.match(Java20Parser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordComponentModifier() {
	    let localctx = new RecordComponentModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, Java20Parser.RULE_recordComponentModifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1426;
	        this.annotation();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordBody() {
	    let localctx = new RecordBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, Java20Parser.RULE_recordBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1428;
	        this.match(Java20Parser.LBRACE);
	        this.state = 1432;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2253654536) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 1156478997) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 35790851) !== 0) || _la===123) {
	            this.state = 1429;
	            this.recordBodyDeclaration();
	            this.state = 1434;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1435;
	        this.match(Java20Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordBodyDeclaration() {
	    let localctx = new RecordBodyDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, Java20Parser.RULE_recordBodyDeclaration);
	    try {
	        this.state = 1439;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,148,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1437;
	            this.classBodyDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1438;
	            this.compactConstructorDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compactConstructorDeclaration() {
	    let localctx = new CompactConstructorDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, Java20Parser.RULE_compactConstructorDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1444;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 50)) & ~0x1f) === 0 && ((1 << (_la - 50)) & 7) !== 0) || _la===86) {
	            this.state = 1441;
	            this.constructorModifier();
	            this.state = 1446;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1447;
	        this.simpleTypeName();
	        this.state = 1448;
	        this.constructorBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceDeclaration() {
	    let localctx = new InterfaceDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, Java20Parser.RULE_interfaceDeclaration);
	    try {
	        this.state = 1452;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,150,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1450;
	            this.normalInterfaceDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1451;
	            this.annotationInterfaceDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normalInterfaceDeclaration() {
	    let localctx = new NormalInterfaceDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, Java20Parser.RULE_normalInterfaceDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1457;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 264200) !== 0) || ((((_la - 50)) & ~0x1f) === 0 && ((1 << (_la - 50)) & 103) !== 0) || _la===86) {
	            this.state = 1454;
	            this.interfaceModifier();
	            this.state = 1459;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1460;
	        this.match(Java20Parser.INTERFACE);
	        this.state = 1461;
	        this.typeIdentifier();
	        this.state = 1463;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===90) {
	            this.state = 1462;
	            this.typeParameters();
	        }

	        this.state = 1466;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===34) {
	            this.state = 1465;
	            this.interfaceExtends();
	        }

	        this.state = 1469;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===7) {
	            this.state = 1468;
	            this.interfacePermits();
	        }

	        this.state = 1471;
	        this.interfaceBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceModifier() {
	    let localctx = new InterfaceModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, Java20Parser.RULE_interfaceModifier);
	    try {
	        this.state = 1482;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 86:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1473;
	            this.annotation();
	            break;
	        case 52:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1474;
	            this.match(Java20Parser.PUBLIC);
	            break;
	        case 51:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1475;
	            this.match(Java20Parser.PROTECTED);
	            break;
	        case 50:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1476;
	            this.match(Java20Parser.PRIVATE);
	            break;
	        case 18:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1477;
	            this.match(Java20Parser.ABSTRACT);
	            break;
	        case 55:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1478;
	            this.match(Java20Parser.STATIC);
	            break;
	        case 11:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1479;
	            this.match(Java20Parser.SEALED);
	            break;
	        case 3:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1480;
	            this.match(Java20Parser.NONSEALED);
	            break;
	        case 56:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1481;
	            this.match(Java20Parser.STRICTFP);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceExtends() {
	    let localctx = new InterfaceExtendsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, Java20Parser.RULE_interfaceExtends);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1484;
	        this.match(Java20Parser.EXTENDS);
	        this.state = 1485;
	        this.interfaceTypeList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfacePermits() {
	    let localctx = new InterfacePermitsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, Java20Parser.RULE_interfacePermits);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1487;
	        this.match(Java20Parser.PERMITS);
	        this.state = 1488;
	        this.typeName();
	        this.state = 1493;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===83) {
	            this.state = 1489;
	            this.match(Java20Parser.COMMA);
	            this.state = 1490;
	            this.typeName();
	            this.state = 1495;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceBody() {
	    let localctx = new InterfaceBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, Java20Parser.RULE_interfaceBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1496;
	        this.match(Java20Parser.LBRACE);
	        this.state = 1500;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2790525448) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 15611925) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 35782657) !== 0) || _la===123) {
	            this.state = 1497;
	            this.interfaceMemberDeclaration();
	            this.state = 1502;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1503;
	        this.match(Java20Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceMemberDeclaration() {
	    let localctx = new InterfaceMemberDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, Java20Parser.RULE_interfaceMemberDeclaration);
	    try {
	        this.state = 1510;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1505;
	            this.constantDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1506;
	            this.interfaceMethodDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1507;
	            this.classDeclaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1508;
	            this.interfaceDeclaration();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1509;
	            this.match(Java20Parser.SEMI);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constantDeclaration() {
	    let localctx = new ConstantDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, Java20Parser.RULE_constantDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1515;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 1179649) !== 0) || _la===86) {
	            this.state = 1512;
	            this.constantModifier();
	            this.state = 1517;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1518;
	        this.unannType();
	        this.state = 1519;
	        this.variableDeclaratorList();
	        this.state = 1520;
	        this.match(Java20Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constantModifier() {
	    let localctx = new ConstantModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, Java20Parser.RULE_constantModifier);
	    try {
	        this.state = 1526;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 86:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1522;
	            this.annotation();
	            break;
	        case 52:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1523;
	            this.match(Java20Parser.PUBLIC);
	            break;
	        case 55:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1524;
	            this.match(Java20Parser.STATIC);
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1525;
	            this.match(Java20Parser.FINAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceMethodDeclaration() {
	    let localctx = new InterfaceMethodDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, Java20Parser.RULE_interfaceMethodDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1531;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===18 || _la===29 || ((((_la - 50)) & ~0x1f) === 0 && ((1 << (_la - 50)) & 101) !== 0) || _la===86) {
	            this.state = 1528;
	            this.interfaceMethodModifier();
	            this.state = 1533;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1534;
	        this.methodHeader();
	        this.state = 1535;
	        this.methodBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceMethodModifier() {
	    let localctx = new InterfaceMethodModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, Java20Parser.RULE_interfaceMethodModifier);
	    try {
	        this.state = 1544;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 86:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1537;
	            this.annotation();
	            break;
	        case 52:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1538;
	            this.match(Java20Parser.PUBLIC);
	            break;
	        case 50:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1539;
	            this.match(Java20Parser.PRIVATE);
	            break;
	        case 18:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1540;
	            this.match(Java20Parser.ABSTRACT);
	            break;
	        case 29:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1541;
	            this.match(Java20Parser.DEFAULT);
	            break;
	        case 55:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1542;
	            this.match(Java20Parser.STATIC);
	            break;
	        case 56:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1543;
	            this.match(Java20Parser.STRICTFP);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationInterfaceDeclaration() {
	    let localctx = new AnnotationInterfaceDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, Java20Parser.RULE_annotationInterfaceDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1549;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,163,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1546;
	                this.interfaceModifier(); 
	            }
	            this.state = 1551;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,163,this._ctx);
	        }

	        this.state = 1552;
	        this.match(Java20Parser.AT);
	        this.state = 1553;
	        this.match(Java20Parser.INTERFACE);
	        this.state = 1554;
	        this.typeIdentifier();
	        this.state = 1555;
	        this.annotationInterfaceBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationInterfaceBody() {
	    let localctx = new AnnotationInterfaceBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, Java20Parser.RULE_annotationInterfaceBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1557;
	        this.match(Java20Parser.LBRACE);
	        this.state = 1561;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2253654536) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 15611925) !== 0) || _la===82 || _la===86 || _la===123) {
	            this.state = 1558;
	            this.annotationInterfaceMemberDeclaration();
	            this.state = 1563;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1564;
	        this.match(Java20Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationInterfaceMemberDeclaration() {
	    let localctx = new AnnotationInterfaceMemberDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, Java20Parser.RULE_annotationInterfaceMemberDeclaration);
	    try {
	        this.state = 1571;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,165,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1566;
	            this.annotationInterfaceElementDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1567;
	            this.constantDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1568;
	            this.classDeclaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1569;
	            this.interfaceDeclaration();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1570;
	            this.match(Java20Parser.SEMI);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationInterfaceElementDeclaration() {
	    let localctx = new AnnotationInterfaceElementDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, Java20Parser.RULE_annotationInterfaceElementDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1576;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===18 || _la===52 || _la===86) {
	            this.state = 1573;
	            this.annotationInterfaceElementModifier();
	            this.state = 1578;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1579;
	        this.unannType();
	        this.state = 1580;
	        this.match(Java20Parser.Identifier);
	        this.state = 1581;
	        this.match(Java20Parser.LPAREN);
	        this.state = 1582;
	        this.match(Java20Parser.RPAREN);
	        this.state = 1584;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===80 || _la===86) {
	            this.state = 1583;
	            this.dims();
	        }

	        this.state = 1587;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===29) {
	            this.state = 1586;
	            this.defaultValue();
	        }

	        this.state = 1589;
	        this.match(Java20Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationInterfaceElementModifier() {
	    let localctx = new AnnotationInterfaceElementModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, Java20Parser.RULE_annotationInterfaceElementModifier);
	    try {
	        this.state = 1594;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 86:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1591;
	            this.annotation();
	            break;
	        case 52:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1592;
	            this.match(Java20Parser.PUBLIC);
	            break;
	        case 18:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1593;
	            this.match(Java20Parser.ABSTRACT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultValue() {
	    let localctx = new DefaultValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, Java20Parser.RULE_defaultValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1596;
	        this.match(Java20Parser.DEFAULT);
	        this.state = 1597;
	        this.elementValue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotation() {
	    let localctx = new AnnotationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, Java20Parser.RULE_annotation);
	    try {
	        this.state = 1602;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,170,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1599;
	            this.normalAnnotation();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1600;
	            this.markerAnnotation();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1601;
	            this.singleElementAnnotation();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normalAnnotation() {
	    let localctx = new NormalAnnotationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, Java20Parser.RULE_normalAnnotation);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1604;
	        this.match(Java20Parser.AT);
	        this.state = 1605;
	        this.typeName();
	        this.state = 1606;
	        this.match(Java20Parser.LPAREN);
	        this.state = 1608;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===123) {
	            this.state = 1607;
	            this.elementValuePairList();
	        }

	        this.state = 1610;
	        this.match(Java20Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementValuePairList() {
	    let localctx = new ElementValuePairListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, Java20Parser.RULE_elementValuePairList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1612;
	        this.elementValuePair();
	        this.state = 1617;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===83) {
	            this.state = 1613;
	            this.match(Java20Parser.COMMA);
	            this.state = 1614;
	            this.elementValuePair();
	            this.state = 1619;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementValuePair() {
	    let localctx = new ElementValuePairContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, Java20Parser.RULE_elementValuePair);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1620;
	        this.match(Java20Parser.Identifier);
	        this.state = 1621;
	        this.match(Java20Parser.ASSIGN);
	        this.state = 1622;
	        this.elementValue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementValue() {
	    let localctx = new ElementValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, Java20Parser.RULE_elementValue);
	    try {
	        this.state = 1627;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,173,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1624;
	            this.conditionalExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1625;
	            this.elementValueArrayInitializer();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1626;
	            this.annotation();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementValueArrayInitializer() {
	    let localctx = new ElementValueArrayInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, Java20Parser.RULE_elementValueArrayInitializer);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1629;
	        this.match(Java20Parser.LBRACE);
	        this.state = 1631;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186280960) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714751) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	            this.state = 1630;
	            this.elementValueList();
	        }

	        this.state = 1634;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===83) {
	            this.state = 1633;
	            this.match(Java20Parser.COMMA);
	        }

	        this.state = 1636;
	        this.match(Java20Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementValueList() {
	    let localctx = new ElementValueListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, Java20Parser.RULE_elementValueList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1638;
	        this.elementValue();
	        this.state = 1643;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,176,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1639;
	                this.match(Java20Parser.COMMA);
	                this.state = 1640;
	                this.elementValue(); 
	            }
	            this.state = 1645;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,176,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	markerAnnotation() {
	    let localctx = new MarkerAnnotationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, Java20Parser.RULE_markerAnnotation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1646;
	        this.match(Java20Parser.AT);
	        this.state = 1647;
	        this.typeName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleElementAnnotation() {
	    let localctx = new SingleElementAnnotationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, Java20Parser.RULE_singleElementAnnotation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1649;
	        this.match(Java20Parser.AT);
	        this.state = 1650;
	        this.typeName();
	        this.state = 1651;
	        this.match(Java20Parser.LPAREN);
	        this.state = 1652;
	        this.elementValue();
	        this.state = 1653;
	        this.match(Java20Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayInitializer() {
	    let localctx = new ArrayInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, Java20Parser.RULE_arrayInitializer);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1655;
	        this.match(Java20Parser.LBRACE);
	        this.state = 1657;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186280960) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714751) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	            this.state = 1656;
	            this.variableInitializerList();
	        }

	        this.state = 1660;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===83) {
	            this.state = 1659;
	            this.match(Java20Parser.COMMA);
	        }

	        this.state = 1662;
	        this.match(Java20Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableInitializerList() {
	    let localctx = new VariableInitializerListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, Java20Parser.RULE_variableInitializerList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1664;
	        this.variableInitializer();
	        this.state = 1669;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,179,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1665;
	                this.match(Java20Parser.COMMA);
	                this.state = 1666;
	                this.variableInitializer(); 
	            }
	            this.state = 1671;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,179,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block() {
	    let localctx = new BlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, Java20Parser.RULE_block);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1672;
	        this.match(Java20Parser.LBRACE);
	        this.state = 1674;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3598617096) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 2684270709) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 2240501) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097155) !== 0)) {
	            this.state = 1673;
	            this.blockStatements();
	        }

	        this.state = 1676;
	        this.match(Java20Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blockStatements() {
	    let localctx = new BlockStatementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, Java20Parser.RULE_blockStatements);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1678;
	        this.blockStatement();
	        this.state = 1682;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 3598617096) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 2684270709) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 2240501) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097155) !== 0)) {
	            this.state = 1679;
	            this.blockStatement();
	            this.state = 1684;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blockStatement() {
	    let localctx = new BlockStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, Java20Parser.RULE_blockStatement);
	    try {
	        this.state = 1688;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,182,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1685;
	            this.localClassOrInterfaceDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1686;
	            this.localVariableDeclarationStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1687;
	            this.statement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localClassOrInterfaceDeclaration() {
	    let localctx = new LocalClassOrInterfaceDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, Java20Parser.RULE_localClassOrInterfaceDeclaration);
	    try {
	        this.state = 1692;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,183,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1690;
	            this.classDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1691;
	            this.normalInterfaceDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localVariableDeclaration() {
	    let localctx = new LocalVariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, Java20Parser.RULE_localVariableDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1697;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===35 || _la===86) {
	            this.state = 1694;
	            this.variableModifier();
	            this.state = 1699;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1700;
	        this.localVariableType();
	        this.state = 1702;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,185,this._ctx);
	        if(la_===1) {
	            this.state = 1701;
	            this.variableDeclaratorList();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localVariableType() {
	    let localctx = new LocalVariableTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, Java20Parser.RULE_localVariableType);
	    try {
	        this.state = 1706;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 20:
	        case 22:
	        case 25:
	        case 31:
	        case 37:
	        case 44:
	        case 46:
	        case 54:
	        case 123:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1704;
	            this.unannType();
	            break;
	        case 15:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1705;
	            this.match(Java20Parser.VAR);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localVariableDeclarationStatement() {
	    let localctx = new LocalVariableDeclarationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, Java20Parser.RULE_localVariableDeclarationStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1708;
	        this.localVariableDeclaration();
	        this.state = 1709;
	        this.match(Java20Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, Java20Parser.RULE_statement);
	    try {
	        this.state = 1717;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,187,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1711;
	            this.statementWithoutTrailingSubstatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1712;
	            this.labeledStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1713;
	            this.ifThenStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1714;
	            this.ifThenElseStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1715;
	            this.whileStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1716;
	            this.forStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementNoShortIf() {
	    let localctx = new StatementNoShortIfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, Java20Parser.RULE_statementNoShortIf);
	    try {
	        this.state = 1724;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,188,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1719;
	            this.statementWithoutTrailingSubstatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1720;
	            this.labeledStatementNoShortIf();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1721;
	            this.ifThenElseStatementNoShortIf();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1722;
	            this.whileStatementNoShortIf();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1723;
	            this.forStatementNoShortIf();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementWithoutTrailingSubstatement() {
	    let localctx = new StatementWithoutTrailingSubstatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, Java20Parser.RULE_statementWithoutTrailingSubstatement);
	    try {
	        this.state = 1739;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 78:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1726;
	            this.block();
	            break;
	        case 82:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1727;
	            this.emptyStatement_();
	            break;
	        case 20:
	        case 22:
	        case 25:
	        case 31:
	        case 37:
	        case 44:
	        case 46:
	        case 48:
	        case 54:
	        case 57:
	        case 60:
	        case 65:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 86:
	        case 102:
	        case 103:
	        case 123:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1728;
	            this.expressionStatement();
	            break;
	        case 19:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1729;
	            this.assertStatement();
	            break;
	        case 58:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1730;
	            this.switchStatement();
	            break;
	        case 30:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1731;
	            this.doStatement();
	            break;
	        case 21:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1732;
	            this.breakStatement();
	            break;
	        case 28:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1733;
	            this.continueStatement();
	            break;
	        case 53:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1734;
	            this.returnStatement();
	            break;
	        case 59:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1735;
	            this.synchronizedStatement();
	            break;
	        case 61:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1736;
	            this.throwStatement();
	            break;
	        case 64:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1737;
	            this.tryStatement();
	            break;
	        case 17:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1738;
	            this.yieldStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	emptyStatement_() {
	    let localctx = new EmptyStatement_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, Java20Parser.RULE_emptyStatement_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1741;
	        this.match(Java20Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labeledStatement() {
	    let localctx = new LabeledStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, Java20Parser.RULE_labeledStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1743;
	        this.match(Java20Parser.Identifier);
	        this.state = 1744;
	        this.match(Java20Parser.COLON);
	        this.state = 1745;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labeledStatementNoShortIf() {
	    let localctx = new LabeledStatementNoShortIfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, Java20Parser.RULE_labeledStatementNoShortIf);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1747;
	        this.match(Java20Parser.Identifier);
	        this.state = 1748;
	        this.match(Java20Parser.COLON);
	        this.state = 1749;
	        this.statementNoShortIf();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionStatement() {
	    let localctx = new ExpressionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, Java20Parser.RULE_expressionStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1751;
	        this.statementExpression();
	        this.state = 1752;
	        this.match(Java20Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementExpression() {
	    let localctx = new StatementExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, Java20Parser.RULE_statementExpression);
	    try {
	        this.state = 1761;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,190,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1754;
	            this.assignment();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1755;
	            this.preIncrementExpression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1756;
	            this.preDecrementExpression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1757;
	            this.postIncrementExpression();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1758;
	            this.postDecrementExpression();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1759;
	            this.methodInvocation();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1760;
	            this.classInstanceCreationExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifThenStatement() {
	    let localctx = new IfThenStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, Java20Parser.RULE_ifThenStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1763;
	        this.match(Java20Parser.IF);
	        this.state = 1764;
	        this.match(Java20Parser.LPAREN);
	        this.state = 1765;
	        this.expression();
	        this.state = 1766;
	        this.match(Java20Parser.RPAREN);
	        this.state = 1767;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifThenElseStatement() {
	    let localctx = new IfThenElseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, Java20Parser.RULE_ifThenElseStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1769;
	        this.match(Java20Parser.IF);
	        this.state = 1770;
	        this.match(Java20Parser.LPAREN);
	        this.state = 1771;
	        this.expression();
	        this.state = 1772;
	        this.match(Java20Parser.RPAREN);
	        this.state = 1773;
	        this.statementNoShortIf();
	        this.state = 1774;
	        this.match(Java20Parser.ELSE);
	        this.state = 1775;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifThenElseStatementNoShortIf() {
	    let localctx = new IfThenElseStatementNoShortIfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, Java20Parser.RULE_ifThenElseStatementNoShortIf);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1777;
	        this.match(Java20Parser.IF);
	        this.state = 1778;
	        this.match(Java20Parser.LPAREN);
	        this.state = 1779;
	        this.expression();
	        this.state = 1780;
	        this.match(Java20Parser.RPAREN);
	        this.state = 1781;
	        this.statementNoShortIf();
	        this.state = 1782;
	        this.match(Java20Parser.ELSE);
	        this.state = 1783;
	        this.statementNoShortIf();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assertStatement() {
	    let localctx = new AssertStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, Java20Parser.RULE_assertStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1785;
	        this.match(Java20Parser.ASSERT);
	        this.state = 1786;
	        this.expression();
	        this.state = 1789;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===94) {
	            this.state = 1787;
	            this.match(Java20Parser.COLON);
	            this.state = 1788;
	            this.expression();
	        }

	        this.state = 1791;
	        this.match(Java20Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchStatement() {
	    let localctx = new SwitchStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, Java20Parser.RULE_switchStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1793;
	        this.match(Java20Parser.SWITCH);
	        this.state = 1794;
	        this.match(Java20Parser.LPAREN);
	        this.state = 1795;
	        this.expression();
	        this.state = 1796;
	        this.match(Java20Parser.RPAREN);
	        this.state = 1797;
	        this.switchBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchBlock() {
	    let localctx = new SwitchBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, Java20Parser.RULE_switchBlock);
	    var _la = 0;
	    try {
	        this.state = 1825;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,195,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1799;
	            this.match(Java20Parser.LBRACE);
	            this.state = 1800;
	            this.switchRule();
	            this.state = 1804;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===23 || _la===29) {
	                this.state = 1801;
	                this.switchRule();
	                this.state = 1806;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1807;
	            this.match(Java20Parser.RBRACE);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1809;
	            this.match(Java20Parser.LBRACE);
	            this.state = 1813;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,193,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1810;
	                    this.switchBlockStatementGroup(); 
	                }
	                this.state = 1815;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,193,this._ctx);
	            }

	            this.state = 1821;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===23 || _la===29) {
	                this.state = 1816;
	                this.switchLabel();
	                this.state = 1817;
	                this.match(Java20Parser.COLON);
	                this.state = 1823;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1824;
	            this.match(Java20Parser.RBRACE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchRule() {
	    let localctx = new SwitchRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, Java20Parser.RULE_switchRule);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1827;
	        this.switchLabel();
	        this.state = 1828;
	        this.match(Java20Parser.ARROW);
	        this.state = 1834;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 20:
	        case 22:
	        case 25:
	        case 31:
	        case 37:
	        case 44:
	        case 46:
	        case 48:
	        case 54:
	        case 57:
	        case 58:
	        case 60:
	        case 65:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 86:
	        case 91:
	        case 92:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 123:
	            this.state = 1829;
	            this.expression();
	            this.state = 1830;
	            this.match(Java20Parser.SEMI);
	            break;
	        case 78:
	            this.state = 1832;
	            this.block();
	            break;
	        case 61:
	            this.state = 1833;
	            this.throwStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchBlockStatementGroup() {
	    let localctx = new SwitchBlockStatementGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, Java20Parser.RULE_switchBlockStatementGroup);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1836;
	        this.switchLabel();
	        this.state = 1837;
	        this.match(Java20Parser.COLON);
	        this.state = 1843;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===23 || _la===29) {
	            this.state = 1838;
	            this.switchLabel();
	            this.state = 1839;
	            this.match(Java20Parser.COLON);
	            this.state = 1845;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1846;
	        this.blockStatements();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchLabel() {
	    let localctx = new SwitchLabelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, Java20Parser.RULE_switchLabel);
	    var _la = 0;
	    try {
	        this.state = 1858;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 23:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1848;
	            this.match(Java20Parser.CASE);
	            this.state = 1849;
	            this.caseConstant();
	            this.state = 1854;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===83) {
	                this.state = 1850;
	                this.match(Java20Parser.COMMA);
	                this.state = 1851;
	                this.caseConstant();
	                this.state = 1856;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case 29:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1857;
	            this.match(Java20Parser.DEFAULT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseConstant() {
	    let localctx = new CaseConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, Java20Parser.RULE_caseConstant);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1860;
	        this.conditionalExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whileStatement() {
	    let localctx = new WhileStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, Java20Parser.RULE_whileStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1862;
	        this.match(Java20Parser.WHILE);
	        this.state = 1863;
	        this.match(Java20Parser.LPAREN);
	        this.state = 1864;
	        this.expression();
	        this.state = 1865;
	        this.match(Java20Parser.RPAREN);
	        this.state = 1866;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whileStatementNoShortIf() {
	    let localctx = new WhileStatementNoShortIfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, Java20Parser.RULE_whileStatementNoShortIf);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1868;
	        this.match(Java20Parser.WHILE);
	        this.state = 1869;
	        this.match(Java20Parser.LPAREN);
	        this.state = 1870;
	        this.expression();
	        this.state = 1871;
	        this.match(Java20Parser.RPAREN);
	        this.state = 1872;
	        this.statementNoShortIf();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	doStatement() {
	    let localctx = new DoStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, Java20Parser.RULE_doStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1874;
	        this.match(Java20Parser.DO);
	        this.state = 1875;
	        this.statement();
	        this.state = 1876;
	        this.match(Java20Parser.WHILE);
	        this.state = 1877;
	        this.match(Java20Parser.LPAREN);
	        this.state = 1878;
	        this.expression();
	        this.state = 1879;
	        this.match(Java20Parser.RPAREN);
	        this.state = 1880;
	        this.match(Java20Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forStatement() {
	    let localctx = new ForStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, Java20Parser.RULE_forStatement);
	    try {
	        this.state = 1884;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,200,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1882;
	            this.basicForStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1883;
	            this.enhancedForStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forStatementNoShortIf() {
	    let localctx = new ForStatementNoShortIfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, Java20Parser.RULE_forStatementNoShortIf);
	    try {
	        this.state = 1888;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,201,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1886;
	            this.basicForStatementNoShortIf();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1887;
	            this.enhancedForStatementNoShortIf();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	basicForStatement() {
	    let localctx = new BasicForStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, Java20Parser.RULE_basicForStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1890;
	        this.match(Java20Parser.FOR);
	        this.state = 1891;
	        this.match(Java20Parser.LPAREN);
	        this.state = 1893;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186313728) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 1112025605) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 131327) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097155) !== 0)) {
	            this.state = 1892;
	            this.forInit();
	        }

	        this.state = 1895;
	        this.match(Java20Parser.SEMI);
	        this.state = 1897;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186280960) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	            this.state = 1896;
	            this.expression();
	        }

	        this.state = 1899;
	        this.match(Java20Parser.SEMI);
	        this.state = 1901;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186280960) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 278006401) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 131327) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097155) !== 0)) {
	            this.state = 1900;
	            this.forUpdate();
	        }

	        this.state = 1903;
	        this.match(Java20Parser.RPAREN);
	        this.state = 1904;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	basicForStatementNoShortIf() {
	    let localctx = new BasicForStatementNoShortIfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, Java20Parser.RULE_basicForStatementNoShortIf);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1906;
	        this.match(Java20Parser.FOR);
	        this.state = 1907;
	        this.match(Java20Parser.LPAREN);
	        this.state = 1909;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186313728) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 1112025605) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 131327) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097155) !== 0)) {
	            this.state = 1908;
	            this.forInit();
	        }

	        this.state = 1911;
	        this.match(Java20Parser.SEMI);
	        this.state = 1913;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186280960) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	            this.state = 1912;
	            this.expression();
	        }

	        this.state = 1915;
	        this.match(Java20Parser.SEMI);
	        this.state = 1917;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186280960) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 278006401) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 131327) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097155) !== 0)) {
	            this.state = 1916;
	            this.forUpdate();
	        }

	        this.state = 1919;
	        this.match(Java20Parser.RPAREN);
	        this.state = 1920;
	        this.statementNoShortIf();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forInit() {
	    let localctx = new ForInitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, Java20Parser.RULE_forInit);
	    try {
	        this.state = 1924;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,208,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1922;
	            this.statementExpressionList();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1923;
	            this.localVariableDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forUpdate() {
	    let localctx = new ForUpdateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, Java20Parser.RULE_forUpdate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1926;
	        this.statementExpressionList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementExpressionList() {
	    let localctx = new StatementExpressionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, Java20Parser.RULE_statementExpressionList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1928;
	        this.statementExpression();
	        this.state = 1933;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===83) {
	            this.state = 1929;
	            this.match(Java20Parser.COMMA);
	            this.state = 1930;
	            this.statementExpression();
	            this.state = 1935;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enhancedForStatement() {
	    let localctx = new EnhancedForStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, Java20Parser.RULE_enhancedForStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1936;
	        this.match(Java20Parser.FOR);
	        this.state = 1937;
	        this.match(Java20Parser.LPAREN);
	        this.state = 1938;
	        this.localVariableDeclaration();
	        this.state = 1939;
	        this.match(Java20Parser.COLON);
	        this.state = 1940;
	        this.expression();
	        this.state = 1941;
	        this.match(Java20Parser.RPAREN);
	        this.state = 1942;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enhancedForStatementNoShortIf() {
	    let localctx = new EnhancedForStatementNoShortIfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, Java20Parser.RULE_enhancedForStatementNoShortIf);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1944;
	        this.match(Java20Parser.FOR);
	        this.state = 1945;
	        this.match(Java20Parser.LPAREN);
	        this.state = 1946;
	        this.localVariableDeclaration();
	        this.state = 1947;
	        this.match(Java20Parser.COLON);
	        this.state = 1948;
	        this.expression();
	        this.state = 1949;
	        this.match(Java20Parser.RPAREN);
	        this.state = 1950;
	        this.statementNoShortIf();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	breakStatement() {
	    let localctx = new BreakStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, Java20Parser.RULE_breakStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1952;
	        this.match(Java20Parser.BREAK);
	        this.state = 1954;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===123) {
	            this.state = 1953;
	            this.match(Java20Parser.Identifier);
	        }

	        this.state = 1956;
	        this.match(Java20Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	continueStatement() {
	    let localctx = new ContinueStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, Java20Parser.RULE_continueStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1958;
	        this.match(Java20Parser.CONTINUE);
	        this.state = 1960;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===123) {
	            this.state = 1959;
	            this.match(Java20Parser.Identifier);
	        }

	        this.state = 1962;
	        this.match(Java20Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatement() {
	    let localctx = new ReturnStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, Java20Parser.RULE_returnStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1964;
	        this.match(Java20Parser.RETURN);
	        this.state = 1966;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186280960) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	            this.state = 1965;
	            this.expression();
	        }

	        this.state = 1968;
	        this.match(Java20Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	throwStatement() {
	    let localctx = new ThrowStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, Java20Parser.RULE_throwStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1970;
	        this.match(Java20Parser.THROW);
	        this.state = 1971;
	        this.expression();
	        this.state = 1972;
	        this.match(Java20Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	synchronizedStatement() {
	    let localctx = new SynchronizedStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, Java20Parser.RULE_synchronizedStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1974;
	        this.match(Java20Parser.SYNCHRONIZED);
	        this.state = 1975;
	        this.match(Java20Parser.LPAREN);
	        this.state = 1976;
	        this.expression();
	        this.state = 1977;
	        this.match(Java20Parser.RPAREN);
	        this.state = 1978;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tryStatement() {
	    let localctx = new TryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, Java20Parser.RULE_tryStatement);
	    var _la = 0;
	    try {
	        this.state = 1996;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,214,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1980;
	            this.match(Java20Parser.TRY);
	            this.state = 1981;
	            this.block();
	            this.state = 1982;
	            this.catches();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1984;
	            this.match(Java20Parser.TRY);
	            this.state = 1985;
	            this.block();
	            this.state = 1986;
	            this.finallyBlock();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1988;
	            this.match(Java20Parser.TRY);
	            this.state = 1989;
	            this.block();
	            this.state = 1991;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===24) {
	                this.state = 1990;
	                this.catches();
	            }

	            this.state = 1993;
	            this.finallyBlock();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1995;
	            this.tryWithResourcesStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catches() {
	    let localctx = new CatchesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, Java20Parser.RULE_catches);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1998;
	        this.catchClause();
	        this.state = 2002;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 1999;
	            this.catchClause();
	            this.state = 2004;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catchClause() {
	    let localctx = new CatchClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, Java20Parser.RULE_catchClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2005;
	        this.match(Java20Parser.CATCH);
	        this.state = 2006;
	        this.match(Java20Parser.LPAREN);
	        this.state = 2007;
	        this.catchFormalParameter();
	        this.state = 2008;
	        this.match(Java20Parser.RPAREN);
	        this.state = 2009;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catchFormalParameter() {
	    let localctx = new CatchFormalParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, Java20Parser.RULE_catchFormalParameter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2014;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===35 || _la===86) {
	            this.state = 2011;
	            this.variableModifier();
	            this.state = 2016;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2017;
	        this.catchType();
	        this.state = 2018;
	        this.variableDeclaratorId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catchType() {
	    let localctx = new CatchTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, Java20Parser.RULE_catchType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2020;
	        this.unannClassType();
	        this.state = 2025;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===109) {
	            this.state = 2021;
	            this.match(Java20Parser.BITOR);
	            this.state = 2022;
	            this.classType();
	            this.state = 2027;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	finallyBlock() {
	    let localctx = new FinallyBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, Java20Parser.RULE_finallyBlock);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2028;
	        this.match(Java20Parser.FINALLY);
	        this.state = 2029;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tryWithResourcesStatement() {
	    let localctx = new TryWithResourcesStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, Java20Parser.RULE_tryWithResourcesStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2031;
	        this.match(Java20Parser.TRY);
	        this.state = 2032;
	        this.resourceSpecification();
	        this.state = 2033;
	        this.block();
	        this.state = 2035;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 2034;
	            this.catches();
	        }

	        this.state = 2038;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===36) {
	            this.state = 2037;
	            this.finallyBlock();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resourceSpecification() {
	    let localctx = new ResourceSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, Java20Parser.RULE_resourceSpecification);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2040;
	        this.match(Java20Parser.LPAREN);
	        this.state = 2041;
	        this.resourceList();
	        this.state = 2043;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===82) {
	            this.state = 2042;
	            this.match(Java20Parser.SEMI);
	        }

	        this.state = 2045;
	        this.match(Java20Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resourceList() {
	    let localctx = new ResourceListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, Java20Parser.RULE_resourceList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2047;
	        this.resource();
	        this.state = 2052;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,221,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2048;
	                this.match(Java20Parser.SEMI);
	                this.state = 2049;
	                this.resource(); 
	            }
	            this.state = 2054;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,221,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resource() {
	    let localctx = new ResourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, Java20Parser.RULE_resource);
	    try {
	        this.state = 2057;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,222,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2055;
	            this.localVariableDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2056;
	            this.variableAccess();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableAccess() {
	    let localctx = new VariableAccessContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, Java20Parser.RULE_variableAccess);
	    try {
	        this.state = 2061;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,223,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2059;
	            this.expressionName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2060;
	            this.fieldAccess();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldStatement() {
	    let localctx = new YieldStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, Java20Parser.RULE_yieldStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2063;
	        this.match(Java20Parser.YIELD);
	        this.state = 2064;
	        this.expression();
	        this.state = 2065;
	        this.match(Java20Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pattern() {
	    let localctx = new PatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, Java20Parser.RULE_pattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2067;
	        this.typePattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typePattern() {
	    let localctx = new TypePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, Java20Parser.RULE_typePattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2069;
	        this.localVariableDeclaration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 388, Java20Parser.RULE_expression);
	    try {
	        this.state = 2073;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,224,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2071;
	            this.lambdaExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2072;
	            this.assignmentExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primary() {
	    let localctx = new PrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, Java20Parser.RULE_primary);
	    try {
	        this.state = 2077;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,225,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2075;
	            this.primaryNoNewArray();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2076;
	            this.arrayCreationExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryNoNewArray() {
	    let localctx = new PrimaryNoNewArrayContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 392, Java20Parser.RULE_primaryNoNewArray);
	    var _la = 0;
	    try {
	        this.state = 2296;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,269,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2079;
	            this.literal();
	            this.state = 2081;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,226,this._ctx);
	            if(la_===1) {
	                this.state = 2080;
	                this.pNNA();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2083;
	            this.classLiteral();
	            this.state = 2085;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,227,this._ctx);
	            if(la_===1) {
	                this.state = 2084;
	                this.pNNA();

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2087;
	            this.match(Java20Parser.THIS);
	            this.state = 2089;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,228,this._ctx);
	            if(la_===1) {
	                this.state = 2088;
	                this.pNNA();

	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2091;
	            this.typeName();
	            this.state = 2092;
	            this.match(Java20Parser.DOT);
	            this.state = 2093;
	            this.match(Java20Parser.THIS);
	            this.state = 2095;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,229,this._ctx);
	            if(la_===1) {
	                this.state = 2094;
	                this.pNNA();

	            }
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2097;
	            this.match(Java20Parser.LPAREN);
	            this.state = 2098;
	            this.expression();
	            this.state = 2099;
	            this.match(Java20Parser.RPAREN);
	            this.state = 2101;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,230,this._ctx);
	            if(la_===1) {
	                this.state = 2100;
	                this.pNNA();

	            }
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2103;
	            this.unqualifiedClassInstanceCreationExpression();
	            this.state = 2105;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,231,this._ctx);
	            if(la_===1) {
	                this.state = 2104;
	                this.pNNA();

	            }
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2107;
	            this.expressionName();
	            this.state = 2108;
	            this.match(Java20Parser.DOT);
	            this.state = 2109;
	            this.unqualifiedClassInstanceCreationExpression();
	            this.state = 2111;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,232,this._ctx);
	            if(la_===1) {
	                this.state = 2110;
	                this.pNNA();

	            }
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2113;
	            this.arrayCreationExpression();
	            this.state = 2114;
	            this.match(Java20Parser.DOT);
	            this.state = 2115;
	            this.unqualifiedClassInstanceCreationExpression();
	            this.state = 2117;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,233,this._ctx);
	            if(la_===1) {
	                this.state = 2116;
	                this.pNNA();

	            }
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2119;
	            this.arrayCreationExpression();
	            this.state = 2120;
	            this.match(Java20Parser.DOT);
	            this.state = 2121;
	            this.match(Java20Parser.Identifier);
	            this.state = 2123;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,234,this._ctx);
	            if(la_===1) {
	                this.state = 2122;
	                this.pNNA();

	            }
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2125;
	            this.match(Java20Parser.SUPER);
	            this.state = 2126;
	            this.match(Java20Parser.DOT);
	            this.state = 2127;
	            this.match(Java20Parser.Identifier);
	            this.state = 2129;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,235,this._ctx);
	            if(la_===1) {
	                this.state = 2128;
	                this.pNNA();

	            }
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2131;
	            this.typeName();
	            this.state = 2132;
	            this.match(Java20Parser.DOT);
	            this.state = 2133;
	            this.match(Java20Parser.SUPER);
	            this.state = 2134;
	            this.match(Java20Parser.DOT);
	            this.state = 2135;
	            this.match(Java20Parser.Identifier);
	            this.state = 2137;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,236,this._ctx);
	            if(la_===1) {
	                this.state = 2136;
	                this.pNNA();

	            }
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2139;
	            this.expressionName();
	            this.state = 2140;
	            this.match(Java20Parser.LBRACK);
	            this.state = 2141;
	            this.expression();
	            this.state = 2142;
	            this.match(Java20Parser.RBRACK);
	            this.state = 2144;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,237,this._ctx);
	            if(la_===1) {
	                this.state = 2143;
	                this.pNNA();

	            }
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 2146;
	            this.arrayCreationExpressionWithInitializer();
	            this.state = 2147;
	            this.match(Java20Parser.LBRACK);
	            this.state = 2148;
	            this.expression();
	            this.state = 2149;
	            this.match(Java20Parser.RBRACK);
	            this.state = 2151;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,238,this._ctx);
	            if(la_===1) {
	                this.state = 2150;
	                this.pNNA();

	            }
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 2153;
	            this.methodName();
	            this.state = 2154;
	            this.match(Java20Parser.LPAREN);
	            this.state = 2156;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186280960) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	                this.state = 2155;
	                this.argumentList();
	            }

	            this.state = 2158;
	            this.match(Java20Parser.RPAREN);
	            this.state = 2160;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,240,this._ctx);
	            if(la_===1) {
	                this.state = 2159;
	                this.pNNA();

	            }
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 2162;
	            this.typeName();
	            this.state = 2163;
	            this.match(Java20Parser.DOT);
	            this.state = 2165;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2164;
	                this.typeArguments();
	            }

	            this.state = 2167;
	            this.match(Java20Parser.Identifier);
	            this.state = 2168;
	            this.match(Java20Parser.LPAREN);
	            this.state = 2170;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186280960) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	                this.state = 2169;
	                this.argumentList();
	            }

	            this.state = 2172;
	            this.match(Java20Parser.RPAREN);
	            this.state = 2174;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,243,this._ctx);
	            if(la_===1) {
	                this.state = 2173;
	                this.pNNA();

	            }
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 2176;
	            this.expressionName();
	            this.state = 2177;
	            this.match(Java20Parser.DOT);
	            this.state = 2179;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2178;
	                this.typeArguments();
	            }

	            this.state = 2181;
	            this.match(Java20Parser.Identifier);
	            this.state = 2182;
	            this.match(Java20Parser.LPAREN);
	            this.state = 2184;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186280960) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	                this.state = 2183;
	                this.argumentList();
	            }

	            this.state = 2186;
	            this.match(Java20Parser.RPAREN);
	            this.state = 2188;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,246,this._ctx);
	            if(la_===1) {
	                this.state = 2187;
	                this.pNNA();

	            }
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 2190;
	            this.arrayCreationExpression();
	            this.state = 2191;
	            this.match(Java20Parser.DOT);
	            this.state = 2193;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2192;
	                this.typeArguments();
	            }

	            this.state = 2195;
	            this.match(Java20Parser.Identifier);
	            this.state = 2196;
	            this.match(Java20Parser.LPAREN);
	            this.state = 2198;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186280960) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	                this.state = 2197;
	                this.argumentList();
	            }

	            this.state = 2200;
	            this.match(Java20Parser.RPAREN);
	            this.state = 2202;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,249,this._ctx);
	            if(la_===1) {
	                this.state = 2201;
	                this.pNNA();

	            }
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 2204;
	            this.match(Java20Parser.SUPER);
	            this.state = 2205;
	            this.match(Java20Parser.DOT);
	            this.state = 2207;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2206;
	                this.typeArguments();
	            }

	            this.state = 2209;
	            this.match(Java20Parser.Identifier);
	            this.state = 2210;
	            this.match(Java20Parser.LPAREN);
	            this.state = 2212;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186280960) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	                this.state = 2211;
	                this.argumentList();
	            }

	            this.state = 2214;
	            this.match(Java20Parser.RPAREN);
	            this.state = 2216;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,252,this._ctx);
	            if(la_===1) {
	                this.state = 2215;
	                this.pNNA();

	            }
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 2218;
	            this.typeName();
	            this.state = 2219;
	            this.match(Java20Parser.DOT);
	            this.state = 2220;
	            this.match(Java20Parser.SUPER);
	            this.state = 2221;
	            this.match(Java20Parser.DOT);
	            this.state = 2223;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2222;
	                this.typeArguments();
	            }

	            this.state = 2225;
	            this.match(Java20Parser.Identifier);
	            this.state = 2226;
	            this.match(Java20Parser.LPAREN);
	            this.state = 2228;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186280960) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	                this.state = 2227;
	                this.argumentList();
	            }

	            this.state = 2230;
	            this.match(Java20Parser.RPAREN);
	            this.state = 2232;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,255,this._ctx);
	            if(la_===1) {
	                this.state = 2231;
	                this.pNNA();

	            }
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 2234;
	            this.expressionName();
	            this.state = 2235;
	            this.match(Java20Parser.COLONCOLON);
	            this.state = 2237;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2236;
	                this.typeArguments();
	            }

	            this.state = 2239;
	            this.match(Java20Parser.Identifier);
	            this.state = 2241;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,257,this._ctx);
	            if(la_===1) {
	                this.state = 2240;
	                this.pNNA();

	            }
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 2243;
	            this.arrayCreationExpression();
	            this.state = 2244;
	            this.match(Java20Parser.COLONCOLON);
	            this.state = 2246;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2245;
	                this.typeArguments();
	            }

	            this.state = 2248;
	            this.match(Java20Parser.Identifier);
	            this.state = 2250;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,259,this._ctx);
	            if(la_===1) {
	                this.state = 2249;
	                this.pNNA();

	            }
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 2252;
	            this.referenceType();
	            this.state = 2253;
	            this.match(Java20Parser.COLONCOLON);
	            this.state = 2255;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2254;
	                this.typeArguments();
	            }

	            this.state = 2257;
	            this.match(Java20Parser.Identifier);
	            this.state = 2259;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,261,this._ctx);
	            if(la_===1) {
	                this.state = 2258;
	                this.pNNA();

	            }
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 2261;
	            this.match(Java20Parser.SUPER);
	            this.state = 2262;
	            this.match(Java20Parser.COLONCOLON);
	            this.state = 2264;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2263;
	                this.typeArguments();
	            }

	            this.state = 2266;
	            this.match(Java20Parser.Identifier);
	            this.state = 2268;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,263,this._ctx);
	            if(la_===1) {
	                this.state = 2267;
	                this.pNNA();

	            }
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 2270;
	            this.typeName();
	            this.state = 2271;
	            this.match(Java20Parser.DOT);
	            this.state = 2272;
	            this.match(Java20Parser.SUPER);
	            this.state = 2273;
	            this.match(Java20Parser.COLONCOLON);
	            this.state = 2275;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2274;
	                this.typeArguments();
	            }

	            this.state = 2277;
	            this.match(Java20Parser.Identifier);
	            this.state = 2279;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,265,this._ctx);
	            if(la_===1) {
	                this.state = 2278;
	                this.pNNA();

	            }
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 2281;
	            this.classType();
	            this.state = 2282;
	            this.match(Java20Parser.COLONCOLON);
	            this.state = 2284;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2283;
	                this.typeArguments();
	            }

	            this.state = 2286;
	            this.match(Java20Parser.NEW);
	            this.state = 2288;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,267,this._ctx);
	            if(la_===1) {
	                this.state = 2287;
	                this.pNNA();

	            }
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 2290;
	            this.arrayType();
	            this.state = 2291;
	            this.match(Java20Parser.COLONCOLON);
	            this.state = 2292;
	            this.match(Java20Parser.NEW);
	            this.state = 2294;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,268,this._ctx);
	            if(la_===1) {
	                this.state = 2293;
	                this.pNNA();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pNNA() {
	    let localctx = new PNNAContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, Java20Parser.RULE_pNNA);
	    var _la = 0;
	    try {
	        this.state = 2335;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,278,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2298;
	            this.match(Java20Parser.DOT);
	            this.state = 2299;
	            this.unqualifiedClassInstanceCreationExpression();
	            this.state = 2301;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,270,this._ctx);
	            if(la_===1) {
	                this.state = 2300;
	                this.pNNA();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2303;
	            this.match(Java20Parser.DOT);
	            this.state = 2304;
	            this.match(Java20Parser.Identifier);
	            this.state = 2306;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,271,this._ctx);
	            if(la_===1) {
	                this.state = 2305;
	                this.pNNA();

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2308;
	            this.match(Java20Parser.LBRACK);
	            this.state = 2309;
	            this.expression();
	            this.state = 2310;
	            this.match(Java20Parser.RBRACK);
	            this.state = 2312;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,272,this._ctx);
	            if(la_===1) {
	                this.state = 2311;
	                this.pNNA();

	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2314;
	            this.match(Java20Parser.DOT);
	            this.state = 2316;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2315;
	                this.typeArguments();
	            }

	            this.state = 2318;
	            this.match(Java20Parser.Identifier);
	            this.state = 2319;
	            this.match(Java20Parser.LPAREN);
	            this.state = 2321;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186280960) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	                this.state = 2320;
	                this.argumentList();
	            }

	            this.state = 2323;
	            this.match(Java20Parser.RPAREN);
	            this.state = 2325;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,275,this._ctx);
	            if(la_===1) {
	                this.state = 2324;
	                this.pNNA();

	            }
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2327;
	            this.match(Java20Parser.COLONCOLON);
	            this.state = 2329;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2328;
	                this.typeArguments();
	            }

	            this.state = 2331;
	            this.match(Java20Parser.Identifier);
	            this.state = 2333;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,277,this._ctx);
	            if(la_===1) {
	                this.state = 2332;
	                this.pNNA();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classLiteral() {
	    let localctx = new ClassLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 396, Java20Parser.RULE_classLiteral);
	    var _la = 0;
	    try {
	        this.state = 2372;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 123:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2337;
	            this.typeName();
	            this.state = 2342;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===80) {
	                this.state = 2338;
	                this.match(Java20Parser.LBRACK);
	                this.state = 2339;
	                this.match(Java20Parser.RBRACK);
	                this.state = 2344;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2345;
	            this.match(Java20Parser.DOT);
	            this.state = 2346;
	            this.match(Java20Parser.CLASS);
	            break;
	        case 22:
	        case 25:
	        case 31:
	        case 37:
	        case 44:
	        case 46:
	        case 54:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2348;
	            this.numericType();
	            this.state = 2353;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===80) {
	                this.state = 2349;
	                this.match(Java20Parser.LBRACK);
	                this.state = 2350;
	                this.match(Java20Parser.RBRACK);
	                this.state = 2355;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2356;
	            this.match(Java20Parser.DOT);
	            this.state = 2357;
	            this.match(Java20Parser.CLASS);
	            break;
	        case 20:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2359;
	            this.match(Java20Parser.BOOLEAN);
	            this.state = 2364;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===80) {
	                this.state = 2360;
	                this.match(Java20Parser.LBRACK);
	                this.state = 2361;
	                this.match(Java20Parser.RBRACK);
	                this.state = 2366;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2367;
	            this.match(Java20Parser.DOT);
	            this.state = 2368;
	            this.match(Java20Parser.CLASS);
	            break;
	        case 65:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2369;
	            this.match(Java20Parser.VOID);
	            this.state = 2370;
	            this.match(Java20Parser.DOT);
	            this.state = 2371;
	            this.match(Java20Parser.CLASS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classInstanceCreationExpression() {
	    let localctx = new ClassInstanceCreationExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 398, Java20Parser.RULE_classInstanceCreationExpression);
	    try {
	        this.state = 2383;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,283,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2374;
	            this.unqualifiedClassInstanceCreationExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2375;
	            this.expressionName();
	            this.state = 2376;
	            this.match(Java20Parser.DOT);
	            this.state = 2377;
	            this.unqualifiedClassInstanceCreationExpression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2379;
	            this.primary();
	            this.state = 2380;
	            this.match(Java20Parser.DOT);
	            this.state = 2381;
	            this.unqualifiedClassInstanceCreationExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unqualifiedClassInstanceCreationExpression() {
	    let localctx = new UnqualifiedClassInstanceCreationExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 400, Java20Parser.RULE_unqualifiedClassInstanceCreationExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2385;
	        this.match(Java20Parser.NEW);
	        this.state = 2387;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===90) {
	            this.state = 2386;
	            this.typeArguments();
	        }

	        this.state = 2389;
	        this.classOrInterfaceTypeToInstantiate();
	        this.state = 2390;
	        this.match(Java20Parser.LPAREN);
	        this.state = 2392;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186280960) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	            this.state = 2391;
	            this.argumentList();
	        }

	        this.state = 2394;
	        this.match(Java20Parser.RPAREN);
	        this.state = 2396;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,286,this._ctx);
	        if(la_===1) {
	            this.state = 2395;
	            this.classBody();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classOrInterfaceTypeToInstantiate() {
	    let localctx = new ClassOrInterfaceTypeToInstantiateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 402, Java20Parser.RULE_classOrInterfaceTypeToInstantiate);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2401;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 2398;
	            this.annotation();
	            this.state = 2403;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2404;
	        this.match(Java20Parser.Identifier);
	        this.state = 2415;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===84) {
	            this.state = 2405;
	            this.match(Java20Parser.DOT);
	            this.state = 2409;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===86) {
	                this.state = 2406;
	                this.annotation();
	                this.state = 2411;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2412;
	            this.match(Java20Parser.Identifier);
	            this.state = 2417;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2419;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===4 || _la===90) {
	            this.state = 2418;
	            this.typeArgumentsOrDiamond();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeArgumentsOrDiamond() {
	    let localctx = new TypeArgumentsOrDiamondContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 404, Java20Parser.RULE_typeArgumentsOrDiamond);
	    try {
	        this.state = 2423;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 90:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2421;
	            this.typeArguments();
	            break;
	        case 4:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2422;
	            this.match(Java20Parser.OACA);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayCreationExpression() {
	    let localctx = new ArrayCreationExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 406, Java20Parser.RULE_arrayCreationExpression);
	    try {
	        this.state = 2427;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,292,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2425;
	            this.arrayCreationExpressionWithoutInitializer();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2426;
	            this.arrayCreationExpressionWithInitializer();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayCreationExpressionWithoutInitializer() {
	    let localctx = new ArrayCreationExpressionWithoutInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 408, Java20Parser.RULE_arrayCreationExpressionWithoutInitializer);
	    try {
	        this.state = 2441;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,295,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2429;
	            this.match(Java20Parser.NEW);
	            this.state = 2430;
	            this.primitiveType();
	            this.state = 2431;
	            this.dimExprs();
	            this.state = 2433;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,293,this._ctx);
	            if(la_===1) {
	                this.state = 2432;
	                this.dims();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2435;
	            this.match(Java20Parser.NEW);
	            this.state = 2436;
	            this.classType();
	            this.state = 2437;
	            this.dimExprs();
	            this.state = 2439;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,294,this._ctx);
	            if(la_===1) {
	                this.state = 2438;
	                this.dims();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayCreationExpressionWithInitializer() {
	    let localctx = new ArrayCreationExpressionWithInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 410, Java20Parser.RULE_arrayCreationExpressionWithInitializer);
	    try {
	        this.state = 2453;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,296,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2443;
	            this.match(Java20Parser.NEW);
	            this.state = 2444;
	            this.primitiveType();
	            this.state = 2445;
	            this.dims();
	            this.state = 2446;
	            this.arrayInitializer();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2448;
	            this.match(Java20Parser.NEW);
	            this.state = 2449;
	            this.classOrInterfaceType();
	            this.state = 2450;
	            this.dims();
	            this.state = 2451;
	            this.arrayInitializer();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dimExprs() {
	    let localctx = new DimExprsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 412, Java20Parser.RULE_dimExprs);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2455;
	        this.dimExpr();
	        this.state = 2459;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,297,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2456;
	                this.dimExpr(); 
	            }
	            this.state = 2461;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,297,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dimExpr() {
	    let localctx = new DimExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 414, Java20Parser.RULE_dimExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2465;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 2462;
	            this.annotation();
	            this.state = 2467;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2468;
	        this.match(Java20Parser.LBRACK);
	        this.state = 2469;
	        this.expression();
	        this.state = 2470;
	        this.match(Java20Parser.RBRACK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayAccess() {
	    let localctx = new ArrayAccessContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 416, Java20Parser.RULE_arrayAccess);
	    try {
	        this.state = 2487;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,299,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2472;
	            this.expressionName();
	            this.state = 2473;
	            this.match(Java20Parser.LBRACK);
	            this.state = 2474;
	            this.expression();
	            this.state = 2475;
	            this.match(Java20Parser.RBRACK);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2477;
	            this.primaryNoNewArray();
	            this.state = 2478;
	            this.match(Java20Parser.LBRACK);
	            this.state = 2479;
	            this.expression();
	            this.state = 2480;
	            this.match(Java20Parser.RBRACK);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2482;
	            this.arrayCreationExpressionWithInitializer();
	            this.state = 2483;
	            this.match(Java20Parser.LBRACK);
	            this.state = 2484;
	            this.expression();
	            this.state = 2485;
	            this.match(Java20Parser.RBRACK);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldAccess() {
	    let localctx = new FieldAccessContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 418, Java20Parser.RULE_fieldAccess);
	    try {
	        this.state = 2502;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,300,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2489;
	            this.primary();
	            this.state = 2490;
	            this.match(Java20Parser.DOT);
	            this.state = 2491;
	            this.match(Java20Parser.Identifier);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2493;
	            this.match(Java20Parser.SUPER);
	            this.state = 2494;
	            this.match(Java20Parser.DOT);
	            this.state = 2495;
	            this.match(Java20Parser.Identifier);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2496;
	            this.typeName();
	            this.state = 2497;
	            this.match(Java20Parser.DOT);
	            this.state = 2498;
	            this.match(Java20Parser.SUPER);
	            this.state = 2499;
	            this.match(Java20Parser.DOT);
	            this.state = 2500;
	            this.match(Java20Parser.Identifier);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodInvocation() {
	    let localctx = new MethodInvocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 420, Java20Parser.RULE_methodInvocation);
	    var _la = 0;
	    try {
	        this.state = 2572;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,312,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2504;
	            this.methodName();
	            this.state = 2505;
	            this.match(Java20Parser.LPAREN);
	            this.state = 2507;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186280960) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	                this.state = 2506;
	                this.argumentList();
	            }

	            this.state = 2509;
	            this.match(Java20Parser.RPAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2511;
	            this.typeName();
	            this.state = 2512;
	            this.match(Java20Parser.DOT);
	            this.state = 2514;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2513;
	                this.typeArguments();
	            }

	            this.state = 2516;
	            this.match(Java20Parser.Identifier);
	            this.state = 2517;
	            this.match(Java20Parser.LPAREN);
	            this.state = 2519;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186280960) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	                this.state = 2518;
	                this.argumentList();
	            }

	            this.state = 2521;
	            this.match(Java20Parser.RPAREN);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2523;
	            this.expressionName();
	            this.state = 2524;
	            this.match(Java20Parser.DOT);
	            this.state = 2526;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2525;
	                this.typeArguments();
	            }

	            this.state = 2528;
	            this.match(Java20Parser.Identifier);
	            this.state = 2529;
	            this.match(Java20Parser.LPAREN);
	            this.state = 2531;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186280960) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	                this.state = 2530;
	                this.argumentList();
	            }

	            this.state = 2533;
	            this.match(Java20Parser.RPAREN);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2535;
	            this.primary();
	            this.state = 2536;
	            this.match(Java20Parser.DOT);
	            this.state = 2538;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2537;
	                this.typeArguments();
	            }

	            this.state = 2540;
	            this.match(Java20Parser.Identifier);
	            this.state = 2541;
	            this.match(Java20Parser.LPAREN);
	            this.state = 2543;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186280960) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	                this.state = 2542;
	                this.argumentList();
	            }

	            this.state = 2545;
	            this.match(Java20Parser.RPAREN);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2547;
	            this.match(Java20Parser.SUPER);
	            this.state = 2548;
	            this.match(Java20Parser.DOT);
	            this.state = 2550;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2549;
	                this.typeArguments();
	            }

	            this.state = 2552;
	            this.match(Java20Parser.Identifier);
	            this.state = 2553;
	            this.match(Java20Parser.LPAREN);
	            this.state = 2555;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186280960) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	                this.state = 2554;
	                this.argumentList();
	            }

	            this.state = 2557;
	            this.match(Java20Parser.RPAREN);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2558;
	            this.typeName();
	            this.state = 2559;
	            this.match(Java20Parser.DOT);
	            this.state = 2560;
	            this.match(Java20Parser.SUPER);
	            this.state = 2561;
	            this.match(Java20Parser.DOT);
	            this.state = 2563;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2562;
	                this.typeArguments();
	            }

	            this.state = 2565;
	            this.match(Java20Parser.Identifier);
	            this.state = 2566;
	            this.match(Java20Parser.LPAREN);
	            this.state = 2568;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186280960) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	                this.state = 2567;
	                this.argumentList();
	            }

	            this.state = 2570;
	            this.match(Java20Parser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argumentList() {
	    let localctx = new ArgumentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 422, Java20Parser.RULE_argumentList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2574;
	        this.expression();
	        this.state = 2579;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===83) {
	            this.state = 2575;
	            this.match(Java20Parser.COMMA);
	            this.state = 2576;
	            this.expression();
	            this.state = 2581;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodReference() {
	    let localctx = new MethodReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 424, Java20Parser.RULE_methodReference);
	    var _la = 0;
	    try {
	        this.state = 2629;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,320,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2582;
	            this.expressionName();
	            this.state = 2583;
	            this.match(Java20Parser.COLONCOLON);
	            this.state = 2585;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2584;
	                this.typeArguments();
	            }

	            this.state = 2587;
	            this.match(Java20Parser.Identifier);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2589;
	            this.primary();
	            this.state = 2590;
	            this.match(Java20Parser.COLONCOLON);
	            this.state = 2592;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2591;
	                this.typeArguments();
	            }

	            this.state = 2594;
	            this.match(Java20Parser.Identifier);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2596;
	            this.referenceType();
	            this.state = 2597;
	            this.match(Java20Parser.COLONCOLON);
	            this.state = 2599;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2598;
	                this.typeArguments();
	            }

	            this.state = 2601;
	            this.match(Java20Parser.Identifier);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2603;
	            this.match(Java20Parser.SUPER);
	            this.state = 2604;
	            this.match(Java20Parser.COLONCOLON);
	            this.state = 2606;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2605;
	                this.typeArguments();
	            }

	            this.state = 2608;
	            this.match(Java20Parser.Identifier);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2609;
	            this.typeName();
	            this.state = 2610;
	            this.match(Java20Parser.DOT);
	            this.state = 2611;
	            this.match(Java20Parser.SUPER);
	            this.state = 2612;
	            this.match(Java20Parser.COLONCOLON);
	            this.state = 2614;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2613;
	                this.typeArguments();
	            }

	            this.state = 2616;
	            this.match(Java20Parser.Identifier);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2618;
	            this.classType();
	            this.state = 2619;
	            this.match(Java20Parser.COLONCOLON);
	            this.state = 2621;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2620;
	                this.typeArguments();
	            }

	            this.state = 2623;
	            this.match(Java20Parser.NEW);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2625;
	            this.arrayType();
	            this.state = 2626;
	            this.match(Java20Parser.COLONCOLON);
	            this.state = 2627;
	            this.match(Java20Parser.NEW);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	postfixExpression() {
	    let localctx = new PostfixExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 426, Java20Parser.RULE_postfixExpression);
	    try {
	        this.state = 2639;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,323,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2631;
	            this.primary();
	            this.state = 2633;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,321,this._ctx);
	            if(la_===1) {
	                this.state = 2632;
	                this.pfE();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2635;
	            this.expressionName();
	            this.state = 2637;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,322,this._ctx);
	            if(la_===1) {
	                this.state = 2636;
	                this.pfE();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pfE() {
	    let localctx = new PfEContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 428, Java20Parser.RULE_pfE);
	    try {
	        this.state = 2649;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 102:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2641;
	            this.match(Java20Parser.INC);
	            this.state = 2643;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,324,this._ctx);
	            if(la_===1) {
	                this.state = 2642;
	                this.pfE();

	            }
	            break;
	        case 103:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2645;
	            this.match(Java20Parser.DEC);
	            this.state = 2647;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,325,this._ctx);
	            if(la_===1) {
	                this.state = 2646;
	                this.pfE();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	postIncrementExpression() {
	    let localctx = new PostIncrementExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 430, Java20Parser.RULE_postIncrementExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2651;
	        this.postfixExpression();
	        this.state = 2652;
	        this.match(Java20Parser.INC);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	postDecrementExpression() {
	    let localctx = new PostDecrementExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 432, Java20Parser.RULE_postDecrementExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2654;
	        this.postfixExpression();
	        this.state = 2655;
	        this.match(Java20Parser.DEC);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryExpression() {
	    let localctx = new UnaryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 434, Java20Parser.RULE_unaryExpression);
	    try {
	        this.state = 2664;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 102:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2657;
	            this.preIncrementExpression();
	            break;
	        case 103:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2658;
	            this.preDecrementExpression();
	            break;
	        case 104:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2659;
	            this.match(Java20Parser.ADD);
	            this.state = 2660;
	            this.unaryExpression();
	            break;
	        case 105:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2661;
	            this.match(Java20Parser.SUB);
	            this.state = 2662;
	            this.unaryExpression();
	            break;
	        case 20:
	        case 22:
	        case 25:
	        case 31:
	        case 37:
	        case 44:
	        case 46:
	        case 48:
	        case 54:
	        case 57:
	        case 58:
	        case 60:
	        case 65:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 86:
	        case 91:
	        case 92:
	        case 123:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2663;
	            this.unaryExpressionNotPlusMinus();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	preIncrementExpression() {
	    let localctx = new PreIncrementExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 436, Java20Parser.RULE_preIncrementExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2666;
	        this.match(Java20Parser.INC);
	        this.state = 2667;
	        this.unaryExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	preDecrementExpression() {
	    let localctx = new PreDecrementExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 438, Java20Parser.RULE_preDecrementExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2669;
	        this.match(Java20Parser.DEC);
	        this.state = 2670;
	        this.unaryExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryExpressionNotPlusMinus() {
	    let localctx = new UnaryExpressionNotPlusMinusContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 440, Java20Parser.RULE_unaryExpressionNotPlusMinus);
	    try {
	        this.state = 2679;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,328,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2672;
	            this.postfixExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2673;
	            this.match(Java20Parser.TILDE);
	            this.state = 2674;
	            this.unaryExpression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2675;
	            this.match(Java20Parser.BANG);
	            this.state = 2676;
	            this.unaryExpression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2677;
	            this.castExpression();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2678;
	            this.switchExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	castExpression() {
	    let localctx = new CastExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 442, Java20Parser.RULE_castExpression);
	    var _la = 0;
	    try {
	        this.state = 2708;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,331,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2681;
	            this.match(Java20Parser.LPAREN);
	            this.state = 2682;
	            this.primitiveType();
	            this.state = 2683;
	            this.match(Java20Parser.RPAREN);
	            this.state = 2684;
	            this.unaryExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2686;
	            this.match(Java20Parser.LPAREN);
	            this.state = 2687;
	            this.referenceType();
	            this.state = 2691;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===108) {
	                this.state = 2688;
	                this.additionalBound();
	                this.state = 2693;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2694;
	            this.match(Java20Parser.RPAREN);
	            this.state = 2695;
	            this.unaryExpressionNotPlusMinus();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2697;
	            this.match(Java20Parser.LPAREN);
	            this.state = 2698;
	            this.referenceType();
	            this.state = 2702;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===108) {
	                this.state = 2699;
	                this.additionalBound();
	                this.state = 2704;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2705;
	            this.match(Java20Parser.RPAREN);
	            this.state = 2706;
	            this.lambdaExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	multiplicativeExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new MultiplicativeExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 444;
	    this.enterRecursionRule(localctx, 444, Java20Parser.RULE_multiplicativeExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2711;
	        this.unaryExpression();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2724;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,333,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 2722;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,332,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new MultiplicativeExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_multiplicativeExpression);
	                    this.state = 2713;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 2714;
	                    this.match(Java20Parser.MUL);
	                    this.state = 2715;
	                    this.unaryExpression();
	                    break;

	                case 2:
	                    localctx = new MultiplicativeExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_multiplicativeExpression);
	                    this.state = 2716;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 2717;
	                    this.match(Java20Parser.DIV);
	                    this.state = 2718;
	                    this.unaryExpression();
	                    break;

	                case 3:
	                    localctx = new MultiplicativeExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_multiplicativeExpression);
	                    this.state = 2719;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 2720;
	                    this.match(Java20Parser.MOD);
	                    this.state = 2721;
	                    this.unaryExpression();
	                    break;

	                } 
	            }
	            this.state = 2726;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,333,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	additiveExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new AdditiveExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 446;
	    this.enterRecursionRule(localctx, 446, Java20Parser.RULE_additiveExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2728;
	        this.multiplicativeExpression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2738;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,335,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 2736;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,334,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new AdditiveExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_additiveExpression);
	                    this.state = 2730;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 2731;
	                    this.match(Java20Parser.ADD);
	                    this.state = 2732;
	                    this.multiplicativeExpression(0);
	                    break;

	                case 2:
	                    localctx = new AdditiveExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_additiveExpression);
	                    this.state = 2733;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 2734;
	                    this.match(Java20Parser.SUB);
	                    this.state = 2735;
	                    this.multiplicativeExpression(0);
	                    break;

	                } 
	            }
	            this.state = 2740;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,335,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	shiftExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ShiftExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 448;
	    this.enterRecursionRule(localctx, 448, Java20Parser.RULE_shiftExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2742;
	        this.additiveExpression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2759;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,337,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 2757;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,336,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ShiftExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_shiftExpression);
	                    this.state = 2744;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 2745;
	                    this.match(Java20Parser.LT);
	                    this.state = 2746;
	                    this.match(Java20Parser.LT);
	                    this.state = 2747;
	                    this.additiveExpression(0);
	                    break;

	                case 2:
	                    localctx = new ShiftExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_shiftExpression);
	                    this.state = 2748;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 2749;
	                    this.match(Java20Parser.GT);
	                    this.state = 2750;
	                    this.match(Java20Parser.GT);
	                    this.state = 2751;
	                    this.additiveExpression(0);
	                    break;

	                case 3:
	                    localctx = new ShiftExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_shiftExpression);
	                    this.state = 2752;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 2753;
	                    this.match(Java20Parser.GT);
	                    this.state = 2754;
	                    this.match(Java20Parser.GT);
	                    this.state = 2755;
	                    this.match(Java20Parser.GT);
	                    this.state = 2756;
	                    this.additiveExpression(0);
	                    break;

	                } 
	            }
	            this.state = 2761;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,337,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	relationalExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new RelationalExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 450;
	    this.enterRecursionRule(localctx, 450, Java20Parser.RULE_relationalExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2763;
	        this.shiftExpression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2785;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,340,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 2783;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,339,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new RelationalExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_relationalExpression);
	                    this.state = 2765;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 2766;
	                    this.match(Java20Parser.LT);
	                    this.state = 2767;
	                    this.shiftExpression(0);
	                    break;

	                case 2:
	                    localctx = new RelationalExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_relationalExpression);
	                    this.state = 2768;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 2769;
	                    this.match(Java20Parser.GT);
	                    this.state = 2770;
	                    this.shiftExpression(0);
	                    break;

	                case 3:
	                    localctx = new RelationalExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_relationalExpression);
	                    this.state = 2771;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 2772;
	                    this.match(Java20Parser.LE);
	                    this.state = 2773;
	                    this.shiftExpression(0);
	                    break;

	                case 4:
	                    localctx = new RelationalExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_relationalExpression);
	                    this.state = 2774;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 2775;
	                    this.match(Java20Parser.GE);
	                    this.state = 2776;
	                    this.shiftExpression(0);
	                    break;

	                case 5:
	                    localctx = new RelationalExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_relationalExpression);
	                    this.state = 2777;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 2778;
	                    this.match(Java20Parser.INSTANCEOF);
	                    this.state = 2781;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,338,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 2779;
	                        this.referenceType();
	                        break;

	                    case 2:
	                        this.state = 2780;
	                        this.pattern();
	                        break;

	                    }
	                    break;

	                } 
	            }
	            this.state = 2787;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,340,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	equalityExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new EqualityExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 452;
	    this.enterRecursionRule(localctx, 452, Java20Parser.RULE_equalityExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2789;
	        this.relationalExpression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2799;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,342,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 2797;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,341,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new EqualityExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_equalityExpression);
	                    this.state = 2791;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 2792;
	                    this.match(Java20Parser.EQUAL);
	                    this.state = 2793;
	                    this.relationalExpression(0);
	                    break;

	                case 2:
	                    localctx = new EqualityExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_equalityExpression);
	                    this.state = 2794;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 2795;
	                    this.match(Java20Parser.NOTEQUAL);
	                    this.state = 2796;
	                    this.relationalExpression(0);
	                    break;

	                } 
	            }
	            this.state = 2801;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,342,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	andExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new AndExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 454;
	    this.enterRecursionRule(localctx, 454, Java20Parser.RULE_andExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2803;
	        this.equalityExpression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2810;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,343,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new AndExpressionContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_andExpression);
	                this.state = 2805;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2806;
	                this.match(Java20Parser.BITAND);
	                this.state = 2807;
	                this.equalityExpression(0); 
	            }
	            this.state = 2812;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,343,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	exclusiveOrExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExclusiveOrExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 456;
	    this.enterRecursionRule(localctx, 456, Java20Parser.RULE_exclusiveOrExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2814;
	        this.andExpression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2821;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,344,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new ExclusiveOrExpressionContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_exclusiveOrExpression);
	                this.state = 2816;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2817;
	                this.match(Java20Parser.CARET);
	                this.state = 2818;
	                this.andExpression(0); 
	            }
	            this.state = 2823;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,344,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	inclusiveOrExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new InclusiveOrExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 458;
	    this.enterRecursionRule(localctx, 458, Java20Parser.RULE_inclusiveOrExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2825;
	        this.exclusiveOrExpression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2832;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,345,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new InclusiveOrExpressionContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_inclusiveOrExpression);
	                this.state = 2827;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2828;
	                this.match(Java20Parser.BITOR);
	                this.state = 2829;
	                this.exclusiveOrExpression(0); 
	            }
	            this.state = 2834;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,345,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	conditionalAndExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ConditionalAndExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 460;
	    this.enterRecursionRule(localctx, 460, Java20Parser.RULE_conditionalAndExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2836;
	        this.inclusiveOrExpression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2843;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,346,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new ConditionalAndExpressionContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_conditionalAndExpression);
	                this.state = 2838;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2839;
	                this.match(Java20Parser.AND);
	                this.state = 2840;
	                this.inclusiveOrExpression(0); 
	            }
	            this.state = 2845;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,346,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	conditionalOrExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ConditionalOrExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 462;
	    this.enterRecursionRule(localctx, 462, Java20Parser.RULE_conditionalOrExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2847;
	        this.conditionalAndExpression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2854;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,347,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new ConditionalOrExpressionContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_conditionalOrExpression);
	                this.state = 2849;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2850;
	                this.match(Java20Parser.OR);
	                this.state = 2851;
	                this.conditionalAndExpression(0); 
	            }
	            this.state = 2856;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,347,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	conditionalExpression() {
	    let localctx = new ConditionalExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 464, Java20Parser.RULE_conditionalExpression);
	    try {
	        this.state = 2870;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,348,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2857;
	            this.conditionalOrExpression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2858;
	            this.conditionalOrExpression(0);
	            this.state = 2859;
	            this.match(Java20Parser.QUESTION);
	            this.state = 2860;
	            this.expression();
	            this.state = 2861;
	            this.match(Java20Parser.COLON);
	            this.state = 2862;
	            this.conditionalExpression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2864;
	            this.conditionalOrExpression(0);
	            this.state = 2865;
	            this.match(Java20Parser.QUESTION);
	            this.state = 2866;
	            this.expression();
	            this.state = 2867;
	            this.match(Java20Parser.COLON);
	            this.state = 2868;
	            this.lambdaExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentExpression() {
	    let localctx = new AssignmentExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 466, Java20Parser.RULE_assignmentExpression);
	    try {
	        this.state = 2874;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,349,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2872;
	            this.conditionalExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2873;
	            this.assignment();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignment() {
	    let localctx = new AssignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 468, Java20Parser.RULE_assignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2876;
	        this.leftHandSide();
	        this.state = 2877;
	        this.assignmentOperator();
	        this.state = 2878;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	leftHandSide() {
	    let localctx = new LeftHandSideContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 470, Java20Parser.RULE_leftHandSide);
	    try {
	        this.state = 2883;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,350,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2880;
	            this.expressionName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2881;
	            this.fieldAccess();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2882;
	            this.arrayAccess();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentOperator() {
	    let localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 472, Java20Parser.RULE_assignmentOperator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2885;
	        _la = this._input.LA(1);
	        if(!(((((_la - 88)) & ~0x1f) === 0 && ((1 << (_la - 88)) & 4278190081) !== 0) || ((((_la - 120)) & ~0x1f) === 0 && ((1 << (_la - 120)) & 7) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaExpression() {
	    let localctx = new LambdaExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 474, Java20Parser.RULE_lambdaExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2887;
	        this.lambdaParameters();
	        this.state = 2888;
	        this.match(Java20Parser.ARROW);
	        this.state = 2889;
	        this.lambdaBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaParameters() {
	    let localctx = new LambdaParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 476, Java20Parser.RULE_lambdaParameters);
	    var _la = 0;
	    try {
	        this.state = 2897;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 76:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2891;
	            this.match(Java20Parser.LPAREN);
	            this.state = 2893;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186313728) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 526853) !== 0) || _la===86 || _la===123) {
	                this.state = 2892;
	                this.lambdaParameterList();
	            }

	            this.state = 2895;
	            this.match(Java20Parser.RPAREN);
	            break;
	        case 123:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2896;
	            this.match(Java20Parser.Identifier);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaParameterList() {
	    let localctx = new LambdaParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 478, Java20Parser.RULE_lambdaParameterList);
	    var _la = 0;
	    try {
	        this.state = 2915;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,355,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2899;
	            this.lambdaParameter();
	            this.state = 2904;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===83) {
	                this.state = 2900;
	                this.match(Java20Parser.COMMA);
	                this.state = 2901;
	                this.lambdaParameter();
	                this.state = 2906;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2907;
	            this.match(Java20Parser.Identifier);
	            this.state = 2912;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===83) {
	                this.state = 2908;
	                this.match(Java20Parser.COMMA);
	                this.state = 2909;
	                this.match(Java20Parser.Identifier);
	                this.state = 2914;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaParameter() {
	    let localctx = new LambdaParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 480, Java20Parser.RULE_lambdaParameter);
	    var _la = 0;
	    try {
	        this.state = 2927;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,357,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2920;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===35 || _la===86) {
	                this.state = 2917;
	                this.variableModifier();
	                this.state = 2922;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2923;
	            this.lambdaParameterType();
	            this.state = 2924;
	            this.variableDeclaratorId();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2926;
	            this.variableArityParameter();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaParameterType() {
	    let localctx = new LambdaParameterTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 482, Java20Parser.RULE_lambdaParameterType);
	    try {
	        this.state = 2931;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 20:
	        case 22:
	        case 25:
	        case 31:
	        case 37:
	        case 44:
	        case 46:
	        case 54:
	        case 123:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2929;
	            this.unannType();
	            break;
	        case 15:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2930;
	            this.match(Java20Parser.VAR);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaBody() {
	    let localctx = new LambdaBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 484, Java20Parser.RULE_lambdaBody);
	    try {
	        this.state = 2935;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 20:
	        case 22:
	        case 25:
	        case 31:
	        case 37:
	        case 44:
	        case 46:
	        case 48:
	        case 54:
	        case 57:
	        case 58:
	        case 60:
	        case 65:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 86:
	        case 91:
	        case 92:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 123:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2933;
	            this.expression();
	            break;
	        case 78:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2934;
	            this.block();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchExpression() {
	    let localctx = new SwitchExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 486, Java20Parser.RULE_switchExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2937;
	        this.match(Java20Parser.SWITCH);
	        this.state = 2938;
	        this.match(Java20Parser.LPAREN);
	        this.state = 2939;
	        this.expression();
	        this.state = 2940;
	        this.match(Java20Parser.RPAREN);
	        this.state = 2941;
	        this.switchBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constantExpression() {
	    let localctx = new ConstantExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 488, Java20Parser.RULE_constantExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2943;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

Java20Parser.EOF = antlr4.Token.EOF;
Java20Parser.EXPORTS = 1;
Java20Parser.MODULE = 2;
Java20Parser.NONSEALED = 3;
Java20Parser.OACA = 4;
Java20Parser.OPEN = 5;
Java20Parser.OPENS = 6;
Java20Parser.PERMITS = 7;
Java20Parser.PROVIDES = 8;
Java20Parser.RECORD = 9;
Java20Parser.REQUIRES = 10;
Java20Parser.SEALED = 11;
Java20Parser.TO = 12;
Java20Parser.TRANSITIVE = 13;
Java20Parser.USES = 14;
Java20Parser.VAR = 15;
Java20Parser.WITH = 16;
Java20Parser.YIELD = 17;
Java20Parser.ABSTRACT = 18;
Java20Parser.ASSERT = 19;
Java20Parser.BOOLEAN = 20;
Java20Parser.BREAK = 21;
Java20Parser.BYTE = 22;
Java20Parser.CASE = 23;
Java20Parser.CATCH = 24;
Java20Parser.CHAR = 25;
Java20Parser.CLASS = 26;
Java20Parser.CONST = 27;
Java20Parser.CONTINUE = 28;
Java20Parser.DEFAULT = 29;
Java20Parser.DO = 30;
Java20Parser.DOUBLE = 31;
Java20Parser.ELSE = 32;
Java20Parser.ENUM = 33;
Java20Parser.EXTENDS = 34;
Java20Parser.FINAL = 35;
Java20Parser.FINALLY = 36;
Java20Parser.FLOAT = 37;
Java20Parser.FOR = 38;
Java20Parser.IF = 39;
Java20Parser.GOTO = 40;
Java20Parser.IMPLEMENTS = 41;
Java20Parser.IMPORT = 42;
Java20Parser.INSTANCEOF = 43;
Java20Parser.INT = 44;
Java20Parser.INTERFACE = 45;
Java20Parser.LONG = 46;
Java20Parser.NATIVE = 47;
Java20Parser.NEW = 48;
Java20Parser.PACKAGE = 49;
Java20Parser.PRIVATE = 50;
Java20Parser.PROTECTED = 51;
Java20Parser.PUBLIC = 52;
Java20Parser.RETURN = 53;
Java20Parser.SHORT = 54;
Java20Parser.STATIC = 55;
Java20Parser.STRICTFP = 56;
Java20Parser.SUPER = 57;
Java20Parser.SWITCH = 58;
Java20Parser.SYNCHRONIZED = 59;
Java20Parser.THIS = 60;
Java20Parser.THROW = 61;
Java20Parser.THROWS = 62;
Java20Parser.TRANSIENT = 63;
Java20Parser.TRY = 64;
Java20Parser.VOID = 65;
Java20Parser.VOLATILE = 66;
Java20Parser.WHILE = 67;
Java20Parser.UNDER_SCORE = 68;
Java20Parser.IntegerLiteral = 69;
Java20Parser.FloatingPointLiteral = 70;
Java20Parser.BooleanLiteral = 71;
Java20Parser.CharacterLiteral = 72;
Java20Parser.StringLiteral = 73;
Java20Parser.TextBlock = 74;
Java20Parser.NullLiteral = 75;
Java20Parser.LPAREN = 76;
Java20Parser.RPAREN = 77;
Java20Parser.LBRACE = 78;
Java20Parser.RBRACE = 79;
Java20Parser.LBRACK = 80;
Java20Parser.RBRACK = 81;
Java20Parser.SEMI = 82;
Java20Parser.COMMA = 83;
Java20Parser.DOT = 84;
Java20Parser.ELLIPSIS = 85;
Java20Parser.AT = 86;
Java20Parser.COLONCOLON = 87;
Java20Parser.ASSIGN = 88;
Java20Parser.GT = 89;
Java20Parser.LT = 90;
Java20Parser.BANG = 91;
Java20Parser.TILDE = 92;
Java20Parser.QUESTION = 93;
Java20Parser.COLON = 94;
Java20Parser.ARROW = 95;
Java20Parser.EQUAL = 96;
Java20Parser.LE = 97;
Java20Parser.GE = 98;
Java20Parser.NOTEQUAL = 99;
Java20Parser.AND = 100;
Java20Parser.OR = 101;
Java20Parser.INC = 102;
Java20Parser.DEC = 103;
Java20Parser.ADD = 104;
Java20Parser.SUB = 105;
Java20Parser.MUL = 106;
Java20Parser.DIV = 107;
Java20Parser.BITAND = 108;
Java20Parser.BITOR = 109;
Java20Parser.CARET = 110;
Java20Parser.MOD = 111;
Java20Parser.ADD_ASSIGN = 112;
Java20Parser.SUB_ASSIGN = 113;
Java20Parser.MUL_ASSIGN = 114;
Java20Parser.DIV_ASSIGN = 115;
Java20Parser.AND_ASSIGN = 116;
Java20Parser.OR_ASSIGN = 117;
Java20Parser.XOR_ASSIGN = 118;
Java20Parser.MOD_ASSIGN = 119;
Java20Parser.LSHIFT_ASSIGN = 120;
Java20Parser.RSHIFT_ASSIGN = 121;
Java20Parser.URSHIFT_ASSIGN = 122;
Java20Parser.Identifier = 123;
Java20Parser.WS = 124;
Java20Parser.COMMENT = 125;
Java20Parser.LINE_COMMENT = 126;

Java20Parser.RULE_start_ = 0;
Java20Parser.RULE_literal = 1;
Java20Parser.RULE_typeIdentifier = 2;
Java20Parser.RULE_unqualifiedMethodIdentifier = 3;
Java20Parser.RULE_primitiveType = 4;
Java20Parser.RULE_numericType = 5;
Java20Parser.RULE_integralType = 6;
Java20Parser.RULE_floatingPointType = 7;
Java20Parser.RULE_referenceType = 8;
Java20Parser.RULE_coit = 9;
Java20Parser.RULE_classOrInterfaceType = 10;
Java20Parser.RULE_classType = 11;
Java20Parser.RULE_interfaceType = 12;
Java20Parser.RULE_typeVariable = 13;
Java20Parser.RULE_arrayType = 14;
Java20Parser.RULE_dims = 15;
Java20Parser.RULE_typeParameter = 16;
Java20Parser.RULE_typeParameterModifier = 17;
Java20Parser.RULE_typeBound = 18;
Java20Parser.RULE_additionalBound = 19;
Java20Parser.RULE_typeArguments = 20;
Java20Parser.RULE_typeArgumentList = 21;
Java20Parser.RULE_typeArgument = 22;
Java20Parser.RULE_wildcard = 23;
Java20Parser.RULE_wildcardBounds = 24;
Java20Parser.RULE_moduleName = 25;
Java20Parser.RULE_packageName = 26;
Java20Parser.RULE_typeName = 27;
Java20Parser.RULE_packageOrTypeName = 28;
Java20Parser.RULE_expressionName = 29;
Java20Parser.RULE_methodName = 30;
Java20Parser.RULE_ambiguousName = 31;
Java20Parser.RULE_compilationUnit = 32;
Java20Parser.RULE_ordinaryCompilationUnit = 33;
Java20Parser.RULE_modularCompilationUnit = 34;
Java20Parser.RULE_packageDeclaration = 35;
Java20Parser.RULE_packageModifier = 36;
Java20Parser.RULE_importDeclaration = 37;
Java20Parser.RULE_singleTypeImportDeclaration = 38;
Java20Parser.RULE_typeImportOnDemandDeclaration = 39;
Java20Parser.RULE_singleStaticImportDeclaration = 40;
Java20Parser.RULE_staticImportOnDemandDeclaration = 41;
Java20Parser.RULE_topLevelClassOrInterfaceDeclaration = 42;
Java20Parser.RULE_moduleDeclaration = 43;
Java20Parser.RULE_moduleDirective = 44;
Java20Parser.RULE_requiresModifier = 45;
Java20Parser.RULE_classDeclaration = 46;
Java20Parser.RULE_normalClassDeclaration = 47;
Java20Parser.RULE_classModifier = 48;
Java20Parser.RULE_typeParameters = 49;
Java20Parser.RULE_typeParameterList = 50;
Java20Parser.RULE_classExtends = 51;
Java20Parser.RULE_classImplements = 52;
Java20Parser.RULE_interfaceTypeList = 53;
Java20Parser.RULE_classPermits = 54;
Java20Parser.RULE_classBody = 55;
Java20Parser.RULE_classBodyDeclaration = 56;
Java20Parser.RULE_classMemberDeclaration = 57;
Java20Parser.RULE_fieldDeclaration = 58;
Java20Parser.RULE_fieldModifier = 59;
Java20Parser.RULE_variableDeclaratorList = 60;
Java20Parser.RULE_variableDeclarator = 61;
Java20Parser.RULE_variableDeclaratorId = 62;
Java20Parser.RULE_variableInitializer = 63;
Java20Parser.RULE_unannType = 64;
Java20Parser.RULE_unannPrimitiveType = 65;
Java20Parser.RULE_unannReferenceType = 66;
Java20Parser.RULE_unannClassOrInterfaceType = 67;
Java20Parser.RULE_uCOIT = 68;
Java20Parser.RULE_unannClassType = 69;
Java20Parser.RULE_unannInterfaceType = 70;
Java20Parser.RULE_unannTypeVariable = 71;
Java20Parser.RULE_unannArrayType = 72;
Java20Parser.RULE_methodDeclaration = 73;
Java20Parser.RULE_methodModifier = 74;
Java20Parser.RULE_methodHeader = 75;
Java20Parser.RULE_result = 76;
Java20Parser.RULE_methodDeclarator = 77;
Java20Parser.RULE_receiverParameter = 78;
Java20Parser.RULE_formalParameterList = 79;
Java20Parser.RULE_formalParameter = 80;
Java20Parser.RULE_variableArityParameter = 81;
Java20Parser.RULE_variableModifier = 82;
Java20Parser.RULE_throwsT = 83;
Java20Parser.RULE_exceptionTypeList = 84;
Java20Parser.RULE_exceptionType = 85;
Java20Parser.RULE_methodBody = 86;
Java20Parser.RULE_instanceInitializer = 87;
Java20Parser.RULE_staticInitializer = 88;
Java20Parser.RULE_constructorDeclaration = 89;
Java20Parser.RULE_constructorModifier = 90;
Java20Parser.RULE_constructorDeclarator = 91;
Java20Parser.RULE_simpleTypeName = 92;
Java20Parser.RULE_constructorBody = 93;
Java20Parser.RULE_explicitConstructorInvocation = 94;
Java20Parser.RULE_enumDeclaration = 95;
Java20Parser.RULE_enumBody = 96;
Java20Parser.RULE_enumConstantList = 97;
Java20Parser.RULE_enumConstant = 98;
Java20Parser.RULE_enumConstantModifier = 99;
Java20Parser.RULE_enumBodyDeclarations = 100;
Java20Parser.RULE_recordDeclaration = 101;
Java20Parser.RULE_recordHeader = 102;
Java20Parser.RULE_recordComponentList = 103;
Java20Parser.RULE_recordComponent = 104;
Java20Parser.RULE_variableArityRecordComponent = 105;
Java20Parser.RULE_recordComponentModifier = 106;
Java20Parser.RULE_recordBody = 107;
Java20Parser.RULE_recordBodyDeclaration = 108;
Java20Parser.RULE_compactConstructorDeclaration = 109;
Java20Parser.RULE_interfaceDeclaration = 110;
Java20Parser.RULE_normalInterfaceDeclaration = 111;
Java20Parser.RULE_interfaceModifier = 112;
Java20Parser.RULE_interfaceExtends = 113;
Java20Parser.RULE_interfacePermits = 114;
Java20Parser.RULE_interfaceBody = 115;
Java20Parser.RULE_interfaceMemberDeclaration = 116;
Java20Parser.RULE_constantDeclaration = 117;
Java20Parser.RULE_constantModifier = 118;
Java20Parser.RULE_interfaceMethodDeclaration = 119;
Java20Parser.RULE_interfaceMethodModifier = 120;
Java20Parser.RULE_annotationInterfaceDeclaration = 121;
Java20Parser.RULE_annotationInterfaceBody = 122;
Java20Parser.RULE_annotationInterfaceMemberDeclaration = 123;
Java20Parser.RULE_annotationInterfaceElementDeclaration = 124;
Java20Parser.RULE_annotationInterfaceElementModifier = 125;
Java20Parser.RULE_defaultValue = 126;
Java20Parser.RULE_annotation = 127;
Java20Parser.RULE_normalAnnotation = 128;
Java20Parser.RULE_elementValuePairList = 129;
Java20Parser.RULE_elementValuePair = 130;
Java20Parser.RULE_elementValue = 131;
Java20Parser.RULE_elementValueArrayInitializer = 132;
Java20Parser.RULE_elementValueList = 133;
Java20Parser.RULE_markerAnnotation = 134;
Java20Parser.RULE_singleElementAnnotation = 135;
Java20Parser.RULE_arrayInitializer = 136;
Java20Parser.RULE_variableInitializerList = 137;
Java20Parser.RULE_block = 138;
Java20Parser.RULE_blockStatements = 139;
Java20Parser.RULE_blockStatement = 140;
Java20Parser.RULE_localClassOrInterfaceDeclaration = 141;
Java20Parser.RULE_localVariableDeclaration = 142;
Java20Parser.RULE_localVariableType = 143;
Java20Parser.RULE_localVariableDeclarationStatement = 144;
Java20Parser.RULE_statement = 145;
Java20Parser.RULE_statementNoShortIf = 146;
Java20Parser.RULE_statementWithoutTrailingSubstatement = 147;
Java20Parser.RULE_emptyStatement_ = 148;
Java20Parser.RULE_labeledStatement = 149;
Java20Parser.RULE_labeledStatementNoShortIf = 150;
Java20Parser.RULE_expressionStatement = 151;
Java20Parser.RULE_statementExpression = 152;
Java20Parser.RULE_ifThenStatement = 153;
Java20Parser.RULE_ifThenElseStatement = 154;
Java20Parser.RULE_ifThenElseStatementNoShortIf = 155;
Java20Parser.RULE_assertStatement = 156;
Java20Parser.RULE_switchStatement = 157;
Java20Parser.RULE_switchBlock = 158;
Java20Parser.RULE_switchRule = 159;
Java20Parser.RULE_switchBlockStatementGroup = 160;
Java20Parser.RULE_switchLabel = 161;
Java20Parser.RULE_caseConstant = 162;
Java20Parser.RULE_whileStatement = 163;
Java20Parser.RULE_whileStatementNoShortIf = 164;
Java20Parser.RULE_doStatement = 165;
Java20Parser.RULE_forStatement = 166;
Java20Parser.RULE_forStatementNoShortIf = 167;
Java20Parser.RULE_basicForStatement = 168;
Java20Parser.RULE_basicForStatementNoShortIf = 169;
Java20Parser.RULE_forInit = 170;
Java20Parser.RULE_forUpdate = 171;
Java20Parser.RULE_statementExpressionList = 172;
Java20Parser.RULE_enhancedForStatement = 173;
Java20Parser.RULE_enhancedForStatementNoShortIf = 174;
Java20Parser.RULE_breakStatement = 175;
Java20Parser.RULE_continueStatement = 176;
Java20Parser.RULE_returnStatement = 177;
Java20Parser.RULE_throwStatement = 178;
Java20Parser.RULE_synchronizedStatement = 179;
Java20Parser.RULE_tryStatement = 180;
Java20Parser.RULE_catches = 181;
Java20Parser.RULE_catchClause = 182;
Java20Parser.RULE_catchFormalParameter = 183;
Java20Parser.RULE_catchType = 184;
Java20Parser.RULE_finallyBlock = 185;
Java20Parser.RULE_tryWithResourcesStatement = 186;
Java20Parser.RULE_resourceSpecification = 187;
Java20Parser.RULE_resourceList = 188;
Java20Parser.RULE_resource = 189;
Java20Parser.RULE_variableAccess = 190;
Java20Parser.RULE_yieldStatement = 191;
Java20Parser.RULE_pattern = 192;
Java20Parser.RULE_typePattern = 193;
Java20Parser.RULE_expression = 194;
Java20Parser.RULE_primary = 195;
Java20Parser.RULE_primaryNoNewArray = 196;
Java20Parser.RULE_pNNA = 197;
Java20Parser.RULE_classLiteral = 198;
Java20Parser.RULE_classInstanceCreationExpression = 199;
Java20Parser.RULE_unqualifiedClassInstanceCreationExpression = 200;
Java20Parser.RULE_classOrInterfaceTypeToInstantiate = 201;
Java20Parser.RULE_typeArgumentsOrDiamond = 202;
Java20Parser.RULE_arrayCreationExpression = 203;
Java20Parser.RULE_arrayCreationExpressionWithoutInitializer = 204;
Java20Parser.RULE_arrayCreationExpressionWithInitializer = 205;
Java20Parser.RULE_dimExprs = 206;
Java20Parser.RULE_dimExpr = 207;
Java20Parser.RULE_arrayAccess = 208;
Java20Parser.RULE_fieldAccess = 209;
Java20Parser.RULE_methodInvocation = 210;
Java20Parser.RULE_argumentList = 211;
Java20Parser.RULE_methodReference = 212;
Java20Parser.RULE_postfixExpression = 213;
Java20Parser.RULE_pfE = 214;
Java20Parser.RULE_postIncrementExpression = 215;
Java20Parser.RULE_postDecrementExpression = 216;
Java20Parser.RULE_unaryExpression = 217;
Java20Parser.RULE_preIncrementExpression = 218;
Java20Parser.RULE_preDecrementExpression = 219;
Java20Parser.RULE_unaryExpressionNotPlusMinus = 220;
Java20Parser.RULE_castExpression = 221;
Java20Parser.RULE_multiplicativeExpression = 222;
Java20Parser.RULE_additiveExpression = 223;
Java20Parser.RULE_shiftExpression = 224;
Java20Parser.RULE_relationalExpression = 225;
Java20Parser.RULE_equalityExpression = 226;
Java20Parser.RULE_andExpression = 227;
Java20Parser.RULE_exclusiveOrExpression = 228;
Java20Parser.RULE_inclusiveOrExpression = 229;
Java20Parser.RULE_conditionalAndExpression = 230;
Java20Parser.RULE_conditionalOrExpression = 231;
Java20Parser.RULE_conditionalExpression = 232;
Java20Parser.RULE_assignmentExpression = 233;
Java20Parser.RULE_assignment = 234;
Java20Parser.RULE_leftHandSide = 235;
Java20Parser.RULE_assignmentOperator = 236;
Java20Parser.RULE_lambdaExpression = 237;
Java20Parser.RULE_lambdaParameters = 238;
Java20Parser.RULE_lambdaParameterList = 239;
Java20Parser.RULE_lambdaParameter = 240;
Java20Parser.RULE_lambdaParameterType = 241;
Java20Parser.RULE_lambdaBody = 242;
Java20Parser.RULE_switchExpression = 243;
Java20Parser.RULE_constantExpression = 244;

class Start_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_start_;
    }

	compilationUnit() {
	    return this.getTypedRuleContext(CompilationUnitContext,0);
	};

	EOF() {
	    return this.getToken(Java20Parser.EOF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterStart_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitStart_(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitStart_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_literal;
    }

	IntegerLiteral() {
	    return this.getToken(Java20Parser.IntegerLiteral, 0);
	};

	FloatingPointLiteral() {
	    return this.getToken(Java20Parser.FloatingPointLiteral, 0);
	};

	BooleanLiteral() {
	    return this.getToken(Java20Parser.BooleanLiteral, 0);
	};

	CharacterLiteral() {
	    return this.getToken(Java20Parser.CharacterLiteral, 0);
	};

	StringLiteral() {
	    return this.getToken(Java20Parser.StringLiteral, 0);
	};

	TextBlock() {
	    return this.getToken(Java20Parser.TextBlock, 0);
	};

	NullLiteral() {
	    return this.getToken(Java20Parser.NullLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_typeIdentifier;
    }

	Identifier() {
	    return this.getToken(Java20Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterTypeIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitTypeIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitTypeIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnqualifiedMethodIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_unqualifiedMethodIdentifier;
    }

	Identifier() {
	    return this.getToken(Java20Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterUnqualifiedMethodIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitUnqualifiedMethodIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitUnqualifiedMethodIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimitiveTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_primitiveType;
    }

	numericType() {
	    return this.getTypedRuleContext(NumericTypeContext,0);
	};

	BOOLEAN() {
	    return this.getToken(Java20Parser.BOOLEAN, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterPrimitiveType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitPrimitiveType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitPrimitiveType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_numericType;
    }

	integralType() {
	    return this.getTypedRuleContext(IntegralTypeContext,0);
	};

	floatingPointType() {
	    return this.getTypedRuleContext(FloatingPointTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitNumericType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitNumericType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IntegralTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_integralType;
    }

	BYTE() {
	    return this.getToken(Java20Parser.BYTE, 0);
	};

	SHORT() {
	    return this.getToken(Java20Parser.SHORT, 0);
	};

	INT() {
	    return this.getToken(Java20Parser.INT, 0);
	};

	LONG() {
	    return this.getToken(Java20Parser.LONG, 0);
	};

	CHAR() {
	    return this.getToken(Java20Parser.CHAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterIntegralType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitIntegralType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitIntegralType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FloatingPointTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_floatingPointType;
    }

	FLOAT() {
	    return this.getToken(Java20Parser.FLOAT, 0);
	};

	DOUBLE() {
	    return this.getToken(Java20Parser.DOUBLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterFloatingPointType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitFloatingPointType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitFloatingPointType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReferenceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_referenceType;
    }

	classOrInterfaceType() {
	    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
	};

	typeVariable() {
	    return this.getTypedRuleContext(TypeVariableContext,0);
	};

	arrayType() {
	    return this.getTypedRuleContext(ArrayTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterReferenceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitReferenceType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitReferenceType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CoitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_coit;
    }

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	coit() {
	    return this.getTypedRuleContext(CoitContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterCoit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitCoit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitCoit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassOrInterfaceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_classOrInterfaceType;
    }

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};

	packageName() {
	    return this.getTypedRuleContext(PackageNameContext,0);
	};

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	coit() {
	    return this.getTypedRuleContext(CoitContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterClassOrInterfaceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitClassOrInterfaceType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitClassOrInterfaceType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_classType;
    }

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	packageName() {
	    return this.getTypedRuleContext(PackageNameContext,0);
	};

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	classOrInterfaceType() {
	    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterClassType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitClassType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitClassType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InterfaceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_interfaceType;
    }

	classType() {
	    return this.getTypedRuleContext(ClassTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterInterfaceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitInterfaceType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitInterfaceType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_typeVariable;
    }

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterTypeVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitTypeVariable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitTypeVariable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_arrayType;
    }

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	dims() {
	    return this.getTypedRuleContext(DimsContext,0);
	};

	classType() {
	    return this.getTypedRuleContext(ClassTypeContext,0);
	};

	typeVariable() {
	    return this.getTypedRuleContext(TypeVariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterArrayType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitArrayType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitArrayType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DimsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_dims;
    }

	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.LBRACK);
	    } else {
	        return this.getToken(Java20Parser.LBRACK, i);
	    }
	};


	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.RBRACK);
	    } else {
	        return this.getToken(Java20Parser.RBRACK, i);
	    }
	};


	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterDims(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitDims(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitDims(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_typeParameter;
    }

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};

	typeParameterModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeParameterModifierContext);
	    } else {
	        return this.getTypedRuleContext(TypeParameterModifierContext,i);
	    }
	};

	typeBound() {
	    return this.getTypedRuleContext(TypeBoundContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterTypeParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitTypeParameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitTypeParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeParameterModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_typeParameterModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterTypeParameterModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitTypeParameterModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitTypeParameterModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_typeBound;
    }

	EXTENDS() {
	    return this.getToken(Java20Parser.EXTENDS, 0);
	};

	typeVariable() {
	    return this.getTypedRuleContext(TypeVariableContext,0);
	};

	classOrInterfaceType() {
	    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
	};

	additionalBound = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AdditionalBoundContext);
	    } else {
	        return this.getTypedRuleContext(AdditionalBoundContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterTypeBound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitTypeBound(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitTypeBound(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AdditionalBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_additionalBound;
    }

	BITAND() {
	    return this.getToken(Java20Parser.BITAND, 0);
	};

	interfaceType() {
	    return this.getTypedRuleContext(InterfaceTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterAdditionalBound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitAdditionalBound(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitAdditionalBound(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_typeArguments;
    }

	LT() {
	    return this.getToken(Java20Parser.LT, 0);
	};

	typeArgumentList() {
	    return this.getTypedRuleContext(TypeArgumentListContext,0);
	};

	GT() {
	    return this.getToken(Java20Parser.GT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterTypeArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitTypeArguments(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitTypeArguments(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeArgumentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_typeArgumentList;
    }

	typeArgument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeArgumentContext);
	    } else {
	        return this.getTypedRuleContext(TypeArgumentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COMMA);
	    } else {
	        return this.getToken(Java20Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterTypeArgumentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitTypeArgumentList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitTypeArgumentList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_typeArgument;
    }

	referenceType() {
	    return this.getTypedRuleContext(ReferenceTypeContext,0);
	};

	wildcard() {
	    return this.getTypedRuleContext(WildcardContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterTypeArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitTypeArgument(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitTypeArgument(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WildcardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_wildcard;
    }

	QUESTION() {
	    return this.getToken(Java20Parser.QUESTION, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	wildcardBounds() {
	    return this.getTypedRuleContext(WildcardBoundsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterWildcard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitWildcard(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitWildcard(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WildcardBoundsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_wildcardBounds;
    }

	EXTENDS() {
	    return this.getToken(Java20Parser.EXTENDS, 0);
	};

	referenceType() {
	    return this.getTypedRuleContext(ReferenceTypeContext,0);
	};

	SUPER() {
	    return this.getToken(Java20Parser.SUPER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterWildcardBounds(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitWildcardBounds(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitWildcardBounds(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ModuleNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_moduleName;
    }

	Identifier() {
	    return this.getToken(Java20Parser.Identifier, 0);
	};

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	moduleName() {
	    return this.getTypedRuleContext(ModuleNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterModuleName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitModuleName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitModuleName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PackageNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_packageName;
    }

	Identifier() {
	    return this.getToken(Java20Parser.Identifier, 0);
	};

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	packageName() {
	    return this.getTypedRuleContext(PackageNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterPackageName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitPackageName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitPackageName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_typeName;
    }

	packageName() {
	    return this.getTypedRuleContext(PackageNameContext,0);
	};

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitTypeName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitTypeName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PackageOrTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_packageOrTypeName;
    }

	Identifier() {
	    return this.getToken(Java20Parser.Identifier, 0);
	};

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	packageOrTypeName() {
	    return this.getTypedRuleContext(PackageOrTypeNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterPackageOrTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitPackageOrTypeName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitPackageOrTypeName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_expressionName;
    }

	Identifier() {
	    return this.getToken(Java20Parser.Identifier, 0);
	};

	ambiguousName() {
	    return this.getTypedRuleContext(AmbiguousNameContext,0);
	};

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterExpressionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitExpressionName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitExpressionName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_methodName;
    }

	unqualifiedMethodIdentifier() {
	    return this.getTypedRuleContext(UnqualifiedMethodIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterMethodName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitMethodName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitMethodName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AmbiguousNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_ambiguousName;
    }

	Identifier() {
	    return this.getToken(Java20Parser.Identifier, 0);
	};

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	ambiguousName() {
	    return this.getTypedRuleContext(AmbiguousNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterAmbiguousName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitAmbiguousName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitAmbiguousName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CompilationUnitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_compilationUnit;
    }

	ordinaryCompilationUnit() {
	    return this.getTypedRuleContext(OrdinaryCompilationUnitContext,0);
	};

	modularCompilationUnit() {
	    return this.getTypedRuleContext(ModularCompilationUnitContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterCompilationUnit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitCompilationUnit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitCompilationUnit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OrdinaryCompilationUnitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_ordinaryCompilationUnit;
    }

	packageDeclaration() {
	    return this.getTypedRuleContext(PackageDeclarationContext,0);
	};

	importDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ImportDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ImportDeclarationContext,i);
	    }
	};

	topLevelClassOrInterfaceDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TopLevelClassOrInterfaceDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(TopLevelClassOrInterfaceDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterOrdinaryCompilationUnit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitOrdinaryCompilationUnit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitOrdinaryCompilationUnit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ModularCompilationUnitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_modularCompilationUnit;
    }

	moduleDeclaration() {
	    return this.getTypedRuleContext(ModuleDeclarationContext,0);
	};

	importDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ImportDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ImportDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterModularCompilationUnit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitModularCompilationUnit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitModularCompilationUnit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PackageDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_packageDeclaration;
    }

	PACKAGE() {
	    return this.getToken(Java20Parser.PACKAGE, 0);
	};

	Identifier = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.Identifier);
	    } else {
	        return this.getToken(Java20Parser.Identifier, i);
	    }
	};


	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	packageModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PackageModifierContext);
	    } else {
	        return this.getTypedRuleContext(PackageModifierContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.DOT);
	    } else {
	        return this.getToken(Java20Parser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterPackageDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitPackageDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitPackageDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PackageModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_packageModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterPackageModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitPackageModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitPackageModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_importDeclaration;
    }

	singleTypeImportDeclaration() {
	    return this.getTypedRuleContext(SingleTypeImportDeclarationContext,0);
	};

	typeImportOnDemandDeclaration() {
	    return this.getTypedRuleContext(TypeImportOnDemandDeclarationContext,0);
	};

	singleStaticImportDeclaration() {
	    return this.getTypedRuleContext(SingleStaticImportDeclarationContext,0);
	};

	staticImportOnDemandDeclaration() {
	    return this.getTypedRuleContext(StaticImportOnDemandDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterImportDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitImportDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitImportDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SingleTypeImportDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_singleTypeImportDeclaration;
    }

	IMPORT() {
	    return this.getToken(Java20Parser.IMPORT, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterSingleTypeImportDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitSingleTypeImportDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitSingleTypeImportDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeImportOnDemandDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_typeImportOnDemandDeclaration;
    }

	IMPORT() {
	    return this.getToken(Java20Parser.IMPORT, 0);
	};

	packageOrTypeName() {
	    return this.getTypedRuleContext(PackageOrTypeNameContext,0);
	};

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	MUL() {
	    return this.getToken(Java20Parser.MUL, 0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterTypeImportOnDemandDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitTypeImportOnDemandDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitTypeImportOnDemandDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SingleStaticImportDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_singleStaticImportDeclaration;
    }

	IMPORT() {
	    return this.getToken(Java20Parser.IMPORT, 0);
	};

	STATIC() {
	    return this.getToken(Java20Parser.STATIC, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	Identifier() {
	    return this.getToken(Java20Parser.Identifier, 0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterSingleStaticImportDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitSingleStaticImportDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitSingleStaticImportDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StaticImportOnDemandDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_staticImportOnDemandDeclaration;
    }

	IMPORT() {
	    return this.getToken(Java20Parser.IMPORT, 0);
	};

	STATIC() {
	    return this.getToken(Java20Parser.STATIC, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	MUL() {
	    return this.getToken(Java20Parser.MUL, 0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterStaticImportOnDemandDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitStaticImportOnDemandDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitStaticImportOnDemandDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TopLevelClassOrInterfaceDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_topLevelClassOrInterfaceDeclaration;
    }

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	interfaceDeclaration() {
	    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterTopLevelClassOrInterfaceDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitTopLevelClassOrInterfaceDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitTopLevelClassOrInterfaceDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ModuleDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_moduleDeclaration;
    }

	MODULE() {
	    return this.getToken(Java20Parser.MODULE, 0);
	};

	Identifier = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.Identifier);
	    } else {
	        return this.getToken(Java20Parser.Identifier, i);
	    }
	};


	LBRACE() {
	    return this.getToken(Java20Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(Java20Parser.RBRACE, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	OPEN() {
	    return this.getToken(Java20Parser.OPEN, 0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.DOT);
	    } else {
	        return this.getToken(Java20Parser.DOT, i);
	    }
	};


	moduleDirective = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModuleDirectiveContext);
	    } else {
	        return this.getTypedRuleContext(ModuleDirectiveContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterModuleDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitModuleDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitModuleDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ModuleDirectiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_moduleDirective;
    }

	REQUIRES() {
	    return this.getToken(Java20Parser.REQUIRES, 0);
	};

	moduleName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModuleNameContext);
	    } else {
	        return this.getTypedRuleContext(ModuleNameContext,i);
	    }
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	requiresModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RequiresModifierContext);
	    } else {
	        return this.getTypedRuleContext(RequiresModifierContext,i);
	    }
	};

	EXPORTS() {
	    return this.getToken(Java20Parser.EXPORTS, 0);
	};

	packageName() {
	    return this.getTypedRuleContext(PackageNameContext,0);
	};

	TO() {
	    return this.getToken(Java20Parser.TO, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COMMA);
	    } else {
	        return this.getToken(Java20Parser.COMMA, i);
	    }
	};


	OPENS() {
	    return this.getToken(Java20Parser.OPENS, 0);
	};

	USES() {
	    return this.getToken(Java20Parser.USES, 0);
	};

	typeName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeNameContext);
	    } else {
	        return this.getTypedRuleContext(TypeNameContext,i);
	    }
	};

	PROVIDES() {
	    return this.getToken(Java20Parser.PROVIDES, 0);
	};

	WITH() {
	    return this.getToken(Java20Parser.WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterModuleDirective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitModuleDirective(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitModuleDirective(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RequiresModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_requiresModifier;
    }

	TRANSITIVE() {
	    return this.getToken(Java20Parser.TRANSITIVE, 0);
	};

	STATIC() {
	    return this.getToken(Java20Parser.STATIC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterRequiresModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitRequiresModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitRequiresModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_classDeclaration;
    }

	normalClassDeclaration() {
	    return this.getTypedRuleContext(NormalClassDeclarationContext,0);
	};

	enumDeclaration() {
	    return this.getTypedRuleContext(EnumDeclarationContext,0);
	};

	recordDeclaration() {
	    return this.getTypedRuleContext(RecordDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterClassDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitClassDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitClassDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NormalClassDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_normalClassDeclaration;
    }

	CLASS() {
	    return this.getToken(Java20Parser.CLASS, 0);
	};

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};

	classBody() {
	    return this.getTypedRuleContext(ClassBodyContext,0);
	};

	classModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassModifierContext);
	    } else {
	        return this.getTypedRuleContext(ClassModifierContext,i);
	    }
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	classExtends() {
	    return this.getTypedRuleContext(ClassExtendsContext,0);
	};

	classImplements() {
	    return this.getTypedRuleContext(ClassImplementsContext,0);
	};

	classPermits() {
	    return this.getTypedRuleContext(ClassPermitsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterNormalClassDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitNormalClassDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitNormalClassDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_classModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	PUBLIC() {
	    return this.getToken(Java20Parser.PUBLIC, 0);
	};

	PROTECTED() {
	    return this.getToken(Java20Parser.PROTECTED, 0);
	};

	PRIVATE() {
	    return this.getToken(Java20Parser.PRIVATE, 0);
	};

	ABSTRACT() {
	    return this.getToken(Java20Parser.ABSTRACT, 0);
	};

	STATIC() {
	    return this.getToken(Java20Parser.STATIC, 0);
	};

	FINAL() {
	    return this.getToken(Java20Parser.FINAL, 0);
	};

	SEALED() {
	    return this.getToken(Java20Parser.SEALED, 0);
	};

	NONSEALED() {
	    return this.getToken(Java20Parser.NONSEALED, 0);
	};

	STRICTFP() {
	    return this.getToken(Java20Parser.STRICTFP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterClassModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitClassModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitClassModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_typeParameters;
    }

	LT() {
	    return this.getToken(Java20Parser.LT, 0);
	};

	typeParameterList() {
	    return this.getTypedRuleContext(TypeParameterListContext,0);
	};

	GT() {
	    return this.getToken(Java20Parser.GT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterTypeParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitTypeParameters(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitTypeParameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_typeParameterList;
    }

	typeParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeParameterContext);
	    } else {
	        return this.getTypedRuleContext(TypeParameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COMMA);
	    } else {
	        return this.getToken(Java20Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterTypeParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitTypeParameterList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitTypeParameterList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassExtendsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_classExtends;
    }

	EXTENDS() {
	    return this.getToken(Java20Parser.EXTENDS, 0);
	};

	classType() {
	    return this.getTypedRuleContext(ClassTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterClassExtends(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitClassExtends(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitClassExtends(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassImplementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_classImplements;
    }

	IMPLEMENTS() {
	    return this.getToken(Java20Parser.IMPLEMENTS, 0);
	};

	interfaceTypeList() {
	    return this.getTypedRuleContext(InterfaceTypeListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterClassImplements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitClassImplements(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitClassImplements(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InterfaceTypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_interfaceTypeList;
    }

	interfaceType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InterfaceTypeContext);
	    } else {
	        return this.getTypedRuleContext(InterfaceTypeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COMMA);
	    } else {
	        return this.getToken(Java20Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterInterfaceTypeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitInterfaceTypeList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitInterfaceTypeList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassPermitsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_classPermits;
    }

	PERMITS() {
	    return this.getToken(Java20Parser.PERMITS, 0);
	};

	typeName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeNameContext);
	    } else {
	        return this.getTypedRuleContext(TypeNameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COMMA);
	    } else {
	        return this.getToken(Java20Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterClassPermits(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitClassPermits(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitClassPermits(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_classBody;
    }

	LBRACE() {
	    return this.getToken(Java20Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(Java20Parser.RBRACE, 0);
	};

	classBodyDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassBodyDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ClassBodyDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterClassBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitClassBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitClassBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassBodyDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_classBodyDeclaration;
    }

	classMemberDeclaration() {
	    return this.getTypedRuleContext(ClassMemberDeclarationContext,0);
	};

	instanceInitializer() {
	    return this.getTypedRuleContext(InstanceInitializerContext,0);
	};

	staticInitializer() {
	    return this.getTypedRuleContext(StaticInitializerContext,0);
	};

	constructorDeclaration() {
	    return this.getTypedRuleContext(ConstructorDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterClassBodyDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitClassBodyDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitClassBodyDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassMemberDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_classMemberDeclaration;
    }

	fieldDeclaration() {
	    return this.getTypedRuleContext(FieldDeclarationContext,0);
	};

	methodDeclaration() {
	    return this.getTypedRuleContext(MethodDeclarationContext,0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	interfaceDeclaration() {
	    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterClassMemberDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitClassMemberDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitClassMemberDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_fieldDeclaration;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	variableDeclaratorList() {
	    return this.getTypedRuleContext(VariableDeclaratorListContext,0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	fieldModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FieldModifierContext);
	    } else {
	        return this.getTypedRuleContext(FieldModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterFieldDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitFieldDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitFieldDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_fieldModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	PUBLIC() {
	    return this.getToken(Java20Parser.PUBLIC, 0);
	};

	PROTECTED() {
	    return this.getToken(Java20Parser.PROTECTED, 0);
	};

	PRIVATE() {
	    return this.getToken(Java20Parser.PRIVATE, 0);
	};

	STATIC() {
	    return this.getToken(Java20Parser.STATIC, 0);
	};

	FINAL() {
	    return this.getToken(Java20Parser.FINAL, 0);
	};

	TRANSIENT() {
	    return this.getToken(Java20Parser.TRANSIENT, 0);
	};

	VOLATILE() {
	    return this.getToken(Java20Parser.VOLATILE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterFieldModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitFieldModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitFieldModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableDeclaratorListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_variableDeclaratorList;
    }

	variableDeclarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableDeclaratorContext);
	    } else {
	        return this.getTypedRuleContext(VariableDeclaratorContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COMMA);
	    } else {
	        return this.getToken(Java20Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterVariableDeclaratorList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitVariableDeclaratorList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitVariableDeclaratorList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_variableDeclarator;
    }

	variableDeclaratorId() {
	    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
	};

	ASSIGN() {
	    return this.getToken(Java20Parser.ASSIGN, 0);
	};

	variableInitializer() {
	    return this.getTypedRuleContext(VariableInitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterVariableDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitVariableDeclarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitVariableDeclarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableDeclaratorIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_variableDeclaratorId;
    }

	Identifier() {
	    return this.getToken(Java20Parser.Identifier, 0);
	};

	dims() {
	    return this.getTypedRuleContext(DimsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterVariableDeclaratorId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitVariableDeclaratorId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitVariableDeclaratorId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_variableInitializer;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	arrayInitializer() {
	    return this.getTypedRuleContext(ArrayInitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterVariableInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitVariableInitializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitVariableInitializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnannTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_unannType;
    }

	unannPrimitiveType() {
	    return this.getTypedRuleContext(UnannPrimitiveTypeContext,0);
	};

	unannReferenceType() {
	    return this.getTypedRuleContext(UnannReferenceTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterUnannType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitUnannType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitUnannType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnannPrimitiveTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_unannPrimitiveType;
    }

	numericType() {
	    return this.getTypedRuleContext(NumericTypeContext,0);
	};

	BOOLEAN() {
	    return this.getToken(Java20Parser.BOOLEAN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterUnannPrimitiveType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitUnannPrimitiveType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitUnannPrimitiveType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnannReferenceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_unannReferenceType;
    }

	unannClassOrInterfaceType() {
	    return this.getTypedRuleContext(UnannClassOrInterfaceTypeContext,0);
	};

	unannTypeVariable() {
	    return this.getTypedRuleContext(UnannTypeVariableContext,0);
	};

	unannArrayType() {
	    return this.getTypedRuleContext(UnannArrayTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterUnannReferenceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitUnannReferenceType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitUnannReferenceType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnannClassOrInterfaceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_unannClassOrInterfaceType;
    }

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};

	packageName() {
	    return this.getTypedRuleContext(PackageNameContext,0);
	};

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	uCOIT() {
	    return this.getTypedRuleContext(UCOITContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterUnannClassOrInterfaceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitUnannClassOrInterfaceType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitUnannClassOrInterfaceType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UCOITContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_uCOIT;
    }

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	uCOIT() {
	    return this.getTypedRuleContext(UCOITContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterUCOIT(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitUCOIT(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitUCOIT(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnannClassTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_unannClassType;
    }

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	packageName() {
	    return this.getTypedRuleContext(PackageNameContext,0);
	};

	unannClassOrInterfaceType() {
	    return this.getTypedRuleContext(UnannClassOrInterfaceTypeContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterUnannClassType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitUnannClassType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitUnannClassType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnannInterfaceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_unannInterfaceType;
    }

	unannClassType() {
	    return this.getTypedRuleContext(UnannClassTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterUnannInterfaceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitUnannInterfaceType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitUnannInterfaceType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnannTypeVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_unannTypeVariable;
    }

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterUnannTypeVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitUnannTypeVariable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitUnannTypeVariable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnannArrayTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_unannArrayType;
    }

	dims() {
	    return this.getTypedRuleContext(DimsContext,0);
	};

	unannPrimitiveType() {
	    return this.getTypedRuleContext(UnannPrimitiveTypeContext,0);
	};

	unannClassOrInterfaceType() {
	    return this.getTypedRuleContext(UnannClassOrInterfaceTypeContext,0);
	};

	unannTypeVariable() {
	    return this.getTypedRuleContext(UnannTypeVariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterUnannArrayType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitUnannArrayType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitUnannArrayType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_methodDeclaration;
    }

	methodHeader() {
	    return this.getTypedRuleContext(MethodHeaderContext,0);
	};

	methodBody() {
	    return this.getTypedRuleContext(MethodBodyContext,0);
	};

	methodModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MethodModifierContext);
	    } else {
	        return this.getTypedRuleContext(MethodModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterMethodDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitMethodDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitMethodDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_methodModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	PUBLIC() {
	    return this.getToken(Java20Parser.PUBLIC, 0);
	};

	PROTECTED() {
	    return this.getToken(Java20Parser.PROTECTED, 0);
	};

	PRIVATE() {
	    return this.getToken(Java20Parser.PRIVATE, 0);
	};

	ABSTRACT() {
	    return this.getToken(Java20Parser.ABSTRACT, 0);
	};

	STATIC() {
	    return this.getToken(Java20Parser.STATIC, 0);
	};

	FINAL() {
	    return this.getToken(Java20Parser.FINAL, 0);
	};

	SYNCHRONIZED() {
	    return this.getToken(Java20Parser.SYNCHRONIZED, 0);
	};

	NATIVE() {
	    return this.getToken(Java20Parser.NATIVE, 0);
	};

	STRICTFP() {
	    return this.getToken(Java20Parser.STRICTFP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterMethodModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitMethodModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitMethodModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodHeaderContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_methodHeader;
    }

	result() {
	    return this.getTypedRuleContext(ResultContext,0);
	};

	methodDeclarator() {
	    return this.getTypedRuleContext(MethodDeclaratorContext,0);
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	throwsT() {
	    return this.getTypedRuleContext(ThrowsTContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterMethodHeader(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitMethodHeader(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitMethodHeader(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_result;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	VOID() {
	    return this.getToken(Java20Parser.VOID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterResult(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitResult(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitResult(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_methodDeclarator;
    }

	Identifier() {
	    return this.getToken(Java20Parser.Identifier, 0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	receiverParameter() {
	    return this.getTypedRuleContext(ReceiverParameterContext,0);
	};

	COMMA() {
	    return this.getToken(Java20Parser.COMMA, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	dims() {
	    return this.getTypedRuleContext(DimsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterMethodDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitMethodDeclarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitMethodDeclarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReceiverParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_receiverParameter;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	THIS() {
	    return this.getToken(Java20Parser.THIS, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	Identifier() {
	    return this.getToken(Java20Parser.Identifier, 0);
	};

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterReceiverParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitReceiverParameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitReceiverParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FormalParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_formalParameterList;
    }

	formalParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FormalParameterContext);
	    } else {
	        return this.getTypedRuleContext(FormalParameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COMMA);
	    } else {
	        return this.getToken(Java20Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterFormalParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitFormalParameterList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitFormalParameterList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FormalParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_formalParameter;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	variableDeclaratorId() {
	    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	variableArityParameter() {
	    return this.getTypedRuleContext(VariableArityParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterFormalParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitFormalParameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitFormalParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableArityParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_variableArityParameter;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	ELLIPSIS() {
	    return this.getToken(Java20Parser.ELLIPSIS, 0);
	};

	Identifier() {
	    return this.getToken(Java20Parser.Identifier, 0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterVariableArityParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitVariableArityParameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitVariableArityParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_variableModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	FINAL() {
	    return this.getToken(Java20Parser.FINAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterVariableModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitVariableModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitVariableModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ThrowsTContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_throwsT;
    }

	THROWS() {
	    return this.getToken(Java20Parser.THROWS, 0);
	};

	exceptionTypeList() {
	    return this.getTypedRuleContext(ExceptionTypeListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterThrowsT(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitThrowsT(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitThrowsT(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExceptionTypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_exceptionTypeList;
    }

	exceptionType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExceptionTypeContext);
	    } else {
	        return this.getTypedRuleContext(ExceptionTypeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COMMA);
	    } else {
	        return this.getToken(Java20Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterExceptionTypeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitExceptionTypeList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitExceptionTypeList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExceptionTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_exceptionType;
    }

	classType() {
	    return this.getTypedRuleContext(ClassTypeContext,0);
	};

	typeVariable() {
	    return this.getTypedRuleContext(TypeVariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterExceptionType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitExceptionType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitExceptionType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_methodBody;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterMethodBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitMethodBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitMethodBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InstanceInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_instanceInitializer;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterInstanceInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitInstanceInitializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitInstanceInitializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StaticInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_staticInitializer;
    }

	STATIC() {
	    return this.getToken(Java20Parser.STATIC, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterStaticInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitStaticInitializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitStaticInitializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstructorDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_constructorDeclaration;
    }

	constructorDeclarator() {
	    return this.getTypedRuleContext(ConstructorDeclaratorContext,0);
	};

	constructorBody() {
	    return this.getTypedRuleContext(ConstructorBodyContext,0);
	};

	constructorModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstructorModifierContext);
	    } else {
	        return this.getTypedRuleContext(ConstructorModifierContext,i);
	    }
	};

	throwsT() {
	    return this.getTypedRuleContext(ThrowsTContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterConstructorDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitConstructorDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitConstructorDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstructorModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_constructorModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	PUBLIC() {
	    return this.getToken(Java20Parser.PUBLIC, 0);
	};

	PROTECTED() {
	    return this.getToken(Java20Parser.PROTECTED, 0);
	};

	PRIVATE() {
	    return this.getToken(Java20Parser.PRIVATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterConstructorModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitConstructorModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitConstructorModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstructorDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_constructorDeclarator;
    }

	simpleTypeName() {
	    return this.getTypedRuleContext(SimpleTypeNameContext,0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	receiverParameter() {
	    return this.getTypedRuleContext(ReceiverParameterContext,0);
	};

	COMMA() {
	    return this.getToken(Java20Parser.COMMA, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterConstructorDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitConstructorDeclarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitConstructorDeclarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_simpleTypeName;
    }

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterSimpleTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitSimpleTypeName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitSimpleTypeName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstructorBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_constructorBody;
    }

	LBRACE() {
	    return this.getToken(Java20Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(Java20Parser.RBRACE, 0);
	};

	explicitConstructorInvocation() {
	    return this.getTypedRuleContext(ExplicitConstructorInvocationContext,0);
	};

	blockStatements() {
	    return this.getTypedRuleContext(BlockStatementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterConstructorBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitConstructorBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitConstructorBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExplicitConstructorInvocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_explicitConstructorInvocation;
    }

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	THIS() {
	    return this.getToken(Java20Parser.THIS, 0);
	};

	SUPER() {
	    return this.getToken(Java20Parser.SUPER, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterExplicitConstructorInvocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitExplicitConstructorInvocation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitExplicitConstructorInvocation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_enumDeclaration;
    }

	ENUM() {
	    return this.getToken(Java20Parser.ENUM, 0);
	};

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};

	enumBody() {
	    return this.getTypedRuleContext(EnumBodyContext,0);
	};

	classModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassModifierContext);
	    } else {
	        return this.getTypedRuleContext(ClassModifierContext,i);
	    }
	};

	classImplements() {
	    return this.getTypedRuleContext(ClassImplementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterEnumDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitEnumDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitEnumDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_enumBody;
    }

	LBRACE() {
	    return this.getToken(Java20Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(Java20Parser.RBRACE, 0);
	};

	enumConstantList() {
	    return this.getTypedRuleContext(EnumConstantListContext,0);
	};

	COMMA() {
	    return this.getToken(Java20Parser.COMMA, 0);
	};

	enumBodyDeclarations() {
	    return this.getTypedRuleContext(EnumBodyDeclarationsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterEnumBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitEnumBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitEnumBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumConstantListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_enumConstantList;
    }

	enumConstant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumConstantContext);
	    } else {
	        return this.getTypedRuleContext(EnumConstantContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COMMA);
	    } else {
	        return this.getToken(Java20Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterEnumConstantList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitEnumConstantList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitEnumConstantList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_enumConstant;
    }

	Identifier() {
	    return this.getToken(Java20Parser.Identifier, 0);
	};

	enumConstantModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumConstantModifierContext);
	    } else {
	        return this.getTypedRuleContext(EnumConstantModifierContext,i);
	    }
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	classBody() {
	    return this.getTypedRuleContext(ClassBodyContext,0);
	};

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterEnumConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitEnumConstant(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitEnumConstant(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumConstantModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_enumConstantModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterEnumConstantModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitEnumConstantModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitEnumConstantModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumBodyDeclarationsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_enumBodyDeclarations;
    }

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	classBodyDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassBodyDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ClassBodyDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterEnumBodyDeclarations(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitEnumBodyDeclarations(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitEnumBodyDeclarations(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RecordDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_recordDeclaration;
    }

	RECORD() {
	    return this.getToken(Java20Parser.RECORD, 0);
	};

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};

	recordHeader() {
	    return this.getTypedRuleContext(RecordHeaderContext,0);
	};

	recordBody() {
	    return this.getTypedRuleContext(RecordBodyContext,0);
	};

	classModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassModifierContext);
	    } else {
	        return this.getTypedRuleContext(ClassModifierContext,i);
	    }
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	classImplements() {
	    return this.getTypedRuleContext(ClassImplementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterRecordDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitRecordDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitRecordDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RecordHeaderContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_recordHeader;
    }

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	recordComponentList() {
	    return this.getTypedRuleContext(RecordComponentListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterRecordHeader(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitRecordHeader(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitRecordHeader(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RecordComponentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_recordComponentList;
    }

	recordComponent = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RecordComponentContext);
	    } else {
	        return this.getTypedRuleContext(RecordComponentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COMMA);
	    } else {
	        return this.getToken(Java20Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterRecordComponentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitRecordComponentList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitRecordComponentList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RecordComponentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_recordComponent;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	Identifier() {
	    return this.getToken(Java20Parser.Identifier, 0);
	};

	recordComponentModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RecordComponentModifierContext);
	    } else {
	        return this.getTypedRuleContext(RecordComponentModifierContext,i);
	    }
	};

	variableArityRecordComponent() {
	    return this.getTypedRuleContext(VariableArityRecordComponentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterRecordComponent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitRecordComponent(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitRecordComponent(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableArityRecordComponentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_variableArityRecordComponent;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	ELLIPSIS() {
	    return this.getToken(Java20Parser.ELLIPSIS, 0);
	};

	Identifier() {
	    return this.getToken(Java20Parser.Identifier, 0);
	};

	recordComponentModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RecordComponentModifierContext);
	    } else {
	        return this.getTypedRuleContext(RecordComponentModifierContext,i);
	    }
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterVariableArityRecordComponent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitVariableArityRecordComponent(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitVariableArityRecordComponent(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RecordComponentModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_recordComponentModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterRecordComponentModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitRecordComponentModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitRecordComponentModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RecordBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_recordBody;
    }

	LBRACE() {
	    return this.getToken(Java20Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(Java20Parser.RBRACE, 0);
	};

	recordBodyDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RecordBodyDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(RecordBodyDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterRecordBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitRecordBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitRecordBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RecordBodyDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_recordBodyDeclaration;
    }

	classBodyDeclaration() {
	    return this.getTypedRuleContext(ClassBodyDeclarationContext,0);
	};

	compactConstructorDeclaration() {
	    return this.getTypedRuleContext(CompactConstructorDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterRecordBodyDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitRecordBodyDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitRecordBodyDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CompactConstructorDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_compactConstructorDeclaration;
    }

	simpleTypeName() {
	    return this.getTypedRuleContext(SimpleTypeNameContext,0);
	};

	constructorBody() {
	    return this.getTypedRuleContext(ConstructorBodyContext,0);
	};

	constructorModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstructorModifierContext);
	    } else {
	        return this.getTypedRuleContext(ConstructorModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterCompactConstructorDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitCompactConstructorDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitCompactConstructorDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InterfaceDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_interfaceDeclaration;
    }

	normalInterfaceDeclaration() {
	    return this.getTypedRuleContext(NormalInterfaceDeclarationContext,0);
	};

	annotationInterfaceDeclaration() {
	    return this.getTypedRuleContext(AnnotationInterfaceDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterInterfaceDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitInterfaceDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitInterfaceDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NormalInterfaceDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_normalInterfaceDeclaration;
    }

	INTERFACE() {
	    return this.getToken(Java20Parser.INTERFACE, 0);
	};

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};

	interfaceBody() {
	    return this.getTypedRuleContext(InterfaceBodyContext,0);
	};

	interfaceModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InterfaceModifierContext);
	    } else {
	        return this.getTypedRuleContext(InterfaceModifierContext,i);
	    }
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	interfaceExtends() {
	    return this.getTypedRuleContext(InterfaceExtendsContext,0);
	};

	interfacePermits() {
	    return this.getTypedRuleContext(InterfacePermitsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterNormalInterfaceDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitNormalInterfaceDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitNormalInterfaceDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InterfaceModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_interfaceModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	PUBLIC() {
	    return this.getToken(Java20Parser.PUBLIC, 0);
	};

	PROTECTED() {
	    return this.getToken(Java20Parser.PROTECTED, 0);
	};

	PRIVATE() {
	    return this.getToken(Java20Parser.PRIVATE, 0);
	};

	ABSTRACT() {
	    return this.getToken(Java20Parser.ABSTRACT, 0);
	};

	STATIC() {
	    return this.getToken(Java20Parser.STATIC, 0);
	};

	SEALED() {
	    return this.getToken(Java20Parser.SEALED, 0);
	};

	NONSEALED() {
	    return this.getToken(Java20Parser.NONSEALED, 0);
	};

	STRICTFP() {
	    return this.getToken(Java20Parser.STRICTFP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterInterfaceModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitInterfaceModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitInterfaceModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InterfaceExtendsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_interfaceExtends;
    }

	EXTENDS() {
	    return this.getToken(Java20Parser.EXTENDS, 0);
	};

	interfaceTypeList() {
	    return this.getTypedRuleContext(InterfaceTypeListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterInterfaceExtends(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitInterfaceExtends(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitInterfaceExtends(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InterfacePermitsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_interfacePermits;
    }

	PERMITS() {
	    return this.getToken(Java20Parser.PERMITS, 0);
	};

	typeName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeNameContext);
	    } else {
	        return this.getTypedRuleContext(TypeNameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COMMA);
	    } else {
	        return this.getToken(Java20Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterInterfacePermits(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitInterfacePermits(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitInterfacePermits(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InterfaceBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_interfaceBody;
    }

	LBRACE() {
	    return this.getToken(Java20Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(Java20Parser.RBRACE, 0);
	};

	interfaceMemberDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InterfaceMemberDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(InterfaceMemberDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterInterfaceBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitInterfaceBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitInterfaceBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InterfaceMemberDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_interfaceMemberDeclaration;
    }

	constantDeclaration() {
	    return this.getTypedRuleContext(ConstantDeclarationContext,0);
	};

	interfaceMethodDeclaration() {
	    return this.getTypedRuleContext(InterfaceMethodDeclarationContext,0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	interfaceDeclaration() {
	    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterInterfaceMemberDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitInterfaceMemberDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitInterfaceMemberDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstantDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_constantDeclaration;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	variableDeclaratorList() {
	    return this.getTypedRuleContext(VariableDeclaratorListContext,0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	constantModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstantModifierContext);
	    } else {
	        return this.getTypedRuleContext(ConstantModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterConstantDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitConstantDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitConstantDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstantModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_constantModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	PUBLIC() {
	    return this.getToken(Java20Parser.PUBLIC, 0);
	};

	STATIC() {
	    return this.getToken(Java20Parser.STATIC, 0);
	};

	FINAL() {
	    return this.getToken(Java20Parser.FINAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterConstantModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitConstantModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitConstantModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InterfaceMethodDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_interfaceMethodDeclaration;
    }

	methodHeader() {
	    return this.getTypedRuleContext(MethodHeaderContext,0);
	};

	methodBody() {
	    return this.getTypedRuleContext(MethodBodyContext,0);
	};

	interfaceMethodModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InterfaceMethodModifierContext);
	    } else {
	        return this.getTypedRuleContext(InterfaceMethodModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterInterfaceMethodDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitInterfaceMethodDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitInterfaceMethodDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InterfaceMethodModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_interfaceMethodModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	PUBLIC() {
	    return this.getToken(Java20Parser.PUBLIC, 0);
	};

	PRIVATE() {
	    return this.getToken(Java20Parser.PRIVATE, 0);
	};

	ABSTRACT() {
	    return this.getToken(Java20Parser.ABSTRACT, 0);
	};

	DEFAULT() {
	    return this.getToken(Java20Parser.DEFAULT, 0);
	};

	STATIC() {
	    return this.getToken(Java20Parser.STATIC, 0);
	};

	STRICTFP() {
	    return this.getToken(Java20Parser.STRICTFP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterInterfaceMethodModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitInterfaceMethodModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitInterfaceMethodModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnnotationInterfaceDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_annotationInterfaceDeclaration;
    }

	AT() {
	    return this.getToken(Java20Parser.AT, 0);
	};

	INTERFACE() {
	    return this.getToken(Java20Parser.INTERFACE, 0);
	};

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};

	annotationInterfaceBody() {
	    return this.getTypedRuleContext(AnnotationInterfaceBodyContext,0);
	};

	interfaceModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InterfaceModifierContext);
	    } else {
	        return this.getTypedRuleContext(InterfaceModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterAnnotationInterfaceDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitAnnotationInterfaceDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitAnnotationInterfaceDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnnotationInterfaceBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_annotationInterfaceBody;
    }

	LBRACE() {
	    return this.getToken(Java20Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(Java20Parser.RBRACE, 0);
	};

	annotationInterfaceMemberDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationInterfaceMemberDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationInterfaceMemberDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterAnnotationInterfaceBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitAnnotationInterfaceBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitAnnotationInterfaceBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnnotationInterfaceMemberDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_annotationInterfaceMemberDeclaration;
    }

	annotationInterfaceElementDeclaration() {
	    return this.getTypedRuleContext(AnnotationInterfaceElementDeclarationContext,0);
	};

	constantDeclaration() {
	    return this.getTypedRuleContext(ConstantDeclarationContext,0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	interfaceDeclaration() {
	    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterAnnotationInterfaceMemberDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitAnnotationInterfaceMemberDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitAnnotationInterfaceMemberDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnnotationInterfaceElementDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_annotationInterfaceElementDeclaration;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	Identifier() {
	    return this.getToken(Java20Parser.Identifier, 0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	annotationInterfaceElementModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationInterfaceElementModifierContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationInterfaceElementModifierContext,i);
	    }
	};

	dims() {
	    return this.getTypedRuleContext(DimsContext,0);
	};

	defaultValue() {
	    return this.getTypedRuleContext(DefaultValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterAnnotationInterfaceElementDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitAnnotationInterfaceElementDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitAnnotationInterfaceElementDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnnotationInterfaceElementModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_annotationInterfaceElementModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	PUBLIC() {
	    return this.getToken(Java20Parser.PUBLIC, 0);
	};

	ABSTRACT() {
	    return this.getToken(Java20Parser.ABSTRACT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterAnnotationInterfaceElementModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitAnnotationInterfaceElementModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitAnnotationInterfaceElementModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefaultValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_defaultValue;
    }

	DEFAULT() {
	    return this.getToken(Java20Parser.DEFAULT, 0);
	};

	elementValue() {
	    return this.getTypedRuleContext(ElementValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterDefaultValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitDefaultValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitDefaultValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnnotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_annotation;
    }

	normalAnnotation() {
	    return this.getTypedRuleContext(NormalAnnotationContext,0);
	};

	markerAnnotation() {
	    return this.getTypedRuleContext(MarkerAnnotationContext,0);
	};

	singleElementAnnotation() {
	    return this.getTypedRuleContext(SingleElementAnnotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterAnnotation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitAnnotation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitAnnotation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NormalAnnotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_normalAnnotation;
    }

	AT() {
	    return this.getToken(Java20Parser.AT, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	elementValuePairList() {
	    return this.getTypedRuleContext(ElementValuePairListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterNormalAnnotation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitNormalAnnotation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitNormalAnnotation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementValuePairListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_elementValuePairList;
    }

	elementValuePair = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementValuePairContext);
	    } else {
	        return this.getTypedRuleContext(ElementValuePairContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COMMA);
	    } else {
	        return this.getToken(Java20Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterElementValuePairList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitElementValuePairList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitElementValuePairList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementValuePairContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_elementValuePair;
    }

	Identifier() {
	    return this.getToken(Java20Parser.Identifier, 0);
	};

	ASSIGN() {
	    return this.getToken(Java20Parser.ASSIGN, 0);
	};

	elementValue() {
	    return this.getTypedRuleContext(ElementValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterElementValuePair(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitElementValuePair(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitElementValuePair(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_elementValue;
    }

	conditionalExpression() {
	    return this.getTypedRuleContext(ConditionalExpressionContext,0);
	};

	elementValueArrayInitializer() {
	    return this.getTypedRuleContext(ElementValueArrayInitializerContext,0);
	};

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterElementValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitElementValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitElementValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementValueArrayInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_elementValueArrayInitializer;
    }

	LBRACE() {
	    return this.getToken(Java20Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(Java20Parser.RBRACE, 0);
	};

	elementValueList() {
	    return this.getTypedRuleContext(ElementValueListContext,0);
	};

	COMMA() {
	    return this.getToken(Java20Parser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterElementValueArrayInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitElementValueArrayInitializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitElementValueArrayInitializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementValueListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_elementValueList;
    }

	elementValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementValueContext);
	    } else {
	        return this.getTypedRuleContext(ElementValueContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COMMA);
	    } else {
	        return this.getToken(Java20Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterElementValueList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitElementValueList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitElementValueList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MarkerAnnotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_markerAnnotation;
    }

	AT() {
	    return this.getToken(Java20Parser.AT, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterMarkerAnnotation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitMarkerAnnotation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitMarkerAnnotation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SingleElementAnnotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_singleElementAnnotation;
    }

	AT() {
	    return this.getToken(Java20Parser.AT, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	elementValue() {
	    return this.getTypedRuleContext(ElementValueContext,0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterSingleElementAnnotation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitSingleElementAnnotation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitSingleElementAnnotation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_arrayInitializer;
    }

	LBRACE() {
	    return this.getToken(Java20Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(Java20Parser.RBRACE, 0);
	};

	variableInitializerList() {
	    return this.getTypedRuleContext(VariableInitializerListContext,0);
	};

	COMMA() {
	    return this.getToken(Java20Parser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterArrayInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitArrayInitializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitArrayInitializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableInitializerListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_variableInitializerList;
    }

	variableInitializer = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableInitializerContext);
	    } else {
	        return this.getTypedRuleContext(VariableInitializerContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COMMA);
	    } else {
	        return this.getToken(Java20Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterVariableInitializerList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitVariableInitializerList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitVariableInitializerList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_block;
    }

	LBRACE() {
	    return this.getToken(Java20Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(Java20Parser.RBRACE, 0);
	};

	blockStatements() {
	    return this.getTypedRuleContext(BlockStatementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BlockStatementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_blockStatements;
    }

	blockStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BlockStatementContext);
	    } else {
	        return this.getTypedRuleContext(BlockStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterBlockStatements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitBlockStatements(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitBlockStatements(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BlockStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_blockStatement;
    }

	localClassOrInterfaceDeclaration() {
	    return this.getTypedRuleContext(LocalClassOrInterfaceDeclarationContext,0);
	};

	localVariableDeclarationStatement() {
	    return this.getTypedRuleContext(LocalVariableDeclarationStatementContext,0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterBlockStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitBlockStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitBlockStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LocalClassOrInterfaceDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_localClassOrInterfaceDeclaration;
    }

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	normalInterfaceDeclaration() {
	    return this.getTypedRuleContext(NormalInterfaceDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterLocalClassOrInterfaceDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitLocalClassOrInterfaceDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitLocalClassOrInterfaceDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LocalVariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_localVariableDeclaration;
    }

	localVariableType() {
	    return this.getTypedRuleContext(LocalVariableTypeContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	variableDeclaratorList() {
	    return this.getTypedRuleContext(VariableDeclaratorListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterLocalVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitLocalVariableDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitLocalVariableDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LocalVariableTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_localVariableType;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	VAR() {
	    return this.getToken(Java20Parser.VAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterLocalVariableType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitLocalVariableType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitLocalVariableType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LocalVariableDeclarationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_localVariableDeclarationStatement;
    }

	localVariableDeclaration() {
	    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterLocalVariableDeclarationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitLocalVariableDeclarationStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitLocalVariableDeclarationStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_statement;
    }

	statementWithoutTrailingSubstatement() {
	    return this.getTypedRuleContext(StatementWithoutTrailingSubstatementContext,0);
	};

	labeledStatement() {
	    return this.getTypedRuleContext(LabeledStatementContext,0);
	};

	ifThenStatement() {
	    return this.getTypedRuleContext(IfThenStatementContext,0);
	};

	ifThenElseStatement() {
	    return this.getTypedRuleContext(IfThenElseStatementContext,0);
	};

	whileStatement() {
	    return this.getTypedRuleContext(WhileStatementContext,0);
	};

	forStatement() {
	    return this.getTypedRuleContext(ForStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementNoShortIfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_statementNoShortIf;
    }

	statementWithoutTrailingSubstatement() {
	    return this.getTypedRuleContext(StatementWithoutTrailingSubstatementContext,0);
	};

	labeledStatementNoShortIf() {
	    return this.getTypedRuleContext(LabeledStatementNoShortIfContext,0);
	};

	ifThenElseStatementNoShortIf() {
	    return this.getTypedRuleContext(IfThenElseStatementNoShortIfContext,0);
	};

	whileStatementNoShortIf() {
	    return this.getTypedRuleContext(WhileStatementNoShortIfContext,0);
	};

	forStatementNoShortIf() {
	    return this.getTypedRuleContext(ForStatementNoShortIfContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterStatementNoShortIf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitStatementNoShortIf(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitStatementNoShortIf(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementWithoutTrailingSubstatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_statementWithoutTrailingSubstatement;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	emptyStatement_() {
	    return this.getTypedRuleContext(EmptyStatement_Context,0);
	};

	expressionStatement() {
	    return this.getTypedRuleContext(ExpressionStatementContext,0);
	};

	assertStatement() {
	    return this.getTypedRuleContext(AssertStatementContext,0);
	};

	switchStatement() {
	    return this.getTypedRuleContext(SwitchStatementContext,0);
	};

	doStatement() {
	    return this.getTypedRuleContext(DoStatementContext,0);
	};

	breakStatement() {
	    return this.getTypedRuleContext(BreakStatementContext,0);
	};

	continueStatement() {
	    return this.getTypedRuleContext(ContinueStatementContext,0);
	};

	returnStatement() {
	    return this.getTypedRuleContext(ReturnStatementContext,0);
	};

	synchronizedStatement() {
	    return this.getTypedRuleContext(SynchronizedStatementContext,0);
	};

	throwStatement() {
	    return this.getTypedRuleContext(ThrowStatementContext,0);
	};

	tryStatement() {
	    return this.getTypedRuleContext(TryStatementContext,0);
	};

	yieldStatement() {
	    return this.getTypedRuleContext(YieldStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterStatementWithoutTrailingSubstatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitStatementWithoutTrailingSubstatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitStatementWithoutTrailingSubstatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EmptyStatement_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_emptyStatement_;
    }

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterEmptyStatement_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitEmptyStatement_(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitEmptyStatement_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabeledStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_labeledStatement;
    }

	Identifier() {
	    return this.getToken(Java20Parser.Identifier, 0);
	};

	COLON() {
	    return this.getToken(Java20Parser.COLON, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterLabeledStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitLabeledStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitLabeledStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabeledStatementNoShortIfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_labeledStatementNoShortIf;
    }

	Identifier() {
	    return this.getToken(Java20Parser.Identifier, 0);
	};

	COLON() {
	    return this.getToken(Java20Parser.COLON, 0);
	};

	statementNoShortIf() {
	    return this.getTypedRuleContext(StatementNoShortIfContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterLabeledStatementNoShortIf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitLabeledStatementNoShortIf(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitLabeledStatementNoShortIf(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_expressionStatement;
    }

	statementExpression() {
	    return this.getTypedRuleContext(StatementExpressionContext,0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterExpressionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitExpressionStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitExpressionStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_statementExpression;
    }

	assignment() {
	    return this.getTypedRuleContext(AssignmentContext,0);
	};

	preIncrementExpression() {
	    return this.getTypedRuleContext(PreIncrementExpressionContext,0);
	};

	preDecrementExpression() {
	    return this.getTypedRuleContext(PreDecrementExpressionContext,0);
	};

	postIncrementExpression() {
	    return this.getTypedRuleContext(PostIncrementExpressionContext,0);
	};

	postDecrementExpression() {
	    return this.getTypedRuleContext(PostDecrementExpressionContext,0);
	};

	methodInvocation() {
	    return this.getTypedRuleContext(MethodInvocationContext,0);
	};

	classInstanceCreationExpression() {
	    return this.getTypedRuleContext(ClassInstanceCreationExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterStatementExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitStatementExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitStatementExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IfThenStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_ifThenStatement;
    }

	IF() {
	    return this.getToken(Java20Parser.IF, 0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterIfThenStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitIfThenStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitIfThenStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IfThenElseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_ifThenElseStatement;
    }

	IF() {
	    return this.getToken(Java20Parser.IF, 0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	statementNoShortIf() {
	    return this.getTypedRuleContext(StatementNoShortIfContext,0);
	};

	ELSE() {
	    return this.getToken(Java20Parser.ELSE, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterIfThenElseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitIfThenElseStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitIfThenElseStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IfThenElseStatementNoShortIfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_ifThenElseStatementNoShortIf;
    }

	IF() {
	    return this.getToken(Java20Parser.IF, 0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	statementNoShortIf = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementNoShortIfContext);
	    } else {
	        return this.getTypedRuleContext(StatementNoShortIfContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(Java20Parser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterIfThenElseStatementNoShortIf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitIfThenElseStatementNoShortIf(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitIfThenElseStatementNoShortIf(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssertStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_assertStatement;
    }

	ASSERT() {
	    return this.getToken(Java20Parser.ASSERT, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	COLON() {
	    return this.getToken(Java20Parser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterAssertStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitAssertStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitAssertStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SwitchStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_switchStatement;
    }

	SWITCH() {
	    return this.getToken(Java20Parser.SWITCH, 0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	switchBlock() {
	    return this.getTypedRuleContext(SwitchBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterSwitchStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitSwitchStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitSwitchStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SwitchBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_switchBlock;
    }

	LBRACE() {
	    return this.getToken(Java20Parser.LBRACE, 0);
	};

	switchRule = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SwitchRuleContext);
	    } else {
	        return this.getTypedRuleContext(SwitchRuleContext,i);
	    }
	};

	RBRACE() {
	    return this.getToken(Java20Parser.RBRACE, 0);
	};

	switchBlockStatementGroup = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SwitchBlockStatementGroupContext);
	    } else {
	        return this.getTypedRuleContext(SwitchBlockStatementGroupContext,i);
	    }
	};

	switchLabel = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SwitchLabelContext);
	    } else {
	        return this.getTypedRuleContext(SwitchLabelContext,i);
	    }
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COLON);
	    } else {
	        return this.getToken(Java20Parser.COLON, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterSwitchBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitSwitchBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitSwitchBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SwitchRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_switchRule;
    }

	switchLabel() {
	    return this.getTypedRuleContext(SwitchLabelContext,0);
	};

	ARROW() {
	    return this.getToken(Java20Parser.ARROW, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	throwStatement() {
	    return this.getTypedRuleContext(ThrowStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterSwitchRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitSwitchRule(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitSwitchRule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SwitchBlockStatementGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_switchBlockStatementGroup;
    }

	switchLabel = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SwitchLabelContext);
	    } else {
	        return this.getTypedRuleContext(SwitchLabelContext,i);
	    }
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COLON);
	    } else {
	        return this.getToken(Java20Parser.COLON, i);
	    }
	};


	blockStatements() {
	    return this.getTypedRuleContext(BlockStatementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterSwitchBlockStatementGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitSwitchBlockStatementGroup(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitSwitchBlockStatementGroup(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SwitchLabelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_switchLabel;
    }

	CASE() {
	    return this.getToken(Java20Parser.CASE, 0);
	};

	caseConstant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CaseConstantContext);
	    } else {
	        return this.getTypedRuleContext(CaseConstantContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COMMA);
	    } else {
	        return this.getToken(Java20Parser.COMMA, i);
	    }
	};


	DEFAULT() {
	    return this.getToken(Java20Parser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterSwitchLabel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitSwitchLabel(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitSwitchLabel(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaseConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_caseConstant;
    }

	conditionalExpression() {
	    return this.getTypedRuleContext(ConditionalExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterCaseConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitCaseConstant(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitCaseConstant(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WhileStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_whileStatement;
    }

	WHILE() {
	    return this.getToken(Java20Parser.WHILE, 0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterWhileStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitWhileStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitWhileStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WhileStatementNoShortIfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_whileStatementNoShortIf;
    }

	WHILE() {
	    return this.getToken(Java20Parser.WHILE, 0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	statementNoShortIf() {
	    return this.getTypedRuleContext(StatementNoShortIfContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterWhileStatementNoShortIf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitWhileStatementNoShortIf(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitWhileStatementNoShortIf(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DoStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_doStatement;
    }

	DO() {
	    return this.getToken(Java20Parser.DO, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	WHILE() {
	    return this.getToken(Java20Parser.WHILE, 0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterDoStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitDoStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitDoStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ForStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_forStatement;
    }

	basicForStatement() {
	    return this.getTypedRuleContext(BasicForStatementContext,0);
	};

	enhancedForStatement() {
	    return this.getTypedRuleContext(EnhancedForStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterForStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitForStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitForStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ForStatementNoShortIfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_forStatementNoShortIf;
    }

	basicForStatementNoShortIf() {
	    return this.getTypedRuleContext(BasicForStatementNoShortIfContext,0);
	};

	enhancedForStatementNoShortIf() {
	    return this.getTypedRuleContext(EnhancedForStatementNoShortIfContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterForStatementNoShortIf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitForStatementNoShortIf(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitForStatementNoShortIf(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BasicForStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_basicForStatement;
    }

	FOR() {
	    return this.getToken(Java20Parser.FOR, 0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.SEMI);
	    } else {
	        return this.getToken(Java20Parser.SEMI, i);
	    }
	};


	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	forInit() {
	    return this.getTypedRuleContext(ForInitContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	forUpdate() {
	    return this.getTypedRuleContext(ForUpdateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterBasicForStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitBasicForStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitBasicForStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BasicForStatementNoShortIfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_basicForStatementNoShortIf;
    }

	FOR() {
	    return this.getToken(Java20Parser.FOR, 0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.SEMI);
	    } else {
	        return this.getToken(Java20Parser.SEMI, i);
	    }
	};


	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	statementNoShortIf() {
	    return this.getTypedRuleContext(StatementNoShortIfContext,0);
	};

	forInit() {
	    return this.getTypedRuleContext(ForInitContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	forUpdate() {
	    return this.getTypedRuleContext(ForUpdateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterBasicForStatementNoShortIf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitBasicForStatementNoShortIf(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitBasicForStatementNoShortIf(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ForInitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_forInit;
    }

	statementExpressionList() {
	    return this.getTypedRuleContext(StatementExpressionListContext,0);
	};

	localVariableDeclaration() {
	    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterForInit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitForInit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitForInit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ForUpdateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_forUpdate;
    }

	statementExpressionList() {
	    return this.getTypedRuleContext(StatementExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterForUpdate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitForUpdate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitForUpdate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementExpressionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_statementExpressionList;
    }

	statementExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementExpressionContext);
	    } else {
	        return this.getTypedRuleContext(StatementExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COMMA);
	    } else {
	        return this.getToken(Java20Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterStatementExpressionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitStatementExpressionList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitStatementExpressionList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnhancedForStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_enhancedForStatement;
    }

	FOR() {
	    return this.getToken(Java20Parser.FOR, 0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	localVariableDeclaration() {
	    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
	};

	COLON() {
	    return this.getToken(Java20Parser.COLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterEnhancedForStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitEnhancedForStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitEnhancedForStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnhancedForStatementNoShortIfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_enhancedForStatementNoShortIf;
    }

	FOR() {
	    return this.getToken(Java20Parser.FOR, 0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	localVariableDeclaration() {
	    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
	};

	COLON() {
	    return this.getToken(Java20Parser.COLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	statementNoShortIf() {
	    return this.getTypedRuleContext(StatementNoShortIfContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterEnhancedForStatementNoShortIf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitEnhancedForStatementNoShortIf(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitEnhancedForStatementNoShortIf(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BreakStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_breakStatement;
    }

	BREAK() {
	    return this.getToken(Java20Parser.BREAK, 0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	Identifier() {
	    return this.getToken(Java20Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterBreakStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitBreakStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitBreakStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ContinueStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_continueStatement;
    }

	CONTINUE() {
	    return this.getToken(Java20Parser.CONTINUE, 0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	Identifier() {
	    return this.getToken(Java20Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterContinueStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitContinueStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitContinueStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReturnStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_returnStatement;
    }

	RETURN() {
	    return this.getToken(Java20Parser.RETURN, 0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitReturnStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitReturnStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ThrowStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_throwStatement;
    }

	THROW() {
	    return this.getToken(Java20Parser.THROW, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterThrowStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitThrowStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitThrowStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SynchronizedStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_synchronizedStatement;
    }

	SYNCHRONIZED() {
	    return this.getToken(Java20Parser.SYNCHRONIZED, 0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterSynchronizedStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitSynchronizedStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitSynchronizedStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_tryStatement;
    }

	TRY() {
	    return this.getToken(Java20Parser.TRY, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	catches() {
	    return this.getTypedRuleContext(CatchesContext,0);
	};

	finallyBlock() {
	    return this.getTypedRuleContext(FinallyBlockContext,0);
	};

	tryWithResourcesStatement() {
	    return this.getTypedRuleContext(TryWithResourcesStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterTryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitTryStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitTryStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CatchesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_catches;
    }

	catchClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CatchClauseContext);
	    } else {
	        return this.getTypedRuleContext(CatchClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterCatches(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitCatches(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitCatches(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CatchClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_catchClause;
    }

	CATCH() {
	    return this.getToken(Java20Parser.CATCH, 0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	catchFormalParameter() {
	    return this.getTypedRuleContext(CatchFormalParameterContext,0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterCatchClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitCatchClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitCatchClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CatchFormalParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_catchFormalParameter;
    }

	catchType() {
	    return this.getTypedRuleContext(CatchTypeContext,0);
	};

	variableDeclaratorId() {
	    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterCatchFormalParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitCatchFormalParameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitCatchFormalParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CatchTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_catchType;
    }

	unannClassType() {
	    return this.getTypedRuleContext(UnannClassTypeContext,0);
	};

	BITOR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.BITOR);
	    } else {
	        return this.getToken(Java20Parser.BITOR, i);
	    }
	};


	classType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassTypeContext);
	    } else {
	        return this.getTypedRuleContext(ClassTypeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterCatchType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitCatchType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitCatchType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FinallyBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_finallyBlock;
    }

	FINALLY() {
	    return this.getToken(Java20Parser.FINALLY, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterFinallyBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitFinallyBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitFinallyBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TryWithResourcesStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_tryWithResourcesStatement;
    }

	TRY() {
	    return this.getToken(Java20Parser.TRY, 0);
	};

	resourceSpecification() {
	    return this.getTypedRuleContext(ResourceSpecificationContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	catches() {
	    return this.getTypedRuleContext(CatchesContext,0);
	};

	finallyBlock() {
	    return this.getTypedRuleContext(FinallyBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterTryWithResourcesStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitTryWithResourcesStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitTryWithResourcesStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResourceSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_resourceSpecification;
    }

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	resourceList() {
	    return this.getTypedRuleContext(ResourceListContext,0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterResourceSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitResourceSpecification(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitResourceSpecification(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResourceListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_resourceList;
    }

	resource = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ResourceContext);
	    } else {
	        return this.getTypedRuleContext(ResourceContext,i);
	    }
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.SEMI);
	    } else {
	        return this.getToken(Java20Parser.SEMI, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterResourceList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitResourceList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitResourceList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_resource;
    }

	localVariableDeclaration() {
	    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
	};

	variableAccess() {
	    return this.getTypedRuleContext(VariableAccessContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterResource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitResource(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitResource(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableAccessContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_variableAccess;
    }

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};

	fieldAccess() {
	    return this.getTypedRuleContext(FieldAccessContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterVariableAccess(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitVariableAccess(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitVariableAccess(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class YieldStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_yieldStatement;
    }

	YIELD() {
	    return this.getToken(Java20Parser.YIELD, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterYieldStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitYieldStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitYieldStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_pattern;
    }

	typePattern() {
	    return this.getTypedRuleContext(TypePatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitPattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitPattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_typePattern;
    }

	localVariableDeclaration() {
	    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterTypePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitTypePattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitTypePattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_expression;
    }

	lambdaExpression() {
	    return this.getTypedRuleContext(LambdaExpressionContext,0);
	};

	assignmentExpression() {
	    return this.getTypedRuleContext(AssignmentExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_primary;
    }

	primaryNoNewArray() {
	    return this.getTypedRuleContext(PrimaryNoNewArrayContext,0);
	};

	arrayCreationExpression() {
	    return this.getTypedRuleContext(ArrayCreationExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitPrimary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitPrimary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimaryNoNewArrayContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_primaryNoNewArray;
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	pNNA() {
	    return this.getTypedRuleContext(PNNAContext,0);
	};

	classLiteral() {
	    return this.getTypedRuleContext(ClassLiteralContext,0);
	};

	THIS() {
	    return this.getToken(Java20Parser.THIS, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.DOT);
	    } else {
	        return this.getToken(Java20Parser.DOT, i);
	    }
	};


	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	unqualifiedClassInstanceCreationExpression() {
	    return this.getTypedRuleContext(UnqualifiedClassInstanceCreationExpressionContext,0);
	};

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};

	arrayCreationExpression() {
	    return this.getTypedRuleContext(ArrayCreationExpressionContext,0);
	};

	Identifier() {
	    return this.getToken(Java20Parser.Identifier, 0);
	};

	SUPER() {
	    return this.getToken(Java20Parser.SUPER, 0);
	};

	LBRACK() {
	    return this.getToken(Java20Parser.LBRACK, 0);
	};

	RBRACK() {
	    return this.getToken(Java20Parser.RBRACK, 0);
	};

	arrayCreationExpressionWithInitializer() {
	    return this.getTypedRuleContext(ArrayCreationExpressionWithInitializerContext,0);
	};

	methodName() {
	    return this.getTypedRuleContext(MethodNameContext,0);
	};

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	COLONCOLON() {
	    return this.getToken(Java20Parser.COLONCOLON, 0);
	};

	referenceType() {
	    return this.getTypedRuleContext(ReferenceTypeContext,0);
	};

	classType() {
	    return this.getTypedRuleContext(ClassTypeContext,0);
	};

	NEW() {
	    return this.getToken(Java20Parser.NEW, 0);
	};

	arrayType() {
	    return this.getTypedRuleContext(ArrayTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterPrimaryNoNewArray(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitPrimaryNoNewArray(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitPrimaryNoNewArray(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PNNAContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_pNNA;
    }

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	unqualifiedClassInstanceCreationExpression() {
	    return this.getTypedRuleContext(UnqualifiedClassInstanceCreationExpressionContext,0);
	};

	pNNA() {
	    return this.getTypedRuleContext(PNNAContext,0);
	};

	Identifier() {
	    return this.getToken(Java20Parser.Identifier, 0);
	};

	LBRACK() {
	    return this.getToken(Java20Parser.LBRACK, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RBRACK() {
	    return this.getToken(Java20Parser.RBRACK, 0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	COLONCOLON() {
	    return this.getToken(Java20Parser.COLONCOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterPNNA(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitPNNA(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitPNNA(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_classLiteral;
    }

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	CLASS() {
	    return this.getToken(Java20Parser.CLASS, 0);
	};

	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.LBRACK);
	    } else {
	        return this.getToken(Java20Parser.LBRACK, i);
	    }
	};


	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.RBRACK);
	    } else {
	        return this.getToken(Java20Parser.RBRACK, i);
	    }
	};


	numericType() {
	    return this.getTypedRuleContext(NumericTypeContext,0);
	};

	BOOLEAN() {
	    return this.getToken(Java20Parser.BOOLEAN, 0);
	};

	VOID() {
	    return this.getToken(Java20Parser.VOID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterClassLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitClassLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitClassLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassInstanceCreationExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_classInstanceCreationExpression;
    }

	unqualifiedClassInstanceCreationExpression() {
	    return this.getTypedRuleContext(UnqualifiedClassInstanceCreationExpressionContext,0);
	};

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterClassInstanceCreationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitClassInstanceCreationExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitClassInstanceCreationExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnqualifiedClassInstanceCreationExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_unqualifiedClassInstanceCreationExpression;
    }

	NEW() {
	    return this.getToken(Java20Parser.NEW, 0);
	};

	classOrInterfaceTypeToInstantiate() {
	    return this.getTypedRuleContext(ClassOrInterfaceTypeToInstantiateContext,0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	classBody() {
	    return this.getTypedRuleContext(ClassBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterUnqualifiedClassInstanceCreationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitUnqualifiedClassInstanceCreationExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitUnqualifiedClassInstanceCreationExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassOrInterfaceTypeToInstantiateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_classOrInterfaceTypeToInstantiate;
    }

	Identifier = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.Identifier);
	    } else {
	        return this.getToken(Java20Parser.Identifier, i);
	    }
	};


	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.DOT);
	    } else {
	        return this.getToken(Java20Parser.DOT, i);
	    }
	};


	typeArgumentsOrDiamond() {
	    return this.getTypedRuleContext(TypeArgumentsOrDiamondContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterClassOrInterfaceTypeToInstantiate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitClassOrInterfaceTypeToInstantiate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitClassOrInterfaceTypeToInstantiate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeArgumentsOrDiamondContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_typeArgumentsOrDiamond;
    }

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	OACA() {
	    return this.getToken(Java20Parser.OACA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterTypeArgumentsOrDiamond(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitTypeArgumentsOrDiamond(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitTypeArgumentsOrDiamond(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayCreationExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_arrayCreationExpression;
    }

	arrayCreationExpressionWithoutInitializer() {
	    return this.getTypedRuleContext(ArrayCreationExpressionWithoutInitializerContext,0);
	};

	arrayCreationExpressionWithInitializer() {
	    return this.getTypedRuleContext(ArrayCreationExpressionWithInitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterArrayCreationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitArrayCreationExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitArrayCreationExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayCreationExpressionWithoutInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_arrayCreationExpressionWithoutInitializer;
    }

	NEW() {
	    return this.getToken(Java20Parser.NEW, 0);
	};

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	dimExprs() {
	    return this.getTypedRuleContext(DimExprsContext,0);
	};

	dims() {
	    return this.getTypedRuleContext(DimsContext,0);
	};

	classType() {
	    return this.getTypedRuleContext(ClassTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterArrayCreationExpressionWithoutInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitArrayCreationExpressionWithoutInitializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitArrayCreationExpressionWithoutInitializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayCreationExpressionWithInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_arrayCreationExpressionWithInitializer;
    }

	NEW() {
	    return this.getToken(Java20Parser.NEW, 0);
	};

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	dims() {
	    return this.getTypedRuleContext(DimsContext,0);
	};

	arrayInitializer() {
	    return this.getTypedRuleContext(ArrayInitializerContext,0);
	};

	classOrInterfaceType() {
	    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterArrayCreationExpressionWithInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitArrayCreationExpressionWithInitializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitArrayCreationExpressionWithInitializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DimExprsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_dimExprs;
    }

	dimExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DimExprContext);
	    } else {
	        return this.getTypedRuleContext(DimExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterDimExprs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitDimExprs(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitDimExprs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DimExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_dimExpr;
    }

	LBRACK() {
	    return this.getToken(Java20Parser.LBRACK, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RBRACK() {
	    return this.getToken(Java20Parser.RBRACK, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterDimExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitDimExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitDimExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayAccessContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_arrayAccess;
    }

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};

	LBRACK() {
	    return this.getToken(Java20Parser.LBRACK, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RBRACK() {
	    return this.getToken(Java20Parser.RBRACK, 0);
	};

	primaryNoNewArray() {
	    return this.getTypedRuleContext(PrimaryNoNewArrayContext,0);
	};

	arrayCreationExpressionWithInitializer() {
	    return this.getTypedRuleContext(ArrayCreationExpressionWithInitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterArrayAccess(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitArrayAccess(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitArrayAccess(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldAccessContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_fieldAccess;
    }

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.DOT);
	    } else {
	        return this.getToken(Java20Parser.DOT, i);
	    }
	};


	Identifier() {
	    return this.getToken(Java20Parser.Identifier, 0);
	};

	SUPER() {
	    return this.getToken(Java20Parser.SUPER, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterFieldAccess(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitFieldAccess(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitFieldAccess(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodInvocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_methodInvocation;
    }

	methodName() {
	    return this.getTypedRuleContext(MethodNameContext,0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.DOT);
	    } else {
	        return this.getToken(Java20Parser.DOT, i);
	    }
	};


	Identifier() {
	    return this.getToken(Java20Parser.Identifier, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	SUPER() {
	    return this.getToken(Java20Parser.SUPER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterMethodInvocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitMethodInvocation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitMethodInvocation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArgumentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_argumentList;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COMMA);
	    } else {
	        return this.getToken(Java20Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterArgumentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitArgumentList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitArgumentList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_methodReference;
    }

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};

	COLONCOLON() {
	    return this.getToken(Java20Parser.COLONCOLON, 0);
	};

	Identifier() {
	    return this.getToken(Java20Parser.Identifier, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	referenceType() {
	    return this.getTypedRuleContext(ReferenceTypeContext,0);
	};

	SUPER() {
	    return this.getToken(Java20Parser.SUPER, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	classType() {
	    return this.getTypedRuleContext(ClassTypeContext,0);
	};

	NEW() {
	    return this.getToken(Java20Parser.NEW, 0);
	};

	arrayType() {
	    return this.getTypedRuleContext(ArrayTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterMethodReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitMethodReference(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitMethodReference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PostfixExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_postfixExpression;
    }

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	pfE() {
	    return this.getTypedRuleContext(PfEContext,0);
	};

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterPostfixExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitPostfixExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitPostfixExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PfEContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_pfE;
    }

	INC() {
	    return this.getToken(Java20Parser.INC, 0);
	};

	pfE() {
	    return this.getTypedRuleContext(PfEContext,0);
	};

	DEC() {
	    return this.getToken(Java20Parser.DEC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterPfE(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitPfE(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitPfE(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PostIncrementExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_postIncrementExpression;
    }

	postfixExpression() {
	    return this.getTypedRuleContext(PostfixExpressionContext,0);
	};

	INC() {
	    return this.getToken(Java20Parser.INC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterPostIncrementExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitPostIncrementExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitPostIncrementExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PostDecrementExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_postDecrementExpression;
    }

	postfixExpression() {
	    return this.getTypedRuleContext(PostfixExpressionContext,0);
	};

	DEC() {
	    return this.getToken(Java20Parser.DEC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterPostDecrementExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitPostDecrementExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitPostDecrementExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnaryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_unaryExpression;
    }

	preIncrementExpression() {
	    return this.getTypedRuleContext(PreIncrementExpressionContext,0);
	};

	preDecrementExpression() {
	    return this.getTypedRuleContext(PreDecrementExpressionContext,0);
	};

	ADD() {
	    return this.getToken(Java20Parser.ADD, 0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	SUB() {
	    return this.getToken(Java20Parser.SUB, 0);
	};

	unaryExpressionNotPlusMinus() {
	    return this.getTypedRuleContext(UnaryExpressionNotPlusMinusContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterUnaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitUnaryExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitUnaryExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PreIncrementExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_preIncrementExpression;
    }

	INC() {
	    return this.getToken(Java20Parser.INC, 0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterPreIncrementExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitPreIncrementExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitPreIncrementExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PreDecrementExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_preDecrementExpression;
    }

	DEC() {
	    return this.getToken(Java20Parser.DEC, 0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterPreDecrementExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitPreDecrementExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitPreDecrementExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnaryExpressionNotPlusMinusContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_unaryExpressionNotPlusMinus;
    }

	postfixExpression() {
	    return this.getTypedRuleContext(PostfixExpressionContext,0);
	};

	TILDE() {
	    return this.getToken(Java20Parser.TILDE, 0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	BANG() {
	    return this.getToken(Java20Parser.BANG, 0);
	};

	castExpression() {
	    return this.getTypedRuleContext(CastExpressionContext,0);
	};

	switchExpression() {
	    return this.getTypedRuleContext(SwitchExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterUnaryExpressionNotPlusMinus(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitUnaryExpressionNotPlusMinus(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitUnaryExpressionNotPlusMinus(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CastExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_castExpression;
    }

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	referenceType() {
	    return this.getTypedRuleContext(ReferenceTypeContext,0);
	};

	unaryExpressionNotPlusMinus() {
	    return this.getTypedRuleContext(UnaryExpressionNotPlusMinusContext,0);
	};

	additionalBound = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AdditionalBoundContext);
	    } else {
	        return this.getTypedRuleContext(AdditionalBoundContext,i);
	    }
	};

	lambdaExpression() {
	    return this.getTypedRuleContext(LambdaExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterCastExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitCastExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitCastExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MultiplicativeExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_multiplicativeExpression;
    }

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	multiplicativeExpression() {
	    return this.getTypedRuleContext(MultiplicativeExpressionContext,0);
	};

	MUL() {
	    return this.getToken(Java20Parser.MUL, 0);
	};

	DIV() {
	    return this.getToken(Java20Parser.DIV, 0);
	};

	MOD() {
	    return this.getToken(Java20Parser.MOD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterMultiplicativeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitMultiplicativeExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitMultiplicativeExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AdditiveExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_additiveExpression;
    }

	multiplicativeExpression() {
	    return this.getTypedRuleContext(MultiplicativeExpressionContext,0);
	};

	additiveExpression() {
	    return this.getTypedRuleContext(AdditiveExpressionContext,0);
	};

	ADD() {
	    return this.getToken(Java20Parser.ADD, 0);
	};

	SUB() {
	    return this.getToken(Java20Parser.SUB, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterAdditiveExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitAdditiveExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitAdditiveExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShiftExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_shiftExpression;
    }

	additiveExpression() {
	    return this.getTypedRuleContext(AdditiveExpressionContext,0);
	};

	shiftExpression() {
	    return this.getTypedRuleContext(ShiftExpressionContext,0);
	};

	LT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.LT);
	    } else {
	        return this.getToken(Java20Parser.LT, i);
	    }
	};


	GT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.GT);
	    } else {
	        return this.getToken(Java20Parser.GT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterShiftExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitShiftExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitShiftExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RelationalExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_relationalExpression;
    }

	shiftExpression() {
	    return this.getTypedRuleContext(ShiftExpressionContext,0);
	};

	relationalExpression() {
	    return this.getTypedRuleContext(RelationalExpressionContext,0);
	};

	LT() {
	    return this.getToken(Java20Parser.LT, 0);
	};

	GT() {
	    return this.getToken(Java20Parser.GT, 0);
	};

	LE() {
	    return this.getToken(Java20Parser.LE, 0);
	};

	GE() {
	    return this.getToken(Java20Parser.GE, 0);
	};

	INSTANCEOF() {
	    return this.getToken(Java20Parser.INSTANCEOF, 0);
	};

	referenceType() {
	    return this.getTypedRuleContext(ReferenceTypeContext,0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterRelationalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitRelationalExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitRelationalExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EqualityExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_equalityExpression;
    }

	relationalExpression() {
	    return this.getTypedRuleContext(RelationalExpressionContext,0);
	};

	equalityExpression() {
	    return this.getTypedRuleContext(EqualityExpressionContext,0);
	};

	EQUAL() {
	    return this.getToken(Java20Parser.EQUAL, 0);
	};

	NOTEQUAL() {
	    return this.getToken(Java20Parser.NOTEQUAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterEqualityExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitEqualityExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitEqualityExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AndExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_andExpression;
    }

	equalityExpression() {
	    return this.getTypedRuleContext(EqualityExpressionContext,0);
	};

	andExpression() {
	    return this.getTypedRuleContext(AndExpressionContext,0);
	};

	BITAND() {
	    return this.getToken(Java20Parser.BITAND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitAndExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitAndExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExclusiveOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_exclusiveOrExpression;
    }

	andExpression() {
	    return this.getTypedRuleContext(AndExpressionContext,0);
	};

	exclusiveOrExpression() {
	    return this.getTypedRuleContext(ExclusiveOrExpressionContext,0);
	};

	CARET() {
	    return this.getToken(Java20Parser.CARET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterExclusiveOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitExclusiveOrExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitExclusiveOrExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InclusiveOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_inclusiveOrExpression;
    }

	exclusiveOrExpression() {
	    return this.getTypedRuleContext(ExclusiveOrExpressionContext,0);
	};

	inclusiveOrExpression() {
	    return this.getTypedRuleContext(InclusiveOrExpressionContext,0);
	};

	BITOR() {
	    return this.getToken(Java20Parser.BITOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterInclusiveOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitInclusiveOrExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitInclusiveOrExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConditionalAndExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_conditionalAndExpression;
    }

	inclusiveOrExpression() {
	    return this.getTypedRuleContext(InclusiveOrExpressionContext,0);
	};

	conditionalAndExpression() {
	    return this.getTypedRuleContext(ConditionalAndExpressionContext,0);
	};

	AND() {
	    return this.getToken(Java20Parser.AND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterConditionalAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitConditionalAndExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitConditionalAndExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConditionalOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_conditionalOrExpression;
    }

	conditionalAndExpression() {
	    return this.getTypedRuleContext(ConditionalAndExpressionContext,0);
	};

	conditionalOrExpression() {
	    return this.getTypedRuleContext(ConditionalOrExpressionContext,0);
	};

	OR() {
	    return this.getToken(Java20Parser.OR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterConditionalOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitConditionalOrExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitConditionalOrExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConditionalExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_conditionalExpression;
    }

	conditionalOrExpression() {
	    return this.getTypedRuleContext(ConditionalOrExpressionContext,0);
	};

	QUESTION() {
	    return this.getToken(Java20Parser.QUESTION, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	COLON() {
	    return this.getToken(Java20Parser.COLON, 0);
	};

	conditionalExpression() {
	    return this.getTypedRuleContext(ConditionalExpressionContext,0);
	};

	lambdaExpression() {
	    return this.getTypedRuleContext(LambdaExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterConditionalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitConditionalExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitConditionalExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssignmentExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_assignmentExpression;
    }

	conditionalExpression() {
	    return this.getTypedRuleContext(ConditionalExpressionContext,0);
	};

	assignment() {
	    return this.getTypedRuleContext(AssignmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterAssignmentExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitAssignmentExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitAssignmentExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_assignment;
    }

	leftHandSide() {
	    return this.getTypedRuleContext(LeftHandSideContext,0);
	};

	assignmentOperator() {
	    return this.getTypedRuleContext(AssignmentOperatorContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterAssignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitAssignment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitAssignment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LeftHandSideContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_leftHandSide;
    }

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};

	fieldAccess() {
	    return this.getTypedRuleContext(FieldAccessContext,0);
	};

	arrayAccess() {
	    return this.getTypedRuleContext(ArrayAccessContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterLeftHandSide(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitLeftHandSide(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitLeftHandSide(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssignmentOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_assignmentOperator;
    }

	ASSIGN() {
	    return this.getToken(Java20Parser.ASSIGN, 0);
	};

	MUL_ASSIGN() {
	    return this.getToken(Java20Parser.MUL_ASSIGN, 0);
	};

	DIV_ASSIGN() {
	    return this.getToken(Java20Parser.DIV_ASSIGN, 0);
	};

	MOD_ASSIGN() {
	    return this.getToken(Java20Parser.MOD_ASSIGN, 0);
	};

	ADD_ASSIGN() {
	    return this.getToken(Java20Parser.ADD_ASSIGN, 0);
	};

	SUB_ASSIGN() {
	    return this.getToken(Java20Parser.SUB_ASSIGN, 0);
	};

	LSHIFT_ASSIGN() {
	    return this.getToken(Java20Parser.LSHIFT_ASSIGN, 0);
	};

	RSHIFT_ASSIGN() {
	    return this.getToken(Java20Parser.RSHIFT_ASSIGN, 0);
	};

	URSHIFT_ASSIGN() {
	    return this.getToken(Java20Parser.URSHIFT_ASSIGN, 0);
	};

	AND_ASSIGN() {
	    return this.getToken(Java20Parser.AND_ASSIGN, 0);
	};

	XOR_ASSIGN() {
	    return this.getToken(Java20Parser.XOR_ASSIGN, 0);
	};

	OR_ASSIGN() {
	    return this.getToken(Java20Parser.OR_ASSIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterAssignmentOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitAssignmentOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitAssignmentOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LambdaExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_lambdaExpression;
    }

	lambdaParameters() {
	    return this.getTypedRuleContext(LambdaParametersContext,0);
	};

	ARROW() {
	    return this.getToken(Java20Parser.ARROW, 0);
	};

	lambdaBody() {
	    return this.getTypedRuleContext(LambdaBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterLambdaExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitLambdaExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitLambdaExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LambdaParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_lambdaParameters;
    }

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	lambdaParameterList() {
	    return this.getTypedRuleContext(LambdaParameterListContext,0);
	};

	Identifier() {
	    return this.getToken(Java20Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterLambdaParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitLambdaParameters(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitLambdaParameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LambdaParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_lambdaParameterList;
    }

	lambdaParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LambdaParameterContext);
	    } else {
	        return this.getTypedRuleContext(LambdaParameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COMMA);
	    } else {
	        return this.getToken(Java20Parser.COMMA, i);
	    }
	};


	Identifier = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.Identifier);
	    } else {
	        return this.getToken(Java20Parser.Identifier, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterLambdaParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitLambdaParameterList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitLambdaParameterList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LambdaParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_lambdaParameter;
    }

	lambdaParameterType() {
	    return this.getTypedRuleContext(LambdaParameterTypeContext,0);
	};

	variableDeclaratorId() {
	    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	variableArityParameter() {
	    return this.getTypedRuleContext(VariableArityParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterLambdaParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitLambdaParameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitLambdaParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LambdaParameterTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_lambdaParameterType;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	VAR() {
	    return this.getToken(Java20Parser.VAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterLambdaParameterType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitLambdaParameterType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitLambdaParameterType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LambdaBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_lambdaBody;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterLambdaBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitLambdaBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitLambdaBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SwitchExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_switchExpression;
    }

	SWITCH() {
	    return this.getToken(Java20Parser.SWITCH, 0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	switchBlock() {
	    return this.getTypedRuleContext(SwitchBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterSwitchExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitSwitchExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitSwitchExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstantExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_constantExpression;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.enterConstantExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java20ParserListener ) {
	        listener.exitConstantExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java20ParserVisitor ) {
	        return visitor.visitConstantExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




Java20Parser.Start_Context = Start_Context; 
Java20Parser.LiteralContext = LiteralContext; 
Java20Parser.TypeIdentifierContext = TypeIdentifierContext; 
Java20Parser.UnqualifiedMethodIdentifierContext = UnqualifiedMethodIdentifierContext; 
Java20Parser.PrimitiveTypeContext = PrimitiveTypeContext; 
Java20Parser.NumericTypeContext = NumericTypeContext; 
Java20Parser.IntegralTypeContext = IntegralTypeContext; 
Java20Parser.FloatingPointTypeContext = FloatingPointTypeContext; 
Java20Parser.ReferenceTypeContext = ReferenceTypeContext; 
Java20Parser.CoitContext = CoitContext; 
Java20Parser.ClassOrInterfaceTypeContext = ClassOrInterfaceTypeContext; 
Java20Parser.ClassTypeContext = ClassTypeContext; 
Java20Parser.InterfaceTypeContext = InterfaceTypeContext; 
Java20Parser.TypeVariableContext = TypeVariableContext; 
Java20Parser.ArrayTypeContext = ArrayTypeContext; 
Java20Parser.DimsContext = DimsContext; 
Java20Parser.TypeParameterContext = TypeParameterContext; 
Java20Parser.TypeParameterModifierContext = TypeParameterModifierContext; 
Java20Parser.TypeBoundContext = TypeBoundContext; 
Java20Parser.AdditionalBoundContext = AdditionalBoundContext; 
Java20Parser.TypeArgumentsContext = TypeArgumentsContext; 
Java20Parser.TypeArgumentListContext = TypeArgumentListContext; 
Java20Parser.TypeArgumentContext = TypeArgumentContext; 
Java20Parser.WildcardContext = WildcardContext; 
Java20Parser.WildcardBoundsContext = WildcardBoundsContext; 
Java20Parser.ModuleNameContext = ModuleNameContext; 
Java20Parser.PackageNameContext = PackageNameContext; 
Java20Parser.TypeNameContext = TypeNameContext; 
Java20Parser.PackageOrTypeNameContext = PackageOrTypeNameContext; 
Java20Parser.ExpressionNameContext = ExpressionNameContext; 
Java20Parser.MethodNameContext = MethodNameContext; 
Java20Parser.AmbiguousNameContext = AmbiguousNameContext; 
Java20Parser.CompilationUnitContext = CompilationUnitContext; 
Java20Parser.OrdinaryCompilationUnitContext = OrdinaryCompilationUnitContext; 
Java20Parser.ModularCompilationUnitContext = ModularCompilationUnitContext; 
Java20Parser.PackageDeclarationContext = PackageDeclarationContext; 
Java20Parser.PackageModifierContext = PackageModifierContext; 
Java20Parser.ImportDeclarationContext = ImportDeclarationContext; 
Java20Parser.SingleTypeImportDeclarationContext = SingleTypeImportDeclarationContext; 
Java20Parser.TypeImportOnDemandDeclarationContext = TypeImportOnDemandDeclarationContext; 
Java20Parser.SingleStaticImportDeclarationContext = SingleStaticImportDeclarationContext; 
Java20Parser.StaticImportOnDemandDeclarationContext = StaticImportOnDemandDeclarationContext; 
Java20Parser.TopLevelClassOrInterfaceDeclarationContext = TopLevelClassOrInterfaceDeclarationContext; 
Java20Parser.ModuleDeclarationContext = ModuleDeclarationContext; 
Java20Parser.ModuleDirectiveContext = ModuleDirectiveContext; 
Java20Parser.RequiresModifierContext = RequiresModifierContext; 
Java20Parser.ClassDeclarationContext = ClassDeclarationContext; 
Java20Parser.NormalClassDeclarationContext = NormalClassDeclarationContext; 
Java20Parser.ClassModifierContext = ClassModifierContext; 
Java20Parser.TypeParametersContext = TypeParametersContext; 
Java20Parser.TypeParameterListContext = TypeParameterListContext; 
Java20Parser.ClassExtendsContext = ClassExtendsContext; 
Java20Parser.ClassImplementsContext = ClassImplementsContext; 
Java20Parser.InterfaceTypeListContext = InterfaceTypeListContext; 
Java20Parser.ClassPermitsContext = ClassPermitsContext; 
Java20Parser.ClassBodyContext = ClassBodyContext; 
Java20Parser.ClassBodyDeclarationContext = ClassBodyDeclarationContext; 
Java20Parser.ClassMemberDeclarationContext = ClassMemberDeclarationContext; 
Java20Parser.FieldDeclarationContext = FieldDeclarationContext; 
Java20Parser.FieldModifierContext = FieldModifierContext; 
Java20Parser.VariableDeclaratorListContext = VariableDeclaratorListContext; 
Java20Parser.VariableDeclaratorContext = VariableDeclaratorContext; 
Java20Parser.VariableDeclaratorIdContext = VariableDeclaratorIdContext; 
Java20Parser.VariableInitializerContext = VariableInitializerContext; 
Java20Parser.UnannTypeContext = UnannTypeContext; 
Java20Parser.UnannPrimitiveTypeContext = UnannPrimitiveTypeContext; 
Java20Parser.UnannReferenceTypeContext = UnannReferenceTypeContext; 
Java20Parser.UnannClassOrInterfaceTypeContext = UnannClassOrInterfaceTypeContext; 
Java20Parser.UCOITContext = UCOITContext; 
Java20Parser.UnannClassTypeContext = UnannClassTypeContext; 
Java20Parser.UnannInterfaceTypeContext = UnannInterfaceTypeContext; 
Java20Parser.UnannTypeVariableContext = UnannTypeVariableContext; 
Java20Parser.UnannArrayTypeContext = UnannArrayTypeContext; 
Java20Parser.MethodDeclarationContext = MethodDeclarationContext; 
Java20Parser.MethodModifierContext = MethodModifierContext; 
Java20Parser.MethodHeaderContext = MethodHeaderContext; 
Java20Parser.ResultContext = ResultContext; 
Java20Parser.MethodDeclaratorContext = MethodDeclaratorContext; 
Java20Parser.ReceiverParameterContext = ReceiverParameterContext; 
Java20Parser.FormalParameterListContext = FormalParameterListContext; 
Java20Parser.FormalParameterContext = FormalParameterContext; 
Java20Parser.VariableArityParameterContext = VariableArityParameterContext; 
Java20Parser.VariableModifierContext = VariableModifierContext; 
Java20Parser.ThrowsTContext = ThrowsTContext; 
Java20Parser.ExceptionTypeListContext = ExceptionTypeListContext; 
Java20Parser.ExceptionTypeContext = ExceptionTypeContext; 
Java20Parser.MethodBodyContext = MethodBodyContext; 
Java20Parser.InstanceInitializerContext = InstanceInitializerContext; 
Java20Parser.StaticInitializerContext = StaticInitializerContext; 
Java20Parser.ConstructorDeclarationContext = ConstructorDeclarationContext; 
Java20Parser.ConstructorModifierContext = ConstructorModifierContext; 
Java20Parser.ConstructorDeclaratorContext = ConstructorDeclaratorContext; 
Java20Parser.SimpleTypeNameContext = SimpleTypeNameContext; 
Java20Parser.ConstructorBodyContext = ConstructorBodyContext; 
Java20Parser.ExplicitConstructorInvocationContext = ExplicitConstructorInvocationContext; 
Java20Parser.EnumDeclarationContext = EnumDeclarationContext; 
Java20Parser.EnumBodyContext = EnumBodyContext; 
Java20Parser.EnumConstantListContext = EnumConstantListContext; 
Java20Parser.EnumConstantContext = EnumConstantContext; 
Java20Parser.EnumConstantModifierContext = EnumConstantModifierContext; 
Java20Parser.EnumBodyDeclarationsContext = EnumBodyDeclarationsContext; 
Java20Parser.RecordDeclarationContext = RecordDeclarationContext; 
Java20Parser.RecordHeaderContext = RecordHeaderContext; 
Java20Parser.RecordComponentListContext = RecordComponentListContext; 
Java20Parser.RecordComponentContext = RecordComponentContext; 
Java20Parser.VariableArityRecordComponentContext = VariableArityRecordComponentContext; 
Java20Parser.RecordComponentModifierContext = RecordComponentModifierContext; 
Java20Parser.RecordBodyContext = RecordBodyContext; 
Java20Parser.RecordBodyDeclarationContext = RecordBodyDeclarationContext; 
Java20Parser.CompactConstructorDeclarationContext = CompactConstructorDeclarationContext; 
Java20Parser.InterfaceDeclarationContext = InterfaceDeclarationContext; 
Java20Parser.NormalInterfaceDeclarationContext = NormalInterfaceDeclarationContext; 
Java20Parser.InterfaceModifierContext = InterfaceModifierContext; 
Java20Parser.InterfaceExtendsContext = InterfaceExtendsContext; 
Java20Parser.InterfacePermitsContext = InterfacePermitsContext; 
Java20Parser.InterfaceBodyContext = InterfaceBodyContext; 
Java20Parser.InterfaceMemberDeclarationContext = InterfaceMemberDeclarationContext; 
Java20Parser.ConstantDeclarationContext = ConstantDeclarationContext; 
Java20Parser.ConstantModifierContext = ConstantModifierContext; 
Java20Parser.InterfaceMethodDeclarationContext = InterfaceMethodDeclarationContext; 
Java20Parser.InterfaceMethodModifierContext = InterfaceMethodModifierContext; 
Java20Parser.AnnotationInterfaceDeclarationContext = AnnotationInterfaceDeclarationContext; 
Java20Parser.AnnotationInterfaceBodyContext = AnnotationInterfaceBodyContext; 
Java20Parser.AnnotationInterfaceMemberDeclarationContext = AnnotationInterfaceMemberDeclarationContext; 
Java20Parser.AnnotationInterfaceElementDeclarationContext = AnnotationInterfaceElementDeclarationContext; 
Java20Parser.AnnotationInterfaceElementModifierContext = AnnotationInterfaceElementModifierContext; 
Java20Parser.DefaultValueContext = DefaultValueContext; 
Java20Parser.AnnotationContext = AnnotationContext; 
Java20Parser.NormalAnnotationContext = NormalAnnotationContext; 
Java20Parser.ElementValuePairListContext = ElementValuePairListContext; 
Java20Parser.ElementValuePairContext = ElementValuePairContext; 
Java20Parser.ElementValueContext = ElementValueContext; 
Java20Parser.ElementValueArrayInitializerContext = ElementValueArrayInitializerContext; 
Java20Parser.ElementValueListContext = ElementValueListContext; 
Java20Parser.MarkerAnnotationContext = MarkerAnnotationContext; 
Java20Parser.SingleElementAnnotationContext = SingleElementAnnotationContext; 
Java20Parser.ArrayInitializerContext = ArrayInitializerContext; 
Java20Parser.VariableInitializerListContext = VariableInitializerListContext; 
Java20Parser.BlockContext = BlockContext; 
Java20Parser.BlockStatementsContext = BlockStatementsContext; 
Java20Parser.BlockStatementContext = BlockStatementContext; 
Java20Parser.LocalClassOrInterfaceDeclarationContext = LocalClassOrInterfaceDeclarationContext; 
Java20Parser.LocalVariableDeclarationContext = LocalVariableDeclarationContext; 
Java20Parser.LocalVariableTypeContext = LocalVariableTypeContext; 
Java20Parser.LocalVariableDeclarationStatementContext = LocalVariableDeclarationStatementContext; 
Java20Parser.StatementContext = StatementContext; 
Java20Parser.StatementNoShortIfContext = StatementNoShortIfContext; 
Java20Parser.StatementWithoutTrailingSubstatementContext = StatementWithoutTrailingSubstatementContext; 
Java20Parser.EmptyStatement_Context = EmptyStatement_Context; 
Java20Parser.LabeledStatementContext = LabeledStatementContext; 
Java20Parser.LabeledStatementNoShortIfContext = LabeledStatementNoShortIfContext; 
Java20Parser.ExpressionStatementContext = ExpressionStatementContext; 
Java20Parser.StatementExpressionContext = StatementExpressionContext; 
Java20Parser.IfThenStatementContext = IfThenStatementContext; 
Java20Parser.IfThenElseStatementContext = IfThenElseStatementContext; 
Java20Parser.IfThenElseStatementNoShortIfContext = IfThenElseStatementNoShortIfContext; 
Java20Parser.AssertStatementContext = AssertStatementContext; 
Java20Parser.SwitchStatementContext = SwitchStatementContext; 
Java20Parser.SwitchBlockContext = SwitchBlockContext; 
Java20Parser.SwitchRuleContext = SwitchRuleContext; 
Java20Parser.SwitchBlockStatementGroupContext = SwitchBlockStatementGroupContext; 
Java20Parser.SwitchLabelContext = SwitchLabelContext; 
Java20Parser.CaseConstantContext = CaseConstantContext; 
Java20Parser.WhileStatementContext = WhileStatementContext; 
Java20Parser.WhileStatementNoShortIfContext = WhileStatementNoShortIfContext; 
Java20Parser.DoStatementContext = DoStatementContext; 
Java20Parser.ForStatementContext = ForStatementContext; 
Java20Parser.ForStatementNoShortIfContext = ForStatementNoShortIfContext; 
Java20Parser.BasicForStatementContext = BasicForStatementContext; 
Java20Parser.BasicForStatementNoShortIfContext = BasicForStatementNoShortIfContext; 
Java20Parser.ForInitContext = ForInitContext; 
Java20Parser.ForUpdateContext = ForUpdateContext; 
Java20Parser.StatementExpressionListContext = StatementExpressionListContext; 
Java20Parser.EnhancedForStatementContext = EnhancedForStatementContext; 
Java20Parser.EnhancedForStatementNoShortIfContext = EnhancedForStatementNoShortIfContext; 
Java20Parser.BreakStatementContext = BreakStatementContext; 
Java20Parser.ContinueStatementContext = ContinueStatementContext; 
Java20Parser.ReturnStatementContext = ReturnStatementContext; 
Java20Parser.ThrowStatementContext = ThrowStatementContext; 
Java20Parser.SynchronizedStatementContext = SynchronizedStatementContext; 
Java20Parser.TryStatementContext = TryStatementContext; 
Java20Parser.CatchesContext = CatchesContext; 
Java20Parser.CatchClauseContext = CatchClauseContext; 
Java20Parser.CatchFormalParameterContext = CatchFormalParameterContext; 
Java20Parser.CatchTypeContext = CatchTypeContext; 
Java20Parser.FinallyBlockContext = FinallyBlockContext; 
Java20Parser.TryWithResourcesStatementContext = TryWithResourcesStatementContext; 
Java20Parser.ResourceSpecificationContext = ResourceSpecificationContext; 
Java20Parser.ResourceListContext = ResourceListContext; 
Java20Parser.ResourceContext = ResourceContext; 
Java20Parser.VariableAccessContext = VariableAccessContext; 
Java20Parser.YieldStatementContext = YieldStatementContext; 
Java20Parser.PatternContext = PatternContext; 
Java20Parser.TypePatternContext = TypePatternContext; 
Java20Parser.ExpressionContext = ExpressionContext; 
Java20Parser.PrimaryContext = PrimaryContext; 
Java20Parser.PrimaryNoNewArrayContext = PrimaryNoNewArrayContext; 
Java20Parser.PNNAContext = PNNAContext; 
Java20Parser.ClassLiteralContext = ClassLiteralContext; 
Java20Parser.ClassInstanceCreationExpressionContext = ClassInstanceCreationExpressionContext; 
Java20Parser.UnqualifiedClassInstanceCreationExpressionContext = UnqualifiedClassInstanceCreationExpressionContext; 
Java20Parser.ClassOrInterfaceTypeToInstantiateContext = ClassOrInterfaceTypeToInstantiateContext; 
Java20Parser.TypeArgumentsOrDiamondContext = TypeArgumentsOrDiamondContext; 
Java20Parser.ArrayCreationExpressionContext = ArrayCreationExpressionContext; 
Java20Parser.ArrayCreationExpressionWithoutInitializerContext = ArrayCreationExpressionWithoutInitializerContext; 
Java20Parser.ArrayCreationExpressionWithInitializerContext = ArrayCreationExpressionWithInitializerContext; 
Java20Parser.DimExprsContext = DimExprsContext; 
Java20Parser.DimExprContext = DimExprContext; 
Java20Parser.ArrayAccessContext = ArrayAccessContext; 
Java20Parser.FieldAccessContext = FieldAccessContext; 
Java20Parser.MethodInvocationContext = MethodInvocationContext; 
Java20Parser.ArgumentListContext = ArgumentListContext; 
Java20Parser.MethodReferenceContext = MethodReferenceContext; 
Java20Parser.PostfixExpressionContext = PostfixExpressionContext; 
Java20Parser.PfEContext = PfEContext; 
Java20Parser.PostIncrementExpressionContext = PostIncrementExpressionContext; 
Java20Parser.PostDecrementExpressionContext = PostDecrementExpressionContext; 
Java20Parser.UnaryExpressionContext = UnaryExpressionContext; 
Java20Parser.PreIncrementExpressionContext = PreIncrementExpressionContext; 
Java20Parser.PreDecrementExpressionContext = PreDecrementExpressionContext; 
Java20Parser.UnaryExpressionNotPlusMinusContext = UnaryExpressionNotPlusMinusContext; 
Java20Parser.CastExpressionContext = CastExpressionContext; 
Java20Parser.MultiplicativeExpressionContext = MultiplicativeExpressionContext; 
Java20Parser.AdditiveExpressionContext = AdditiveExpressionContext; 
Java20Parser.ShiftExpressionContext = ShiftExpressionContext; 
Java20Parser.RelationalExpressionContext = RelationalExpressionContext; 
Java20Parser.EqualityExpressionContext = EqualityExpressionContext; 
Java20Parser.AndExpressionContext = AndExpressionContext; 
Java20Parser.ExclusiveOrExpressionContext = ExclusiveOrExpressionContext; 
Java20Parser.InclusiveOrExpressionContext = InclusiveOrExpressionContext; 
Java20Parser.ConditionalAndExpressionContext = ConditionalAndExpressionContext; 
Java20Parser.ConditionalOrExpressionContext = ConditionalOrExpressionContext; 
Java20Parser.ConditionalExpressionContext = ConditionalExpressionContext; 
Java20Parser.AssignmentExpressionContext = AssignmentExpressionContext; 
Java20Parser.AssignmentContext = AssignmentContext; 
Java20Parser.LeftHandSideContext = LeftHandSideContext; 
Java20Parser.AssignmentOperatorContext = AssignmentOperatorContext; 
Java20Parser.LambdaExpressionContext = LambdaExpressionContext; 
Java20Parser.LambdaParametersContext = LambdaParametersContext; 
Java20Parser.LambdaParameterListContext = LambdaParameterListContext; 
Java20Parser.LambdaParameterContext = LambdaParameterContext; 
Java20Parser.LambdaParameterTypeContext = LambdaParameterTypeContext; 
Java20Parser.LambdaBodyContext = LambdaBodyContext; 
Java20Parser.SwitchExpressionContext = SwitchExpressionContext; 
Java20Parser.ConstantExpressionContext = ConstantExpressionContext; 
